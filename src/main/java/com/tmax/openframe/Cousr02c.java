package com.tmax.openframe;

import com.tmax.openframe.online.task.service.ProgramControl;
import com.tmax.openframe.dto.Cosgn00cInputDto;
import com.tmax.openframe.mapper.Cousr02cMapperInterface.*;
import com.tmax.openframe.dto.Coadm01cInputDto;
import com.tmax.openframe.dto.Cousr00cInputDto;
import com.tmax.openframe.online.task.service.OtherUserTaskInvoker;
import com.tmax.openframe.online.task.domain.dto.TaskDto.*;
import com.tmax.openframe.online.task.domain.dto.Data;
import com.tmax.openframe.online.task.service.Task;
import com.tmax.openframe.dto.Cousr02cOutputDto;
import com.tmax.openframe.dto.Cousr02cInputDto;
import com.tmax.openframe.online.exception.ConditionException;
import com.tmax.openframe.dto.AwsM2CarddemoUsrsecVsamKsdsDto;
import com.tmax.openframe.online.daoexecutor.service.ReadPointManager;
import com.tmax.openframe.online.daoexecutor.service.RecordKeyAccessor;
import static com.tmax.openframe.variable.group.Cousr02cCarddemoCommarea.Cousr02cCdemoGeneralInfo.*;
import static com.tmax.openframe.variable.group.Cousr02cWsVariables.*;
import com.tmax.openframe.runtime.cobol.CobStream;
import com.tmax.openframe.runtime.cobol.CobStringUtils;
import com.tmax.openframe.runtime.cobol.IntrinsicFunction;
import com.tmax.openframe.runtime.context.OpenFrameContext;
import com.tmax.openframe.runtime.flow.ControlManager;
import com.tmax.openframe.variable.Cousr02cVariableContainer;
import com.tmax.openframe.variable.group.Cousr2ai;
import java.math.*;
import java.util.*;
import java.util.function.Consumer;
import java.util.regex.Pattern;
import lombok.*;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Primary;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/03/20 15:15:19 KST</p>
 * <hr>
 * <p>Java class for defining logics of COBOL program</p>
 * <ul>
 * <li>The name of COBOL program: COUSR02C.cbl</li>
 * <li>Variable container class: {@link Cousr02cVariableContainer}</li>
 * </ul>
 */
@Service
@RequiredArgsConstructor
@Transactional
@Primary
public class Cousr02c {
    /** 
     * <p>Class that manages an execution flow of the program</p>
     */
    protected final ControlManager controlManager;
    Consumer<OpenFrameContext> mainPara = this::mainPara;
    Consumer<OpenFrameContext> processEnterKey = this::processEnterKey;
    Consumer<OpenFrameContext> updateUserInfo = this::updateUserInfo;
    Consumer<OpenFrameContext> returnToPrevScreen = this::returnToPrevScreen;
    Consumer<OpenFrameContext> sendUsrupdScreen = this::sendUsrupdScreen;
    Consumer<OpenFrameContext> receiveUsrupdScreen = this::receiveUsrupdScreen;
    Consumer<OpenFrameContext> populateHeaderInfo = this::populateHeaderInfo;
    Consumer<OpenFrameContext> readUserSecFile = this::readUserSecFile;
    Consumer<OpenFrameContext> updateUserSecFile = this::updateUserSecFile;
    Consumer<OpenFrameContext> clearCurrentScreen = this::clearCurrentScreen;
    Consumer<OpenFrameContext> initializeAllFields = this::initializeAllFields;
    /** 
     * <p>Execution flow of COBOL program that defined in the procedure division</p>
     */
    ArrayList<Consumer> methodList = new ArrayList<>();
    {
        methodList.add(mainPara);
        methodList.add(processEnterKey);
        methodList.add(updateUserInfo);
        methodList.add(returnToPrevScreen);
        methodList.add(sendUsrupdScreen);
        methodList.add(receiveUsrupdScreen);
        methodList.add(populateHeaderInfo);
        methodList.add(readUserSecFile);
        methodList.add(updateUserSecFile);
        methodList.add(clearCurrentScreen);
        methodList.add(initializeAllFields);
    }
    private final ReadPointManager readPointManager;
    private final RecordKeyAccessor recordKeyAccessor;
    private final Task task;
    private final TaskInvoker taskInvoker;
    private final ProgramControl programControl;

    /** 
     * <p>Method for executing a program logic that defined in the procedure division</p>
     * @param generalContext context that is necessary for executing program
     * @return return value of program
     */
    public int run(Map<String, Object> generalContext) {
        OpenFrameContext context = new OpenFrameContext(generalContext,
                methodList);
        if (context.getProgramVariableContainer("Cousr02c") == null) {
            Cousr02cVariableContainer container = new Cousr02cVariableContainer();
            context.setProgramVariableContainer("Cousr02c", container);
        }
        controlManager.run(context);
        return context.getReturnValue();
    }

    // ******************************************************************
    // * Program     : COUSR02C.CBL
    // * Application : CardDemo
    // * Type        : CICS COBOL Program
    // * Function    : Update a user in USRSEC file
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.
    // * All Rights Reserved.
    // *
    // * Licensed under the Apache License, Version 2.0 (the "License").
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at
    // *
    // *    http://www.apache.org/licenses/LICENSE-2.0
    // *
    // * Unless required by applicable law or agreed to in writing,
    // * software distributed under the License is distributed on an
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
    // * either express or implied. See the License for the specific
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // *      OCCURS 1 TO 32767 TIMES DEPENDING ON EIBCALEN.
    // *----------------------------------------------------------------*
    // *                       PROCEDURE DIVISION
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COUSR02C.cbl:82] MAIN-PARA Paragraph</p>
     */
    void mainPara(OpenFrameContext context) {
        Cousr02cVariableContainer container = (Cousr02cVariableContainer) context
                .getProgramVariableContainer("Cousr02c");
        // [T-Up#INFO][COUSR02C.cbl:84] SET statement
        container.getWsVariables().setWsErrFlg(ERR_FLG_OFF);
        // [T-Up#INFO][COUSR02C.cbl:85] SET statement
        container.getWsVariables().setWsUsrModified(USR_MODIFIED_NO);
        // [T-Up#INFO][COUSR02C.cbl:87] MOVE statement
        container.getWsVariables().setWsMessage(StringUtils.repeat(' ', 80));
        container.setErrmsgo(StringUtils.repeat(' ', 78));
        // [T-Up#INFO][COUSR02C.cbl:90] IF statement
        if (task.hasCommarea() == 0) {
            // [T-Up#INFO][COUSR02C.cbl:91] MOVE statement
            container.getCarddemoCommarea().getCdemoGeneralInfo()
                    .setCdemoToProgram("COSGN00C");
            // [T-Up#INFO][COUSR02C.cbl:92] MOVE statement
            container
                    .getCarddemoCommarea()
                    .getCdemoGeneralInfo()
                    .setCdemoFromTranid(
                            container.getWsVariables().getWsTranid());
            // [T-Up#INFO][COUSR02C.cbl:93] MOVE statement
            container
                    .getCarddemoCommarea()
                    .getCdemoGeneralInfo()
                    .setCdemoFromProgram(
                            container.getWsVariables().getWsPgmname());
            // [T-Up#INFO][COUSR02C.cbl:94] MOVE statement
            container.getCarddemoCommarea().getCdemoGeneralInfo()
                    .setCdemoPgmContext(0);
            // [T-Up#INFO][COUSR02C.cbl:95] EXEC_CICS statement
            /*
                               EXEC CICS
                               XCTL PROGRAM('COSGN00C')
                               COMMAREA(CARDDEMO-COMMAREA)
                               END-EXEC
             */
            Cosgn00cInputDto cosgn00cInputDto = new Cosgn00cInputDto();
            cosgn00cInputDto
                    .setDfhcommarea(Cousr02cCarddemoCommareaToCosgn00cDfhcommarea.INSTANCE
                            .toTarget(container.getCarddemoCommarea()));
            programControl.forward("CC00", cosgn00cInputDto);
            context.setReturnFlag(true);
            // [T-Up#INFO][COUSR02C.cbl:99] PERFORM statement
            controlManager.run(context, returnToPrevScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else {
            // [T-Up#INFO][COUSR02C.cbl:101] MOVE statement
            container.getCarddemoCommarea().set(
                    StringUtils.overlay(container.getCarddemoCommarea().get(),
                            container.getDfhcommarea().get().substring(0, 194),
                            0, 194));
            // [T-Up#INFO][COUSR02C.cbl:102] IF statement
            if (!(container.getCarddemoCommarea().getCdemoGeneralInfo()
                    .getCdemoPgmContext() == CDEMO_PGM_REENTER)) {
                // [T-Up#INFO][COUSR02C.cbl:103] SET statement
                container.getCarddemoCommarea().getCdemoGeneralInfo()
                        .setCdemoPgmContext(CDEMO_PGM_REENTER);
                // [T-Up#INFO][COUSR02C.cbl:104] MOVE statement
                container.setCousr2ao(Cousr2ai.createDefaultValueInstance()
                        .get());
                // [T-Up#INFO][COUSR02C.cbl:105] MOVE statement
                container.getCousr2ai().setUsridinl(-1);
                // [T-Up#INFO][COUSR02C.cbl:106] IF statement
                if (CobStringUtils.compare(container.getCarddemoCommarea()
                        .getCdemoCu02Info().getCdemoCu02UsrSelected(),
                        StringUtils.repeat(' ', 8)) != 0
                        && CobStringUtils.compare(container
                                .getCarddemoCommarea().getCdemoCu02Info()
                                .getCdemoCu02UsrSelected(),
                                StringUtils.repeat((char) 0x00, 8)) != 0) {
                    // [T-Up#INFO][COUSR02C.cbl:108] MOVE statement
                    container.getCousr2ai().setUsridini(
                            container.getCarddemoCommarea().getCdemoCu02Info()
                                    .getCdemoCu02UsrSelected());
                    // [T-Up#INFO][COUSR02C.cbl:110] PERFORM statement
                    controlManager.run(context, processEnterKey);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                }
                // [T-Up#INFO][COUSR02C.cbl:112] PERFORM statement
                controlManager.run(context, sendUsrupdScreen);
                if (controlManager.isTerminate(context)) {
                    return;
                }
            } else {
                // [T-Up#INFO][COUSR02C.cbl:114] PERFORM statement
                controlManager.run(context, receiveUsrupdScreen);
                if (controlManager.isTerminate(context)) {
                    return;
                }
                // [T-Up#INFO][COUSR02C.cbl:115] EVALUATE statement
                if (CobStringUtils.compare(task.getPressedKey(), container
                        .getDfhaid().getDfhenter()) == 0) {
                    // [T-Up#INFO][COUSR02C.cbl:117] PERFORM statement
                    controlManager.run(context, processEnterKey);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                } else if (CobStringUtils.compare(task.getPressedKey(),
                        container.getDfhaid().getDfhpf3()) == 0) {
                    // [T-Up#INFO][COUSR02C.cbl:119] PERFORM statement
                    controlManager.run(context, updateUserInfo);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                    // [T-Up#INFO][COUSR02C.cbl:120] IF statement
                    if (CobStringUtils.compare(container.getCarddemoCommarea()
                            .getCdemoGeneralInfo().getCdemoFromProgram(),
                            StringUtils.repeat(' ', 8)) == 0
                            || CobStringUtils.compare(container
                                    .getCarddemoCommarea()
                                    .getCdemoGeneralInfo()
                                    .getCdemoFromProgram(),
                                    StringUtils.repeat((char) 0x00, 8)) == 0) {
                        // [T-Up#INFO][COUSR02C.cbl:121] MOVE statement
                        container.getCarddemoCommarea().getCdemoGeneralInfo()
                                .setCdemoToProgram("COADM01C");
                        // [T-Up#INFO][COUSR02C.cbl:122] MOVE statement
                        container
                                .getCarddemoCommarea()
                                .getCdemoGeneralInfo()
                                .setCdemoFromTranid(
                                        container.getWsVariables()
                                                .getWsTranid());
                        // [T-Up#INFO][COUSR02C.cbl:123] MOVE statement
                        container
                                .getCarddemoCommarea()
                                .getCdemoGeneralInfo()
                                .setCdemoFromProgram(
                                        container.getWsVariables()
                                                .getWsPgmname());
                        // [T-Up#INFO][COUSR02C.cbl:124] MOVE statement
                        container.getCarddemoCommarea().getCdemoGeneralInfo()
                                .setCdemoPgmContext(0);
                        // [T-Up#INFO][COUSR02C.cbl:125] EXEC_CICS statement
                        /*
                                                           EXEC CICS
                                                           XCTL PROGRAM('COADM01C')
                                                           COMMAREA(CARDDEMO-COMMAREA)
                                                           END-EXEC
                         */
                        Coadm01cInputDto coadm01cInputDto = new Coadm01cInputDto();
                        coadm01cInputDto
                                .setDfhcommarea(Cousr02cCarddemoCommareaToCoadm01cDfhcommarea.INSTANCE
                                        .toTarget(container
                                                .getCarddemoCommarea()));
                        programControl.forward("CA00", coadm01cInputDto);
                        context.setReturnFlag(true);
                    } else {
                        // [T-Up#INFO][COUSR02C.cbl:130] MOVE statement
                        container
                                .getCarddemoCommarea()
                                .getCdemoGeneralInfo()
                                .setCdemoToProgram(
                                        container.getCarddemoCommarea()
                                                .getCdemoGeneralInfo()
                                                .getCdemoFromProgram());
                        // [T-Up#INFO][COUSR02C.cbl:132] MOVE statement
                        container
                                .getCarddemoCommarea()
                                .getCdemoGeneralInfo()
                                .setCdemoFromTranid(
                                        container.getWsVariables()
                                                .getWsTranid());
                        // [T-Up#INFO][COUSR02C.cbl:133] MOVE statement
                        container
                                .getCarddemoCommarea()
                                .getCdemoGeneralInfo()
                                .setCdemoFromProgram(
                                        container.getWsVariables()
                                                .getWsPgmname());
                        // [T-Up#INFO][COUSR02C.cbl:134] MOVE statement
                        container.getCarddemoCommarea().getCdemoGeneralInfo()
                                .setCdemoPgmContext(0);
                        // [T-Up#INFO][COUSR02C.cbl:135] IF statement
                        if (CobStringUtils.compare(container
                                .getCarddemoCommarea().getCdemoGeneralInfo()
                                .getCdemoToProgram(), "COUSR00C") == 0) {
                            // [T-Up#INFO][COUSR02C.cbl:136] EXEC_CICS statement
                            /*
                                                                   EXEC CICS
                                                                   XCTL PROGRAM('COUSR00C')
                                                                   COMMAREA(CARDDEMO-COMMAREA)
                                                                   END-EXEC
                             */
                            Cousr00cInputDto cousr00cInputDto = new Cousr00cInputDto();
                            cousr00cInputDto
                                    .setDfhcommarea(Cousr02cCarddemoCommareaToCousr00cDfhcommarea.INSTANCE
                                            .toTarget(container
                                                    .getCarddemoCommarea()));
                            programControl.forward("CU00", cousr00cInputDto);
                            context.setReturnFlag(true);
                        } else {
                            // [T-Up#INFO][COUSR02C.cbl:140] IF statement
                            if (CobStringUtils.compare(container
                                    .getCarddemoCommarea()
                                    .getCdemoGeneralInfo().getCdemoToProgram(),
                                    "COADM01C") == 0) {
                                // [T-Up#INFO][COUSR02C.cbl:141] EXEC_CICS statement
                                /*
                                                                       EXEC CICS
                                                                       XCTL PROGRAM('COADM01C')
                                                                       COMMAREA(CARDDEMO-COMMAREA)
                                                                       END-EXEC
                                 */
                                Coadm01cInputDto coadm01cInputDto = new Coadm01cInputDto();
                                coadm01cInputDto
                                        .setDfhcommarea(Cousr02cCarddemoCommareaToCoadm01cDfhcommarea.INSTANCE
                                                .toTarget(container
                                                        .getCarddemoCommarea()));
                                programControl
                                        .forward("CA00", coadm01cInputDto);
                                context.setReturnFlag(true);
                            }
                        }
                        // [T-Up#INFO][COUSR02C.cbl:147] PERFORM statement
                        controlManager.run(context, returnToPrevScreen);
                        if (controlManager.isTerminate(context)) {
                            return;
                        }
                    }
                } else if (CobStringUtils.compare(task.getPressedKey(),
                        container.getDfhaid().getDfhpf4()) == 0) {
                    // [T-Up#INFO][COUSR02C.cbl:149] PERFORM statement
                    controlManager.run(context, clearCurrentScreen);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                } else if (CobStringUtils.compare(task.getPressedKey(),
                        container.getDfhaid().getDfhpf5()) == 0) {
                    // [T-Up#INFO][COUSR02C.cbl:151] PERFORM statement
                    controlManager.run(context, updateUserInfo);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                } else if (CobStringUtils.compare(task.getPressedKey(),
                        container.getDfhaid().getDfhpf12()) == 0) {
                    // [T-Up#INFO][COUSR02C.cbl:153] MOVE statement
                    container.getCarddemoCommarea().getCdemoGeneralInfo()
                            .setCdemoToProgram("COADM01C");
                    // [T-Up#INFO][COUSR02C.cbl:154] MOVE statement
                    container
                            .getCarddemoCommarea()
                            .getCdemoGeneralInfo()
                            .setCdemoFromTranid(
                                    container.getWsVariables().getWsTranid());
                    // [T-Up#INFO][COUSR02C.cbl:155] MOVE statement
                    container
                            .getCarddemoCommarea()
                            .getCdemoGeneralInfo()
                            .setCdemoFromProgram(
                                    container.getWsVariables().getWsPgmname());
                    // [T-Up#INFO][COUSR02C.cbl:156] MOVE statement
                    container.getCarddemoCommarea().getCdemoGeneralInfo()
                            .setCdemoPgmContext(0);
                    // [T-Up#INFO][COUSR02C.cbl:157] EXEC_CICS statement
                    /*
                                                   EXEC CICS
                                                   XCTL PROGRAM('COADM01C')
                                                   COMMAREA(CARDDEMO-COMMAREA)
                                                   END-EXEC
                     */
                    Coadm01cInputDto coadm01cInputDto = new Coadm01cInputDto();
                    coadm01cInputDto
                            .setDfhcommarea(Cousr02cCarddemoCommareaToCoadm01cDfhcommarea.INSTANCE
                                    .toTarget(container.getCarddemoCommarea()));
                    programControl.forward("CA00", coadm01cInputDto);
                    context.setReturnFlag(true);
                    // [T-Up#INFO][COUSR02C.cbl:161] PERFORM statement
                    controlManager.run(context, returnToPrevScreen);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                } else {
                    // [T-Up#INFO][COUSR02C.cbl:163] MOVE statement
                    container.getWsVariables().setWsErrFlg("Y");
                    // [T-Up#INFO][COUSR02C.cbl:164] MOVE statement
                    container.getWsVariables().setWsMessage(
                            container.getCcdaCommonMessages()
                                    .getCcdaMsgInvalidKey());
                    // [T-Up#INFO][COUSR02C.cbl:165] PERFORM statement
                    controlManager.run(context, sendUsrupdScreen);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                }
            }
        }
        // [T-Up#INFO][COUSR02C.cbl:170] EXEC_CICS statement
        /*
                       EXEC CICS RETURN
                                 TRANSID (WS-TRANID)
                                 COMMAREA (CARDDEMO-COMMAREA)
                       END-EXEC
         */
        TaskDto taskDto = TaskDto
                .builder()
                .destination("CU02")
                .data(Data
                        .session(Cousr02cCarddemoCommareaToCousr02cDfhcommarea.INSTANCE
                                .toTarget(container.getCarddemoCommarea())))
                .build();
        taskInvoker.setNextTask(taskDto);
        context.setReturnFlag(true);
    }

    // *----------------------------------------------------------------*
    // *                      PROCESS-ENTER-KEY
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COUSR02C.cbl:178] PROCESS-ENTER-KEY Paragraph</p>
     */
    void processEnterKey(OpenFrameContext context) {
        Cousr02cVariableContainer container = (Cousr02cVariableContainer) context
                .getProgramVariableContainer("Cousr02c");
        // [T-Up#INFO][COUSR02C.cbl:180] EVALUATE statement
        if (CobStringUtils.compare(container.getCousr2ai().getUsridini(),
                StringUtils.repeat(' ', 8)) == 0
                || CobStringUtils.compare(
                        container.getCousr2ai().getUsridini(),
                        StringUtils.repeat((char) 0x00, 8)) == 0) {
            // [T-Up#INFO][COUSR02C.cbl:182] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COUSR02C.cbl:183] MOVE statement
            container.getWsVariables().setWsMessage(
                    "User ID can NOT be empty...");
            // [T-Up#INFO][COUSR02C.cbl:185] MOVE statement
            container.getCousr2ai().setUsridinl(-1);
            // [T-Up#INFO][COUSR02C.cbl:186] PERFORM statement
            controlManager.run(context, sendUsrupdScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else {
            // [T-Up#INFO][COUSR02C.cbl:188] MOVE statement
            container.getCousr2ai().setUsridinl(-1);
            // [T-Up#INFO][COUSR02C.cbl:189] CONTINUE statement
        }
        // [T-Up#INFO][COUSR02C.cbl:192] IF statement
        if (!(CobStringUtils.compare(container.getWsVariables().getWsErrFlg(),
                ERR_FLG_ON) == 0)) {
            // [T-Up#INFO][COUSR02C.cbl:193] MOVE statement
            container.getCousr2ai().setFnamei(StringUtils.repeat(' ', 20));
            container.getCousr2ai().setLnamei(StringUtils.repeat(' ', 20));
            container.getCousr2ai().setPasswdi(StringUtils.repeat(' ', 8));
            container.getCousr2ai().setUsrtypei(" ");
            // [T-Up#INFO][COUSR02C.cbl:197] MOVE statement
            container.getSecUserData().setSecUsrId(
                    container.getCousr2ai().getUsridini());
            // [T-Up#INFO][COUSR02C.cbl:198] PERFORM statement
            controlManager.run(context, readUserSecFile);
            if (controlManager.isTerminate(context)) {
                return;
            }
        }
        // [T-Up#INFO][COUSR02C.cbl:201] IF statement
        if (!(CobStringUtils.compare(container.getWsVariables().getWsErrFlg(),
                ERR_FLG_ON) == 0)) {
            // [T-Up#INFO][COUSR02C.cbl:202] MOVE statement
            container.getCousr2ai().setFnamei(
                    container.getSecUserData().getSecUsrFname());
            // [T-Up#INFO][COUSR02C.cbl:203] MOVE statement
            container.getCousr2ai().setLnamei(
                    container.getSecUserData().getSecUsrLname());
            // [T-Up#INFO][COUSR02C.cbl:204] MOVE statement
            container.getCousr2ai().setPasswdi(
                    container.getSecUserData().getSecUsrPwd());
            // [T-Up#INFO][COUSR02C.cbl:205] MOVE statement
            container.getCousr2ai().setUsrtypei(
                    container.getSecUserData().getSecUsrType());
            // [T-Up#INFO][COUSR02C.cbl:206] PERFORM statement
            controlManager.run(context, sendUsrupdScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        }
    }

    // *----------------------------------------------------------------*
    // *                      UPDATE-USER-INFO
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COUSR02C.cbl:212] UPDATE-USER-INFO Paragraph</p>
     */
    void updateUserInfo(OpenFrameContext context) {
        Cousr02cVariableContainer container = (Cousr02cVariableContainer) context
                .getProgramVariableContainer("Cousr02c");
        // [T-Up#INFO][COUSR02C.cbl:214] EVALUATE statement
        if (CobStringUtils.compare(container.getCousr2ai().getUsridini(),
                StringUtils.repeat(' ', 8)) == 0
                || CobStringUtils.compare(
                        container.getCousr2ai().getUsridini(),
                        StringUtils.repeat((char) 0x00, 8)) == 0) {
            // [T-Up#INFO][COUSR02C.cbl:216] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COUSR02C.cbl:217] MOVE statement
            container.getWsVariables().setWsMessage(
                    "User ID can NOT be empty...");
            // [T-Up#INFO][COUSR02C.cbl:219] MOVE statement
            container.getCousr2ai().setUsridinl(-1);
            // [T-Up#INFO][COUSR02C.cbl:220] PERFORM statement
            controlManager.run(context, sendUsrupdScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else if (CobStringUtils.compare(container.getCousr2ai().getFnamei(),
                StringUtils.repeat(' ', 20)) == 0
                || CobStringUtils.compare(container.getCousr2ai().getFnamei(),
                        StringUtils.repeat((char) 0x00, 20)) == 0) {
            // [T-Up#INFO][COUSR02C.cbl:222] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COUSR02C.cbl:223] MOVE statement
            container.getWsVariables().setWsMessage(
                    "First Name can NOT be empty...");
            // [T-Up#INFO][COUSR02C.cbl:225] MOVE statement
            container.getCousr2ai().setFnamel(-1);
            // [T-Up#INFO][COUSR02C.cbl:226] PERFORM statement
            controlManager.run(context, sendUsrupdScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else if (CobStringUtils.compare(container.getCousr2ai().getLnamei(),
                StringUtils.repeat(' ', 20)) == 0
                || CobStringUtils.compare(container.getCousr2ai().getLnamei(),
                        StringUtils.repeat((char) 0x00, 20)) == 0) {
            // [T-Up#INFO][COUSR02C.cbl:228] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COUSR02C.cbl:229] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Last Name can NOT be empty...");
            // [T-Up#INFO][COUSR02C.cbl:231] MOVE statement
            container.getCousr2ai().setLnamel(-1);
            // [T-Up#INFO][COUSR02C.cbl:232] PERFORM statement
            controlManager.run(context, sendUsrupdScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else if (CobStringUtils.compare(container.getCousr2ai().getPasswdi(),
                StringUtils.repeat(' ', 8)) == 0
                || CobStringUtils.compare(container.getCousr2ai().getPasswdi(),
                        StringUtils.repeat((char) 0x00, 8)) == 0) {
            // [T-Up#INFO][COUSR02C.cbl:234] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COUSR02C.cbl:235] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Password can NOT be empty...");
            // [T-Up#INFO][COUSR02C.cbl:237] MOVE statement
            container.getCousr2ai().setPasswdl(-1);
            // [T-Up#INFO][COUSR02C.cbl:238] PERFORM statement
            controlManager.run(context, sendUsrupdScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else if (CobStringUtils.compare(
                container.getCousr2ai().getUsrtypei(), " ") == 0
                || CobStringUtils.compare(
                        container.getCousr2ai().getUsrtypei(),
                        StringUtils.repeat((char) 0x00, 1)) == 0) {
            // [T-Up#INFO][COUSR02C.cbl:240] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COUSR02C.cbl:241] MOVE statement
            container.getWsVariables().setWsMessage(
                    "User Type can NOT be empty...");
            // [T-Up#INFO][COUSR02C.cbl:243] MOVE statement
            container.getCousr2ai().setUsrtypel(-1);
            // [T-Up#INFO][COUSR02C.cbl:244] PERFORM statement
            controlManager.run(context, sendUsrupdScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else {
            // [T-Up#INFO][COUSR02C.cbl:246] MOVE statement
            container.getCousr2ai().setFnamel(-1);
            // [T-Up#INFO][COUSR02C.cbl:247] CONTINUE statement
        }
        // [T-Up#INFO][COUSR02C.cbl:250] IF statement
        if (!(CobStringUtils.compare(container.getWsVariables().getWsErrFlg(),
                ERR_FLG_ON) == 0)) {
            // [T-Up#INFO][COUSR02C.cbl:251] MOVE statement
            container.getSecUserData().setSecUsrId(
                    container.getCousr2ai().getUsridini());
            // [T-Up#INFO][COUSR02C.cbl:252] PERFORM statement
            controlManager.run(context, readUserSecFile);
            if (controlManager.isTerminate(context)) {
                return;
            }
            // [T-Up#INFO][COUSR02C.cbl:254] IF statement
            if (CobStringUtils.compare(container.getCousr2ai().getFnamei(),
                    container.getSecUserData().getSecUsrFname()) != 0) {
                // [T-Up#INFO][COUSR02C.cbl:255] MOVE statement
                container.getSecUserData().setSecUsrFname(
                        container.getCousr2ai().getFnamei());
                // [T-Up#INFO][COUSR02C.cbl:256] SET statement
                container.getWsVariables().setWsUsrModified(USR_MODIFIED_YES);
            }
            // [T-Up#INFO][COUSR02C.cbl:258] IF statement
            if (CobStringUtils.compare(container.getCousr2ai().getLnamei(),
                    container.getSecUserData().getSecUsrLname()) != 0) {
                // [T-Up#INFO][COUSR02C.cbl:259] MOVE statement
                container.getSecUserData().setSecUsrLname(
                        container.getCousr2ai().getLnamei());
                // [T-Up#INFO][COUSR02C.cbl:260] SET statement
                container.getWsVariables().setWsUsrModified(USR_MODIFIED_YES);
            }
            // [T-Up#INFO][COUSR02C.cbl:262] IF statement
            if (CobStringUtils.compare(container.getCousr2ai().getPasswdi(),
                    container.getSecUserData().getSecUsrPwd()) != 0) {
                // [T-Up#INFO][COUSR02C.cbl:263] MOVE statement
                container.getSecUserData().setSecUsrPwd(
                        container.getCousr2ai().getPasswdi());
                // [T-Up#INFO][COUSR02C.cbl:264] SET statement
                container.getWsVariables().setWsUsrModified(USR_MODIFIED_YES);
            }
            // [T-Up#INFO][COUSR02C.cbl:266] IF statement
            if (CobStringUtils.compare(container.getCousr2ai().getUsrtypei(),
                    container.getSecUserData().getSecUsrType()) != 0) {
                // [T-Up#INFO][COUSR02C.cbl:267] MOVE statement
                container.getSecUserData().setSecUsrType(
                        container.getCousr2ai().getUsrtypei());
                // [T-Up#INFO][COUSR02C.cbl:268] SET statement
                container.getWsVariables().setWsUsrModified(USR_MODIFIED_YES);
            }
            // [T-Up#INFO][COUSR02C.cbl:271] IF statement
            if (CobStringUtils.compare(container.getWsVariables()
                    .getWsUsrModified(), USR_MODIFIED_YES) == 0) {
                // [T-Up#INFO][COUSR02C.cbl:272] PERFORM statement
                controlManager.run(context, updateUserSecFile);
                if (controlManager.isTerminate(context)) {
                    return;
                }
            } else {
                // [T-Up#INFO][COUSR02C.cbl:274] MOVE statement
                container.getWsVariables().setWsMessage(
                        "Please modify to update ...");
                // [T-Up#INFO][COUSR02C.cbl:276] MOVE statement
                container.setErrmsgc(container.getDfhbmsca().getDfhred());
                // [T-Up#INFO][COUSR02C.cbl:277] PERFORM statement
                controlManager.run(context, sendUsrupdScreen);
                if (controlManager.isTerminate(context)) {
                    return;
                }
            }
        }
    }

    // *----------------------------------------------------------------*
    // *                      RETURN-TO-PREV-SCREEN
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COUSR02C.cbl:285] RETURN-TO-PREV-SCREEN Paragraph</p>
     */
    void returnToPrevScreen(OpenFrameContext context) {
    }

    // *     IF CDEMO-TO-PROGRAM = LOW-VALUES OR SPACES
    // *         MOVE 'COSGN00C' TO CDEMO-TO-PROGRAM
    // *     END-IF
    // *     MOVE WS-TRANID    TO CDEMO-FROM-TRANID
    // *     MOVE WS-PGMNAME   TO CDEMO-FROM-PROGRAM
    // *     MOVE ZEROS        TO CDEMO-PGM-CONTEXT
    // *     EXEC CICS
    // *         XCTL PROGRAM(CDEMO-TO-PROGRAM)
    // *         COMMAREA(CARDDEMO-COMMAREA)
    // *     END-EXEC.
    // *----------------------------------------------------------------*
    // *                      SEND-USRUPD-SCREEN
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COUSR02C.cbl:301] SEND-USRUPD-SCREEN Paragraph</p>
     */
    void sendUsrupdScreen(OpenFrameContext context) {
        Cousr02cVariableContainer container = (Cousr02cVariableContainer) context
                .getProgramVariableContainer("Cousr02c");
        // [T-Up#INFO][COUSR02C.cbl:303] PERFORM statement
        controlManager.run(context, populateHeaderInfo);
        if (controlManager.isTerminate(context)) {
            return;
        }
        // [T-Up#INFO][COUSR02C.cbl:305] MOVE statement
        container.setErrmsgo(container.getWsVariables().getWsMessage());
        // [T-Up#INFO][COUSR02C.cbl:307] EXEC_CICS statement
        /*
                       EXEC CICS SEND
                                 MAP('COUSR2A')
                                 MAPSET('COUSR02')
                                 FROM(COUSR2AO)
                                 ERASE
                                 CURSOR
                       END-EXEC
         */
        ((Cousr02cOutputDto) task.getOutputDto())
                .setPageName("COUSR02_COUSR2A");
        ((Cousr02cOutputDto) task.getOutputDto()).setCousr2ao(container
                .getCousr2ao());
    }

    // *----------------------------------------------------------------*
    // *                      RECEIVE-USRUPD-SCREEN
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COUSR02C.cbl:318] RECEIVE-USRUPD-SCREEN Paragraph</p>
     */
    void receiveUsrupdScreen(OpenFrameContext context) {
        Cousr02cVariableContainer container = (Cousr02cVariableContainer) context
                .getProgramVariableContainer("Cousr02c");
        // [T-Up#INFO][COUSR02C.cbl:320] EXEC_CICS statement
        /*
                       EXEC CICS RECEIVE
                                 MAP('COUSR2A')
                                 MAPSET('COUSR02')
                                 INTO(COUSR2AI)
                                 RESP(WS-RESP-CD)
                                 RESP2(WS-REAS-CD)
                       END-EXEC
         */
        try {
            container.setCousr2ai(((Cousr02cInputDto) task.getInputDto())
                    .getCousr2ai());
        } catch (ConditionException e) {
        } finally {
            container.getWsVariables().setWsRespCd(task.getLastResp());
            container.getWsVariables().setWsReasCd(task.getLastResp2());
        }
    }

    // *----------------------------------------------------------------*
    // *                      POPULATE-HEADER-INFO
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COUSR02C.cbl:331] POPULATE-HEADER-INFO Paragraph</p>
     */
    void populateHeaderInfo(OpenFrameContext context) {
        Cousr02cVariableContainer container = (Cousr02cVariableContainer) context
                .getProgramVariableContainer("Cousr02c");
        // [T-Up#INFO][COUSR02C.cbl:333] MOVE statement
        container.getWsDateTime().getWsCurdateData()
                .set(IntrinsicFunction.functionCurrentDate());
        // [T-Up#INFO][COUSR02C.cbl:335] MOVE statement
        container.setTitle01o(container.getCcdaScreenTitle().getCcdaTitle01());
        // [T-Up#INFO][COUSR02C.cbl:336] MOVE statement
        container.setTitle02o(container.getCcdaScreenTitle().getCcdaTitle02());
        // [T-Up#INFO][COUSR02C.cbl:337] MOVE statement
        container.setTrnnameo(container.getWsVariables().getWsTranid());
        // [T-Up#INFO][COUSR02C.cbl:338] MOVE statement
        container.setPgmnameo(container.getWsVariables().getWsPgmname());
        // [T-Up#INFO][COUSR02C.cbl:340] MOVE statement
        container
                .getWsDateTime()
                .getWsCurdateMmDdYy()
                .setWsCurdateMm(
                        container.getWsDateTime().getWsCurdateData()
                                .getWsCurdate().getWsCurdateMonth());
        // [T-Up#INFO][COUSR02C.cbl:341] MOVE statement
        container
                .getWsDateTime()
                .getWsCurdateMmDdYy()
                .setWsCurdateDd(
                        container.getWsDateTime().getWsCurdateData()
                                .getWsCurdate().getWsCurdateDay());
        // [T-Up#INFO][COUSR02C.cbl:342] MOVE statement
        container
                .getWsDateTime()
                .getWsCurdateMmDdYy()
                .setWsCurdateYy(
                        Integer.parseInt(CobStream
                                .convZonedIntToString(
                                        container.getWsDateTime()
                                                .getWsCurdateData()
                                                .getWsCurdate()
                                                .getWsCurdateYear(), 4)
                                .substring(2, 4).trim()));
        // [T-Up#INFO][COUSR02C.cbl:344] MOVE statement
        container.setCurdateo(container.getWsDateTime().getWsCurdateMmDdYy()
                .get());
        // [T-Up#INFO][COUSR02C.cbl:346] MOVE statement
        container
                .getWsDateTime()
                .getWsCurtimeHhMmSs()
                .setWsCurtimeHh(
                        container.getWsDateTime().getWsCurdateData()
                                .getWsCurtime().getWsCurtimeHours());
        // [T-Up#INFO][COUSR02C.cbl:347] MOVE statement
        container
                .getWsDateTime()
                .getWsCurtimeHhMmSs()
                .setWsCurtimeMm(
                        container.getWsDateTime().getWsCurdateData()
                                .getWsCurtime().getWsCurtimeMinute());
        // [T-Up#INFO][COUSR02C.cbl:348] MOVE statement
        container
                .getWsDateTime()
                .getWsCurtimeHhMmSs()
                .setWsCurtimeSs(
                        container.getWsDateTime().getWsCurdateData()
                                .getWsCurtime().getWsCurtimeSecond());
        // [T-Up#INFO][COUSR02C.cbl:350] MOVE statement
        container.setCurtimeo(container.getWsDateTime().getWsCurtimeHhMmSs()
                .get());
    }

    // *----------------------------------------------------------------*
    // *                      READ-USER-SEC-FILE
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COUSR02C.cbl:355] READ-USER-SEC-FILE Paragraph</p>
     */
    void readUserSecFile(OpenFrameContext context) {
        Cousr02cVariableContainer container = (Cousr02cVariableContainer) context
                .getProgramVariableContainer("Cousr02c");
        // [T-Up#INFO][COUSR02C.cbl:357] EXEC_CICS statement
        /*
                       EXEC CICS READ
                            DATASET   (WS-USRSEC-FILE)
                            INTO      (SEC-USER-DATA)
                            LENGTH    (LENGTH OF SEC-USER-DATA)
                            RIDFLD    (SEC-USR-ID)
                            KEYLENGTH (LENGTH OF SEC-USR-ID)
                            UPDATE
                            RESP      (WS-RESP-CD)
                            RESP2     (WS-REAS-CD)
                       END-EXEC
         */
        try {
            AwsM2CarddemoUsrsecVsamKsdsDto awsM2CarddemoUsrsecVsamKsdsDto = recordKeyAccessor
                    .readForUpdate("awsM2CarddemoUsrsecVsamKsdsDao", container
                            .getSecUserData().getSecUsrId());
            container
                    .setSecUserData(SecUserDataToAwsM2CarddemoUsrsecVsamKsdsDto.INSTANCE
                            .toSource(awsM2CarddemoUsrsecVsamKsdsDto));
        } catch (ConditionException e) {
        } finally {
            container.getWsVariables().setWsRespCd(task.getLastResp());
            container.getWsVariables().setWsReasCd(task.getLastResp2());
        }
        // [T-Up#INFO][COUSR02C.cbl:368] EVALUATE statement
        if (container.getWsVariables().getWsRespCd() == 0) {
            // [T-Up#INFO][COUSR02C.cbl:370] CONTINUE statement
            // [T-Up#INFO][COUSR02C.cbl:371] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Press PF5 key to save your updates ...");
            // [T-Up#INFO][COUSR02C.cbl:373] MOVE statement
            container.setErrmsgc(container.getDfhbmsca().getDfhneutr());
            // [T-Up#INFO][COUSR02C.cbl:374] PERFORM statement
            controlManager.run(context, sendUsrupdScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else if (container.getWsVariables().getWsRespCd() == 13) {
            // [T-Up#INFO][COUSR02C.cbl:376] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COUSR02C.cbl:377] MOVE statement
            container.getWsVariables().setWsMessage("User ID NOT found...");
            // [T-Up#INFO][COUSR02C.cbl:379] MOVE statement
            container.getCousr2ai().setUsridinl(-1);
            // [T-Up#INFO][COUSR02C.cbl:380] PERFORM statement
            controlManager.run(context, sendUsrupdScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else {
            // [T-Up#INFO][COUSR02C.cbl:382] DISPLAY statement
            System.out.print("RESP:");
            System.out.print(container.getWsVariables().getWsRespCd());
            System.out.print("REAS:");
            System.out.println(container.getWsVariables().getWsReasCd());
            // [T-Up#INFO][COUSR02C.cbl:383] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COUSR02C.cbl:384] MOVE statement
            container.getWsVariables().setWsMessage("Unable to lookup User...");
            // [T-Up#INFO][COUSR02C.cbl:386] MOVE statement
            container.getCousr2ai().setFnamel(-1);
            // [T-Up#INFO][COUSR02C.cbl:387] PERFORM statement
            controlManager.run(context, sendUsrupdScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        }
    }

    // *----------------------------------------------------------------*
    // *                      UPDATE-USER-SEC-FILE
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COUSR02C.cbl:393] UPDATE-USER-SEC-FILE Paragraph</p>
     */
    void updateUserSecFile(OpenFrameContext context) {
        StringBuilder tempStringBuilder1;
        StringBuilder tempStringBuilder2;
        Cousr02cVariableContainer container = (Cousr02cVariableContainer) context
                .getProgramVariableContainer("Cousr02c");
        // [T-Up#INFO][COUSR02C.cbl:395] EXEC_CICS statement
        /*
                       EXEC CICS REWRITE
                            DATASET   (WS-USRSEC-FILE)
                            FROM      (SEC-USER-DATA)
                            LENGTH    (LENGTH OF SEC-USER-DATA)
                            RESP      (WS-RESP-CD)
                            RESP2     (WS-REAS-CD)
                       END-EXEC
         */
        try {
            AwsM2CarddemoUsrsecVsamKsdsDto awsM2CarddemoUsrsecVsamKsdsDto = SecUserDataToAwsM2CarddemoUsrsecVsamKsdsDto.INSTANCE
                    .toTarget(container.getSecUserData());
            recordKeyAccessor.updateLast("awsM2CarddemoUsrsecVsamKsdsDao",
                    awsM2CarddemoUsrsecVsamKsdsDto);
        } catch (ConditionException e) {
        } finally {
            container.getWsVariables().setWsRespCd(task.getLastResp());
            container.getWsVariables().setWsReasCd(task.getLastResp2());
        }
        // [T-Up#INFO][COUSR02C.cbl:403] EVALUATE statement
        if (container.getWsVariables().getWsRespCd() == 0) {
            // [T-Up#INFO][COUSR02C.cbl:405] MOVE statement
            container.getWsVariables()
                    .setWsMessage(StringUtils.repeat(' ', 80));
            // [T-Up#INFO][COUSR02C.cbl:406] MOVE statement
            container.setErrmsgc(container.getDfhbmsca().getDfhgreen());
            // [T-Up#INFO][COUSR02C.cbl:407] STRING statement
            tempStringBuilder1 = new StringBuilder();
            tempStringBuilder2 = new StringBuilder(container.getWsVariables()
                    .getWsMessage());
            tempStringBuilder1
                    .append("User ")
                    .append(container.getSecUserData().getSecUsrId()
                            .split(Pattern.quote(" "))[0])
                    .append(" has been updated ...");
            if (tempStringBuilder1.length() <= 80) {
                tempStringBuilder2.replace(0, tempStringBuilder1.length(),
                        tempStringBuilder1.toString());
                container.getWsVariables().setWsMessage(
                        tempStringBuilder2.toString());
            }
            // [T-Up#INFO][COUSR02C.cbl:411] PERFORM statement
            controlManager.run(context, sendUsrupdScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else if (container.getWsVariables().getWsRespCd() == 13) {
            // [T-Up#INFO][COUSR02C.cbl:413] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COUSR02C.cbl:414] MOVE statement
            container.getWsVariables().setWsMessage("User ID NOT found...");
            // [T-Up#INFO][COUSR02C.cbl:416] MOVE statement
            container.getCousr2ai().setUsridinl(-1);
            // [T-Up#INFO][COUSR02C.cbl:417] PERFORM statement
            controlManager.run(context, sendUsrupdScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else {
            // [T-Up#INFO][COUSR02C.cbl:419] DISPLAY statement
            System.out.print("RESP:");
            System.out.print(container.getWsVariables().getWsRespCd());
            System.out.print("REAS:");
            System.out.println(container.getWsVariables().getWsReasCd());
            // [T-Up#INFO][COUSR02C.cbl:420] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COUSR02C.cbl:421] MOVE statement
            container.getWsVariables().setWsMessage("Unable to Update User...");
            // [T-Up#INFO][COUSR02C.cbl:423] MOVE statement
            container.getCousr2ai().setFnamel(-1);
            // [T-Up#INFO][COUSR02C.cbl:424] PERFORM statement
            controlManager.run(context, sendUsrupdScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        }
    }

    // *----------------------------------------------------------------*
    // *                      CLEAR-CURRENT-SCREEN
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COUSR02C.cbl:430] CLEAR-CURRENT-SCREEN Paragraph</p>
     */
    void clearCurrentScreen(OpenFrameContext context) {
        // [T-Up#INFO][COUSR02C.cbl:432] PERFORM statement
        controlManager.run(context, initializeAllFields);
        if (controlManager.isTerminate(context)) {
            return;
        }
        // [T-Up#INFO][COUSR02C.cbl:433] PERFORM statement
        controlManager.run(context, sendUsrupdScreen);
        if (controlManager.isTerminate(context)) {
            return;
        }
    }

    // *----------------------------------------------------------------*
    // *                      INITIALIZE-ALL-FIELDS
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COUSR02C.cbl:438] INITIALIZE-ALL-FIELDS Paragraph</p>
     */
    void initializeAllFields(OpenFrameContext context) {
        Cousr02cVariableContainer container = (Cousr02cVariableContainer) context
                .getProgramVariableContainer("Cousr02c");
        // [T-Up#INFO][COUSR02C.cbl:440] MOVE statement
        container.getCousr2ai().setUsridinl(-1);
        // [T-Up#INFO][COUSR02C.cbl:441] MOVE statement
        container.getCousr2ai().setUsridini(StringUtils.repeat(' ', 8));
        container.getCousr2ai().setFnamei(StringUtils.repeat(' ', 20));
        container.getCousr2ai().setLnamei(StringUtils.repeat(' ', 20));
        container.getCousr2ai().setPasswdi(StringUtils.repeat(' ', 8));
        container.getCousr2ai().setUsrtypei(" ");
        container.getWsVariables().setWsMessage(StringUtils.repeat(' ', 80));
    }

    // *
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:34 CDT
    // *
}

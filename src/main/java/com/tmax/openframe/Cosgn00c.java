package com.tmax.openframe;

import com.tmax.openframe.online.task.service.OtherUserTaskInvoker;
import com.tmax.openframe.online.task.domain.dto.TaskDto.*;
import com.tmax.openframe.online.task.domain.dto.Data;
import com.tmax.openframe.mapper.Cosgn00cMapperInterface.*;
import com.tmax.openframe.online.task.service.Task;
import com.tmax.openframe.dto.Cosgn00cInputDto;
import com.tmax.openframe.online.exception.ConditionException;
import com.tmax.openframe.dto.Cosgn00cOutputDto;
import com.tmax.openframe.dto.AwsM2CarddemoUsrsecVsamKsdsDto;
import com.tmax.openframe.online.daoexecutor.service.ReadPointManager;
import com.tmax.openframe.online.daoexecutor.service.RecordKeyAccessor;
import com.tmax.openframe.online.task.service.ProgramControl;
import com.tmax.openframe.dto.Coadm01cInputDto;
import com.tmax.openframe.dto.Comen01cInputDto;
import static com.tmax.openframe.variable.group.CarddemoCommarea.CdemoGeneralInfo.*;
import static com.tmax.openframe.variable.group.Cosgn00cWsVariables.*;
import com.tmax.openframe.runtime.cobol.CobStream;
import com.tmax.openframe.runtime.cobol.CobStringUtils;
import com.tmax.openframe.runtime.cobol.IntrinsicFunction;
import com.tmax.openframe.runtime.context.OpenFrameContext;
import com.tmax.openframe.runtime.flow.ControlManager;
import com.tmax.openframe.variable.Cosgn00cVariableContainer;
import com.tmax.openframe.variable.group.Cosgn0ai;
import java.math.*;
import java.util.*;
import java.util.function.Consumer;
import lombok.*;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Primary;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/03/20 15:15:17 KST</p>
 * <hr>
 * <p>Java class for defining logics of COBOL program</p>
 * <ul>
 * <li>The name of COBOL program: COSGN00C.cbl</li>
 * <li>Variable container class: {@link Cosgn00cVariableContainer}</li>
 * </ul>
 */
@Service
@RequiredArgsConstructor
@Transactional
@Primary
public class Cosgn00c {
    /** 
     * <p>Class that manages an execution flow of the program</p>
     */
    protected final ControlManager controlManager;
    Consumer<OpenFrameContext> mainPara = this::mainPara;
    Consumer<OpenFrameContext> processEnterKey = this::processEnterKey;
    Consumer<OpenFrameContext> sendSignonScreen = this::sendSignonScreen;
    Consumer<OpenFrameContext> sendPlainText = this::sendPlainText;
    Consumer<OpenFrameContext> populateHeaderInfo = this::populateHeaderInfo;
    Consumer<OpenFrameContext> readUserSecFile = this::readUserSecFile;
    /** 
     * <p>Execution flow of COBOL program that defined in the procedure division</p>
     */
    ArrayList<Consumer> methodList = new ArrayList<>();
    {
        methodList.add(mainPara);
        methodList.add(processEnterKey);
        methodList.add(sendSignonScreen);
        methodList.add(sendPlainText);
        methodList.add(populateHeaderInfo);
        methodList.add(readUserSecFile);
    }
    private final ProgramControl programControl;
    private final ReadPointManager readPointManager;
    private final RecordKeyAccessor recordKeyAccessor;
    private final Task task;
    private final TaskInvoker taskInvoker;

    /** 
     * <p>Method for executing a program logic that defined in the procedure division</p>
     * @param generalContext context that is necessary for executing program
     * @return return value of program
     */
    public int run(Map<String, Object> generalContext) {
        OpenFrameContext context = new OpenFrameContext(generalContext,
                methodList);
        if (context.getProgramVariableContainer("Cosgn00c") == null) {
            Cosgn00cVariableContainer container = new Cosgn00cVariableContainer();
            context.setProgramVariableContainer("Cosgn00c", container);
        }
        controlManager.run(context);
        return context.getReturnValue();
    }

    // ******************************************************************
    // * Program     : COSGN00C.CBL
    // * Application : CardDemo
    // * Type        : CICS COBOL Program
    // * Function    : Signon Screen for the CardDemo Application
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.
    // * All Rights Reserved.
    // *
    // * Licensed under the Apache License, Version 2.0 (the "License").
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at
    // *
    // *    http://www.apache.org/licenses/LICENSE-2.0
    // *
    // * Unless required by applicable law or agreed to in writing,
    // * software distributed under the License is distributed on an
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
    // * either express or implied. See the License for the specific
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // *      OCCURS 1 TO 32767 TIMES DEPENDING ON EIBCALEN.
    // *----------------------------------------------------------------*
    // *                      PROCEDURE DIVISION
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COSGN00C.cbl:73] MAIN-PARA Paragraph</p>
     */
    void mainPara(OpenFrameContext context) {
        Cosgn00cVariableContainer container = (Cosgn00cVariableContainer) context
                .getProgramVariableContainer("Cosgn00c");
        // [T-Up#INFO][COSGN00C.cbl:75] SET statement
        container.getWsVariables().setWsErrFlg(ERR_FLG_OFF);
        // [T-Up#INFO][COSGN00C.cbl:77] MOVE statement
        container.getWsVariables().setWsMessage(StringUtils.repeat(' ', 80));
        container.setErrmsgo(StringUtils.repeat(' ', 78));
        // [T-Up#INFO][COSGN00C.cbl:80] IF statement
        if (task.hasCommarea() == 0) {
            // [T-Up#INFO][COSGN00C.cbl:81] MOVE statement
            container.setCosgn0ao(Cosgn0ai.createDefaultValueInstance().get());
            // [T-Up#INFO][COSGN00C.cbl:82] MOVE statement
            container.getCosgn0ai().setUseridl(-1);
            // [T-Up#INFO][COSGN00C.cbl:83] PERFORM statement
            controlManager.run(context, sendSignonScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else {
            // [T-Up#INFO][COSGN00C.cbl:85] EVALUATE statement
            if (CobStringUtils.compare(task.getPressedKey(), container
                    .getDfhaid().getDfhenter()) == 0) {
                // [T-Up#INFO][COSGN00C.cbl:87] PERFORM statement
                controlManager.run(context, processEnterKey);
                if (controlManager.isTerminate(context)) {
                    return;
                }
            } else if (CobStringUtils.compare(task.getPressedKey(), container
                    .getDfhaid().getDfhpf3()) == 0) {
                // [T-Up#INFO][COSGN00C.cbl:89] MOVE statement
                container.getWsVariables().setWsMessage(
                        container.getCcdaCommonMessages().getCcdaMsgThankYou());
                // [T-Up#INFO][COSGN00C.cbl:90] PERFORM statement
                controlManager.run(context, sendPlainText);
                if (controlManager.isTerminate(context)) {
                    return;
                }
            } else {
                // [T-Up#INFO][COSGN00C.cbl:92] MOVE statement
                container.getWsVariables().setWsErrFlg("Y");
                // [T-Up#INFO][COSGN00C.cbl:93] MOVE statement
                container.getWsVariables().setWsMessage(
                        container.getCcdaCommonMessages()
                                .getCcdaMsgInvalidKey());
                // [T-Up#INFO][COSGN00C.cbl:94] PERFORM statement
                controlManager.run(context, sendSignonScreen);
                if (controlManager.isTerminate(context)) {
                    return;
                }
            }
        }
        // [T-Up#INFO][COSGN00C.cbl:98] EXEC_CICS statement
        /*
                       EXEC CICS RETURN
                                 TRANSID (WS-TRANID)
                                 COMMAREA (CARDDEMO-COMMAREA)
                                 LENGTH(LENGTH OF CARDDEMO-COMMAREA)
                       END-EXEC
         */
        TaskDto taskDto = TaskDto
                .builder()
                .destination("CC00")
                .data(Data
                        .session(CarddemoCommareaToCosgn00cDfhcommarea.INSTANCE
                                .toTarget(container.getCarddemoCommarea())))
                .build();
        taskInvoker.setNextTask(taskDto);
        context.setReturnFlag(true);
    }

    // *----------------------------------------------------------------*
    // *                      PROCESS-ENTER-KEY
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COSGN00C.cbl:108] PROCESS-ENTER-KEY Paragraph</p>
     */
    void processEnterKey(OpenFrameContext context) {
        Cosgn00cVariableContainer container = (Cosgn00cVariableContainer) context
                .getProgramVariableContainer("Cosgn00c");
        // [T-Up#INFO][COSGN00C.cbl:110] EXEC_CICS statement
        /*
                       EXEC CICS RECEIVE
                                 MAP('COSGN0A')
                                 MAPSET('COSGN00')
                                 INTO(COSGN0AI)
                                 RESP(WS-RESP-CD)
                                 RESP2(WS-REAS-CD)
                       END-EXEC
         */
        try {
            container.setCosgn0ai(((Cosgn00cInputDto) task.getInputDto())
                    .getCosgn0ai());
        } catch (ConditionException e) {
        } finally {
            container.getWsVariables().setWsRespCd(task.getLastResp());
            container.getWsVariables().setWsReasCd(task.getLastResp2());
        }
        // [T-Up#INFO][COSGN00C.cbl:118] EVALUATE statement
        if (CobStringUtils.compare(container.getCosgn0ai().getUseridi(),
                StringUtils.repeat(' ', 8)) == 0
                || CobStringUtils.compare(container.getCosgn0ai().getUseridi(),
                        StringUtils.repeat((char) 0x00, 8)) == 0) {
            // [T-Up#INFO][COSGN00C.cbl:120] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COSGN00C.cbl:121] MOVE statement
            container.getWsVariables().setWsMessage("Please enter User ID ...");
            // [T-Up#INFO][COSGN00C.cbl:122] MOVE statement
            container.getCosgn0ai().setUseridl(-1);
            // [T-Up#INFO][COSGN00C.cbl:123] PERFORM statement
            controlManager.run(context, sendSignonScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else if (CobStringUtils.compare(container.getCosgn0ai().getPasswdi(),
                StringUtils.repeat(' ', 8)) == 0
                || CobStringUtils.compare(container.getCosgn0ai().getPasswdi(),
                        StringUtils.repeat((char) 0x00, 8)) == 0) {
            // [T-Up#INFO][COSGN00C.cbl:125] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COSGN00C.cbl:126] MOVE statement
            container.getWsVariables()
                    .setWsMessage("Please enter Password ...");
            // [T-Up#INFO][COSGN00C.cbl:127] MOVE statement
            container.getCosgn0ai().setPasswdl(-1);
            // [T-Up#INFO][COSGN00C.cbl:128] PERFORM statement
            controlManager.run(context, sendSignonScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else {
            // [T-Up#INFO][COSGN00C.cbl:130] CONTINUE statement
        }
        // [T-Up#INFO][COSGN00C.cbl:133] MOVE statement
        container.getWsVariables().setWsUserId(
                container.getCosgn0ai().getUseridi().toUpperCase());
        container
                .getCarddemoCommarea()
                .getCdemoGeneralInfo()
                .setCdemoUserId(
                        container.getCosgn0ai().getUseridi().toUpperCase());
        // [T-Up#INFO][COSGN00C.cbl:136] MOVE statement
        container.getWsVariables().setWsUserPwd(
                container.getCosgn0ai().getPasswdi().toUpperCase());
        // [T-Up#INFO][COSGN00C.cbl:139] IF statement
        if (!(CobStringUtils.compare(container.getWsVariables().getWsErrFlg(),
                ERR_FLG_ON) == 0)) {
            // [T-Up#INFO][COSGN00C.cbl:140] PERFORM statement
            controlManager.run(context, readUserSecFile);
            if (controlManager.isTerminate(context)) {
                return;
            }
        }
    }

    // *----------------------------------------------------------------*
    // *                      SEND-SIGNON-SCREEN
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COSGN00C.cbl:146] SEND-SIGNON-SCREEN Paragraph</p>
     */
    void sendSignonScreen(OpenFrameContext context) {
        Cosgn00cVariableContainer container = (Cosgn00cVariableContainer) context
                .getProgramVariableContainer("Cosgn00c");
        // [T-Up#INFO][COSGN00C.cbl:148] PERFORM statement
        controlManager.run(context, populateHeaderInfo);
        if (controlManager.isTerminate(context)) {
            return;
        }
        // [T-Up#INFO][COSGN00C.cbl:150] MOVE statement
        container.setErrmsgo(container.getWsVariables().getWsMessage());
        // [T-Up#INFO][COSGN00C.cbl:152] EXEC_CICS statement
        /*
                       EXEC CICS SEND
                                 MAP('COSGN0A')
                                 MAPSET('COSGN00')
                                 FROM(COSGN0AO)
                                 ERASE
                                 CURSOR
                       END-EXEC
         */
        ((Cosgn00cOutputDto) task.getOutputDto())
                .setPageName("COSGN00_COSGN0A");
        ((Cosgn00cOutputDto) task.getOutputDto()).setCosgn0ao(container
                .getCosgn0ao());
    }

    // *----------------------------------------------------------------*
    // *                      SEND-PLAIN-TEXT
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COSGN00C.cbl:163] SEND-PLAIN-TEXT Paragraph</p>
     */
    void sendPlainText(OpenFrameContext context) {
        Cosgn00cVariableContainer container = (Cosgn00cVariableContainer) context
                .getProgramVariableContainer("Cosgn00c");
        // [T-Up#INFO][COSGN00C.cbl:165] EXEC_CICS statement
        /*
                       EXEC CICS SEND TEXT
                                 FROM(WS-MESSAGE)
                                 LENGTH(LENGTH OF WS-MESSAGE)
                                 ERASE
                                 FREEKB
                       END-EXEC
         */
        task.getOutputDto().getSystemDto()
                .setNotification(container.getWsVariables().getWsMessage());
        // [T-Up#INFO][COSGN00C.cbl:172] EXEC_CICS statement
        /*
                       EXEC CICS RETURN
                       END-EXEC
         */
        context.setReturnFlag(true);
    }

    // *----------------------------------------------------------------*
    // *                      POPULATE-HEADER-INFO
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COSGN00C.cbl:178] POPULATE-HEADER-INFO Paragraph</p>
     */
    void populateHeaderInfo(OpenFrameContext context) {
        Cosgn00cVariableContainer container = (Cosgn00cVariableContainer) context
                .getProgramVariableContainer("Cosgn00c");
        // [T-Up#INFO][COSGN00C.cbl:180] MOVE statement
        container.getWsDateTime().getWsCurdateData()
                .set(IntrinsicFunction.functionCurrentDate());
        // [T-Up#INFO][COSGN00C.cbl:182] MOVE statement
        container.setTitle01o(container.getCcdaScreenTitle().getCcdaTitle01());
        // [T-Up#INFO][COSGN00C.cbl:183] MOVE statement
        container.setTitle02o(container.getCcdaScreenTitle().getCcdaTitle02());
        // [T-Up#INFO][COSGN00C.cbl:184] MOVE statement
        container.setTrnnameo(container.getWsVariables().getWsTranid());
        // [T-Up#INFO][COSGN00C.cbl:185] MOVE statement
        container.setPgmnameo(container.getWsVariables().getWsPgmname());
        // [T-Up#INFO][COSGN00C.cbl:187] MOVE statement
        container
                .getWsDateTime()
                .getWsCurdateMmDdYy()
                .setWsCurdateMm(
                        container.getWsDateTime().getWsCurdateData()
                                .getWsCurdate().getWsCurdateMonth());
        // [T-Up#INFO][COSGN00C.cbl:188] MOVE statement
        container
                .getWsDateTime()
                .getWsCurdateMmDdYy()
                .setWsCurdateDd(
                        container.getWsDateTime().getWsCurdateData()
                                .getWsCurdate().getWsCurdateDay());
        // [T-Up#INFO][COSGN00C.cbl:189] MOVE statement
        container
                .getWsDateTime()
                .getWsCurdateMmDdYy()
                .setWsCurdateYy(
                        Integer.parseInt(CobStream
                                .convZonedIntToString(
                                        container.getWsDateTime()
                                                .getWsCurdateData()
                                                .getWsCurdate()
                                                .getWsCurdateYear(), 4)
                                .substring(2, 4).trim()));
        // [T-Up#INFO][COSGN00C.cbl:191] MOVE statement
        container.setCurdateo(container.getWsDateTime().getWsCurdateMmDdYy()
                .get());
        // [T-Up#INFO][COSGN00C.cbl:193] MOVE statement
        container
                .getWsDateTime()
                .getWsCurtimeHhMmSs()
                .setWsCurtimeHh(
                        container.getWsDateTime().getWsCurdateData()
                                .getWsCurtime().getWsCurtimeHours());
        // [T-Up#INFO][COSGN00C.cbl:194] MOVE statement
        container
                .getWsDateTime()
                .getWsCurtimeHhMmSs()
                .setWsCurtimeMm(
                        container.getWsDateTime().getWsCurdateData()
                                .getWsCurtime().getWsCurtimeMinute());
        // [T-Up#INFO][COSGN00C.cbl:195] MOVE statement
        container
                .getWsDateTime()
                .getWsCurtimeHhMmSs()
                .setWsCurtimeSs(
                        container.getWsDateTime().getWsCurdateData()
                                .getWsCurtime().getWsCurtimeSecond());
        // [T-Up#INFO][COSGN00C.cbl:197] MOVE statement
        container.setCurtimeo(container.getWsDateTime().getWsCurtimeHhMmSs()
                .get());
        // [T-Up#INFO][COSGN00C.cbl:199] EXEC_CICS statement
        /*
                       EXEC CICS ASSIGN
                           APPLID(APPLIDO OF COSGN0AO)
                       END-EXEC
         */
        container.setApplido(task.getUserId());
        // [T-Up#INFO][COSGN00C.cbl:203] EXEC_CICS statement
        /*
                       EXEC CICS ASSIGN
                           SYSID(SYSIDO OF COSGN0AO)
                       END-EXEC
         */
        container.setSysido(task.getSysId());
    }

    // *----------------------------------------------------------------*
    // *                      READ-USER-SEC-FILE
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COSGN00C.cbl:210] READ-USER-SEC-FILE Paragraph</p>
     */
    void readUserSecFile(OpenFrameContext context) {
        Cosgn00cVariableContainer container = (Cosgn00cVariableContainer) context
                .getProgramVariableContainer("Cosgn00c");
        // [T-Up#INFO][COSGN00C.cbl:212] EXEC_CICS statement
        /*
                       EXEC CICS READ
                            DATASET   (WS-USRSEC-FILE)
                            INTO      (SEC-USER-DATA)
                            LENGTH    (LENGTH OF SEC-USER-DATA)
                            RIDFLD    (WS-USER-ID)
                            KEYLENGTH (LENGTH OF WS-USER-ID)
                            RESP      (WS-RESP-CD)
                            RESP2     (WS-REAS-CD)
                       END-EXEC
         */
        try {
            AwsM2CarddemoUsrsecVsamKsdsDto awsM2CarddemoUsrsecVsamKsdsDto = recordKeyAccessor
                    .read("awsM2CarddemoUsrsecVsamKsdsDao", container
                            .getWsVariables().getWsUserId());
            container
                    .setSecUserData(SecUserDataToAwsM2CarddemoUsrsecVsamKsdsDto.INSTANCE
                            .toSource(awsM2CarddemoUsrsecVsamKsdsDto));
        } catch (ConditionException e) {
        } finally {
            container.getWsVariables().setWsRespCd(task.getLastResp());
            container.getWsVariables().setWsReasCd(task.getLastResp2());
        }
        // [T-Up#INFO][COSGN00C.cbl:222] EVALUATE statement
        switch (container.getWsVariables().getWsRespCd()) {
        case 0: {
            // [T-Up#INFO][COSGN00C.cbl:224] IF statement
            if (CobStringUtils.compare(container.getSecUserData()
                    .getSecUsrPwd(), container.getWsVariables().getWsUserPwd()) == 0) {
                // [T-Up#INFO][COSGN00C.cbl:225] MOVE statement
                container
                        .getCarddemoCommarea()
                        .getCdemoGeneralInfo()
                        .setCdemoFromTranid(
                                container.getWsVariables().getWsTranid());
                // [T-Up#INFO][COSGN00C.cbl:226] MOVE statement
                container
                        .getCarddemoCommarea()
                        .getCdemoGeneralInfo()
                        .setCdemoFromProgram(
                                container.getWsVariables().getWsPgmname());
                // [T-Up#INFO][COSGN00C.cbl:227] MOVE statement
                container
                        .getCarddemoCommarea()
                        .getCdemoGeneralInfo()
                        .setCdemoUserId(
                                container.getWsVariables().getWsUserId());
                // [T-Up#INFO][COSGN00C.cbl:228] MOVE statement
                container
                        .getCarddemoCommarea()
                        .getCdemoGeneralInfo()
                        .setCdemoUserType(
                                container.getSecUserData().getSecUsrType());
                // [T-Up#INFO][COSGN00C.cbl:229] MOVE statement
                container.getCarddemoCommarea().getCdemoGeneralInfo()
                        .setCdemoPgmContext(0);
                // [T-Up#INFO][COSGN00C.cbl:231] IF statement
                if (CobStringUtils.compare(container.getCarddemoCommarea()
                        .getCdemoGeneralInfo().getCdemoUserType(),
                        CDEMO_USRTYP_ADMIN) == 0) {
                    // [T-Up#INFO][COSGN00C.cbl:232] EXEC_CICS statement
                    /*
                                                    EXEC CICS XCTL
                                                      PROGRAM ('COADM01C')
                                                      COMMAREA(CARDDEMO-COMMAREA)
                                                    END-EXEC
                     */
                    Coadm01cInputDto coadm01cInputDto = new Coadm01cInputDto();
                    coadm01cInputDto
                            .setDfhcommarea(CarddemoCommareaToCoadm01cDfhcommarea.INSTANCE
                                    .toTarget(container.getCarddemoCommarea()));
                    programControl.forward("CA00", coadm01cInputDto);
                    context.setReturnFlag(true);
                } else {
                    // [T-Up#INFO][COSGN00C.cbl:237] EXEC_CICS statement
                    /*
                                                    EXEC CICS XCTL
                                                      PROGRAM ('COMEN01C')
                                                      COMMAREA(CARDDEMO-COMMAREA)
                                                    END-EXEC
                     */
                    Comen01cInputDto comen01cInputDto = new Comen01cInputDto();
                    comen01cInputDto
                            .setDfhcommarea(CarddemoCommareaToComen01cDfhcommarea.INSTANCE
                                    .toTarget(container.getCarddemoCommarea()));
                    programControl.forward("CM00", comen01cInputDto);
                    context.setReturnFlag(true);
                }
            } else {
                // [T-Up#INFO][COSGN00C.cbl:243] MOVE statement
                container.getWsVariables().setWsMessage(
                        "Wrong Password. Try again ...");
                // [T-Up#INFO][COSGN00C.cbl:245] MOVE statement
                container.getCosgn0ai().setPasswdl(-1);
                // [T-Up#INFO][COSGN00C.cbl:246] PERFORM statement
                controlManager.run(context, sendSignonScreen);
                if (controlManager.isTerminate(context)) {
                    return;
                }
            }
            break;
        }
        case 13: {
            // [T-Up#INFO][COSGN00C.cbl:249] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COSGN00C.cbl:250] MOVE statement
            container.getWsVariables().setWsMessage(
                    "User not found. Try again ...");
            // [T-Up#INFO][COSGN00C.cbl:251] MOVE statement
            container.getCosgn0ai().setUseridl(-1);
            // [T-Up#INFO][COSGN00C.cbl:252] PERFORM statement
            controlManager.run(context, sendSignonScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
            break;
        }
        default: {
            // [T-Up#INFO][COSGN00C.cbl:254] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COSGN00C.cbl:255] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Unable to verify the User ...");
            // [T-Up#INFO][COSGN00C.cbl:256] MOVE statement
            container.getCosgn0ai().setUseridl(-1);
            // [T-Up#INFO][COSGN00C.cbl:257] PERFORM statement
            controlManager.run(context, sendSignonScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
            break;
        }
        }
    }

    // *
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:33 CDT
    // *
}

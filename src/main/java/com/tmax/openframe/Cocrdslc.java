package com.tmax.openframe;

import com.tmax.openframe.online.handle.service.AbendHandler;
import com.tmax.openframe.online.task.service.ProgramControl;
import com.tmax.openframe.dto.CocrdlicInputDto;
import com.tmax.openframe.mapper.CocrdslcMapperInterface.*;
import com.tmax.openframe.dto.Comen01cInputDto;
import com.tmax.openframe.online.task.service.OtherUserTaskInvoker;
import com.tmax.openframe.online.task.domain.dto.TaskDto.*;
import com.tmax.openframe.online.task.domain.dto.Data;
import com.tmax.openframe.online.task.service.Task;
import com.tmax.openframe.dto.CocrdslcOutputDto;
import com.tmax.openframe.online.exception.ConditionException;
import com.tmax.openframe.dto.CocrdslcInputDto;
import com.tmax.openframe.dto.AwsM2CarddemoCarddataVsamKsdsDto;
import com.tmax.openframe.online.daoexecutor.service.ReadPointManager;
import com.tmax.openframe.online.daoexecutor.service.RecordKeyAccessor;
import com.tmax.openframe.online.exception.OnlineException;
import com.tmax.openframe.online.exception.AbendException;
import static com.tmax.openframe.variable.group.CarddemoCommarea.CdemoGeneralInfo.*;
import static com.tmax.openframe.variable.group.CcWorkAreas.CcWorkArea.*;
import static com.tmax.openframe.variable.group.CocrdslcWsMiscStorage.*;
import com.tmax.openframe.runtime.cobol.CobStream;
import com.tmax.openframe.runtime.cobol.CobStringUtils;
import com.tmax.openframe.runtime.cobol.IntrinsicFunction;
import com.tmax.openframe.runtime.context.OpenFrameContext;
import com.tmax.openframe.runtime.flow.ControlManager;
import com.tmax.openframe.variable.CocrdslcVariableContainer;
import com.tmax.openframe.variable.group.CarddemoCommarea;
import com.tmax.openframe.variable.group.CcWorkAreas;
import com.tmax.openframe.variable.group.Ccrdslai;
import com.tmax.openframe.variable.group.CocrdslcWsMiscStorage;
import com.tmax.openframe.variable.group.CocrdslcWsThisProgcommarea;
import java.math.*;
import java.util.*;
import java.util.function.Consumer;
import lombok.*;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Primary;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/03/20 15:15:16 KST</p>
 * <hr>
 * <p>Java class for defining logics of COBOL program</p>
 * <ul>
 * <li>The name of COBOL program: COCRDSLC.cbl</li>
 * <li>Variable container class: {@link CocrdslcVariableContainer}</li>
 * </ul>
 */
@Service
@RequiredArgsConstructor
@Transactional
@Primary
public class Cocrdslc {
    /** 
     * <p>Class that manages an execution flow of the program</p>
     */
    protected final ControlManager controlManager;
    Consumer<OpenFrameContext> _0000Main = this::_0000Main;
    Consumer<OpenFrameContext> commonReturn = this::commonReturn;
    Consumer<OpenFrameContext> _0000MainExit = this::_0000MainExit;
    Consumer<OpenFrameContext> _1000SendMap = this::_1000SendMap;
    Consumer<OpenFrameContext> _1000SendMapExit = this::_1000SendMapExit;
    Consumer<OpenFrameContext> _1100ScreenInit = this::_1100ScreenInit;
    Consumer<OpenFrameContext> _1100ScreenInitExit = this::_1100ScreenInitExit;
    Consumer<OpenFrameContext> _1200SetupScreenVars = this::_1200SetupScreenVars;
    Consumer<OpenFrameContext> _1200SetupScreenVarsExit = this::_1200SetupScreenVarsExit;
    Consumer<OpenFrameContext> _1300SetupScreenAttrs = this::_1300SetupScreenAttrs;
    Consumer<OpenFrameContext> _1300SetupScreenAttrsExit = this::_1300SetupScreenAttrsExit;
    Consumer<OpenFrameContext> _1400SendScreen = this::_1400SendScreen;
    Consumer<OpenFrameContext> _1400SendScreenExit = this::_1400SendScreenExit;
    Consumer<OpenFrameContext> _2000ProcessInputs = this::_2000ProcessInputs;
    Consumer<OpenFrameContext> _2000ProcessInputsExit = this::_2000ProcessInputsExit;
    Consumer<OpenFrameContext> _2100ReceiveMap = this::_2100ReceiveMap;
    Consumer<OpenFrameContext> _2100ReceiveMapExit = this::_2100ReceiveMapExit;
    Consumer<OpenFrameContext> _2200EditMapInputs = this::_2200EditMapInputs;
    Consumer<OpenFrameContext> _2200EditMapInputsExit = this::_2200EditMapInputsExit;
    Consumer<OpenFrameContext> _2210EditAccount = this::_2210EditAccount;
    Consumer<OpenFrameContext> _2210EditAccountExit = this::_2210EditAccountExit;
    Consumer<OpenFrameContext> _2220EditCard = this::_2220EditCard;
    Consumer<OpenFrameContext> _2220EditCardExit = this::_2220EditCardExit;
    Consumer<OpenFrameContext> _9000ReadData = this::_9000ReadData;
    Consumer<OpenFrameContext> _9000ReadDataExit = this::_9000ReadDataExit;
    Consumer<OpenFrameContext> _9100GetcardByacctcard = this::_9100GetcardByacctcard;
    Consumer<OpenFrameContext> _9100GetcardByacctcardExit = this::_9100GetcardByacctcardExit;
    Consumer<OpenFrameContext> _9150GetcardByacct = this::_9150GetcardByacct;
    Consumer<OpenFrameContext> _9150GetcardByacctExit = this::_9150GetcardByacctExit;
    Consumer<OpenFrameContext> sendLongText = this::sendLongText;
    Consumer<OpenFrameContext> sendLongTextExit = this::sendLongTextExit;
    Consumer<OpenFrameContext> sendPlainText = this::sendPlainText;
    Consumer<OpenFrameContext> sendPlainTextExit = this::sendPlainTextExit;
    Consumer<OpenFrameContext> yyyyStorePfkey = this::yyyyStorePfkey;
    Consumer<OpenFrameContext> yyyyStorePfkeyExit = this::yyyyStorePfkeyExit;
    Consumer<OpenFrameContext> abendRoutine = this::abendRoutine;
    /** 
     * <p>Execution flow of COBOL program that defined in the procedure division</p>
     */
    ArrayList<Consumer> methodList = new ArrayList<>();
    {
        methodList.add(_0000Main);
        methodList.add(commonReturn);
        methodList.add(_0000MainExit);
        methodList.add(_1000SendMap);
        methodList.add(_1000SendMapExit);
        methodList.add(_1100ScreenInit);
        methodList.add(_1100ScreenInitExit);
        methodList.add(_1200SetupScreenVars);
        methodList.add(_1200SetupScreenVarsExit);
        methodList.add(_1300SetupScreenAttrs);
        methodList.add(_1300SetupScreenAttrsExit);
        methodList.add(_1400SendScreen);
        methodList.add(_1400SendScreenExit);
        methodList.add(_2000ProcessInputs);
        methodList.add(_2000ProcessInputsExit);
        methodList.add(_2100ReceiveMap);
        methodList.add(_2100ReceiveMapExit);
        methodList.add(_2200EditMapInputs);
        methodList.add(_2200EditMapInputsExit);
        methodList.add(_2210EditAccount);
        methodList.add(_2210EditAccountExit);
        methodList.add(_2220EditCard);
        methodList.add(_2220EditCardExit);
        methodList.add(_9000ReadData);
        methodList.add(_9000ReadDataExit);
        methodList.add(_9100GetcardByacctcard);
        methodList.add(_9100GetcardByacctcardExit);
        methodList.add(_9150GetcardByacct);
        methodList.add(_9150GetcardByacctExit);
        methodList.add(sendLongText);
        methodList.add(sendLongTextExit);
        methodList.add(sendPlainText);
        methodList.add(sendPlainTextExit);
        methodList.add(yyyyStorePfkey);
        methodList.add(yyyyStorePfkeyExit);
        methodList.add(abendRoutine);
    }
    private final ReadPointManager readPointManager;
    private final RecordKeyAccessor recordKeyAccessor;
    private final Task task;
    private final TaskInvoker taskInvoker;
    private final ProgramControl programControl;
    private final AbendHandler abendHandler;

    /** 
     * <p>Method for executing a program logic that defined in the procedure division</p>
     * @param generalContext context that is necessary for executing program
     * @return return value of program
     */
    public int run(Map<String, Object> generalContext) {
        OpenFrameContext context = new OpenFrameContext(generalContext,
                methodList);
        if (context.getProgramVariableContainer("Cocrdslc") == null) {
            CocrdslcVariableContainer container = new CocrdslcVariableContainer();
            context.setProgramVariableContainer("Cocrdslc", container);
        }
        controlManager.run(context);
        return context.getReturnValue();
    }

    // *****************************************************************
    // * Program:     COCRDSLC.CBL                                     *
    // * Layer:       Business logic                                   *
    // * Function:    Accept and process credit card detail request    *
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.
    // * All Rights Reserved.
    // *
    // * Licensed under the Apache License, Version 2.0 (the "License").
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at
    // *
    // *    http://www.apache.org/licenses/LICENSE-2.0
    // *
    // * Unless required by applicable law or agreed to in writing,
    // * software distributed under the License is distributed on an
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
    // * either express or implied. See the License for the specific
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // *      OCCURS 1 TO 32767 TIMES DEPENDING ON EIBCALEN.

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:248] 0000-MAIN Paragraph</p>
     */
    void _0000Main(OpenFrameContext context) {
        CocrdslcVariableContainer container = (CocrdslcVariableContainer) context
                .getProgramVariableContainer("Cocrdslc");
        // [T-Up#INFO][COCRDSLC.cbl:250] EXEC_CICS statement
        /*
                       EXEC CICS HANDLE ABEND
                                 LABEL(ABEND-ROUTINE)
                       END-EXEC
         */
        abendHandler.setLabel(abendRoutine);
        // [T-Up#INFO][COCRDSLC.cbl:254] INITIALIZE statement
        container.getCcWorkAreas().setCcWorkArea(
                CcWorkAreas.CcWorkArea.createDefaultValueInstance());
        container.setWsMiscStorage(CocrdslcWsMiscStorage
                .createDefaultValueInstance());
        container.setWsCommarea(StringUtils.repeat(' ', 2000));
        // *****************************************************************
        // * Store our context
        // *****************************************************************
        // [T-Up#INFO][COCRDSLC.cbl:260] MOVE statement
        container.getWsMiscStorage().getWsCicsProcessngVars()
                .setWsTranid(container.getWsLiterals().getLitThistranid());
        // *****************************************************************
        // * Ensure error message is cleared                               *
        // *****************************************************************
        // [T-Up#INFO][COCRDSLC.cbl:264] SET statement
        container.getWsMiscStorage().setWsReturnMsg(WS_RETURN_MSG_OFF);
        // *****************************************************************
        // * Store passed data if  any                *
        // *****************************************************************
        // [T-Up#INFO][COCRDSLC.cbl:268] IF statement
        if (task.hasCommarea() == 0
                || CobStringUtils.compare(container.getCarddemoCommarea()
                        .getCdemoGeneralInfo().getCdemoFromProgram(), container
                        .getWsLiterals().getLitMenupgm()) == 0
                && !(container.getCarddemoCommarea().getCdemoGeneralInfo()
                        .getCdemoPgmContext() == CDEMO_PGM_REENTER)) {
            // [T-Up#INFO][COCRDSLC.cbl:271] INITIALIZE statement
            container.setCarddemoCommarea(CarddemoCommarea
                    .createDefaultValueInstance());
            container.setWsThisProgcommarea(CocrdslcWsThisProgcommarea
                    .createDefaultValueInstance());
        } else {
            // [T-Up#INFO][COCRDSLC.cbl:274] MOVE statement
            container.getCarddemoCommarea().set(
                    container.getDfhcommarea().get().substring(0, 160));
            // [T-Up#INFO][COCRDSLC.cbl:276] MOVE statement
            container.getWsThisProgcommarea().set(
                    container.getDfhcommarea().get().substring(160, 172));
        }
        // *****************************************************************
        // * Remap PFkeys as needed.
        // * Store the Mapped PF Key
        // *****************************************************************
        // [T-Up#INFO][COCRDSLC.cbl:284] PERFORM statement
        controlManager.run(context, yyyyStorePfkey, yyyyStorePfkeyExit);
        if (controlManager.isTerminate(context)) {
            return;
        }
        // *****************************************************************
        // * Check the AID to see if its valid at this point               *
        // * F3 - Exit
        // * Enter show screen again
        // *****************************************************************
        // [T-Up#INFO][COCRDSLC.cbl:291] SET statement
        container.getWsMiscStorage().setWsPfkFlag(PFK_INVALID);
        // [T-Up#INFO][COCRDSLC.cbl:292] IF statement
        if (CobStringUtils.compare(container.getCcWorkAreas().getCcWorkArea()
                .getCcardAid(), CCARD_AID_ENTER) == 0
                || CobStringUtils.compare(container.getCcWorkAreas()
                        .getCcWorkArea().getCcardAid(), CCARD_AID_PFK03) == 0) {
            // [T-Up#INFO][COCRDSLC.cbl:294] SET statement
            container.getWsMiscStorage().setWsPfkFlag(PFK_VALID);
        }
        // [T-Up#INFO][COCRDSLC.cbl:297] IF statement
        if (CobStringUtils.compare(container.getWsMiscStorage().getWsPfkFlag(),
                PFK_INVALID) == 0) {
            // [T-Up#INFO][COCRDSLC.cbl:298] SET statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcardAid(CCARD_AID_ENTER);
        }
        // *****************************************************************
        // * Decide what to do based on inputs received
        // *****************************************************************
        // [T-Up#INFO][COCRDSLC.cbl:304] EVALUATE statement
        if (CobStringUtils.compare(container.getCcWorkAreas().getCcWorkArea()
                .getCcardAid(), CCARD_AID_PFK03) == 0) {
            // ******************************************************************
            // *            XCTL TO CALLING PROGRAM OR MAIN MENU
            // ******************************************************************
            // [T-Up#INFO][COCRDSLC.cbl:309] IF statement
            if (CobStringUtils.compare(container.getCarddemoCommarea()
                    .getCdemoGeneralInfo().getCdemoFromTranid(),
                    StringUtils.repeat((char) 0x00, 4)) == 0
                    || CobStringUtils.compare(container.getCarddemoCommarea()
                            .getCdemoGeneralInfo().getCdemoFromTranid(),
                            StringUtils.repeat(' ', 4)) == 0) {
                // [T-Up#INFO][COCRDSLC.cbl:311] MOVE statement
                container
                        .getCarddemoCommarea()
                        .getCdemoGeneralInfo()
                        .setCdemoToTranid(
                                container.getWsLiterals().getLitMenutranid());
            } else {
                // [T-Up#INFO][COCRDSLC.cbl:313] MOVE statement
                container
                        .getCarddemoCommarea()
                        .getCdemoGeneralInfo()
                        .setCdemoToTranid(
                                container.getCarddemoCommarea()
                                        .getCdemoGeneralInfo()
                                        .getCdemoFromTranid());
            }
            // [T-Up#INFO][COCRDSLC.cbl:316] IF statement
            if (CobStringUtils.compare(container.getCarddemoCommarea()
                    .getCdemoGeneralInfo().getCdemoFromProgram(),
                    StringUtils.repeat((char) 0x00, 8)) == 0
                    || CobStringUtils.compare(container.getCarddemoCommarea()
                            .getCdemoGeneralInfo().getCdemoFromProgram(),
                            StringUtils.repeat(' ', 8)) == 0) {
                // [T-Up#INFO][COCRDSLC.cbl:318] MOVE statement
                container
                        .getCarddemoCommarea()
                        .getCdemoGeneralInfo()
                        .setCdemoToProgram(
                                container.getWsLiterals().getLitMenupgm());
            } else {
                // [T-Up#INFO][COCRDSLC.cbl:320] MOVE statement
                container
                        .getCarddemoCommarea()
                        .getCdemoGeneralInfo()
                        .setCdemoToProgram(
                                container.getCarddemoCommarea()
                                        .getCdemoGeneralInfo()
                                        .getCdemoFromProgram());
            }
            // [T-Up#INFO][COCRDSLC.cbl:323] MOVE statement
            container
                    .getCarddemoCommarea()
                    .getCdemoGeneralInfo()
                    .setCdemoFromTranid(
                            container.getWsLiterals().getLitThistranid());
            // [T-Up#INFO][COCRDSLC.cbl:324] MOVE statement
            container
                    .getCarddemoCommarea()
                    .getCdemoGeneralInfo()
                    .setCdemoFromProgram(
                            container.getWsLiterals().getLitThispgm());
            // [T-Up#INFO][COCRDSLC.cbl:326] SET statement
            container.getCarddemoCommarea().getCdemoGeneralInfo()
                    .setCdemoUserType(CDEMO_USRTYP_USER);
            // [T-Up#INFO][COCRDSLC.cbl:327] SET statement
            container.getCarddemoCommarea().getCdemoGeneralInfo()
                    .setCdemoPgmContext(CDEMO_PGM_ENTER);
            // [T-Up#INFO][COCRDSLC.cbl:328] MOVE statement
            container
                    .getCarddemoCommarea()
                    .getCdemoMoreInfo()
                    .setCdemoLastMapset(
                            container.getWsLiterals().getLitThismapset());
            // [T-Up#INFO][COCRDSLC.cbl:329] MOVE statement
            container.getCarddemoCommarea().getCdemoMoreInfo()
                    .setCdemoLastMap(container.getWsLiterals().getLitThismap());
            // [T-Up#INFO][COCRDSLC.cbl:330] IF statement
            if (CobStringUtils.compare(container.getCarddemoCommarea()
                    .getCdemoGeneralInfo().getCdemoToProgram(), "COCRDLIC") == 0) {
                // [T-Up#INFO][COCRDSLC.cbl:331] EXEC_CICS statement
                /*
                                           EXEC CICS
                                           XCTL PROGRAM('COCRDLIC')
                                           COMMAREA(CARDDEMO-COMMAREA)
                                           END-EXEC
                 */
                CocrdlicInputDto cocrdlicInputDto = new CocrdlicInputDto();
                cocrdlicInputDto
                        .setDfhcommarea(CarddemoCommareaToCocrdlicDfhcommarea.INSTANCE
                                .toTarget(container.getCarddemoCommarea()));
                programControl.forward("CCLI", cocrdlicInputDto);
                context.setReturnFlag(true);
            } else {
                // [T-Up#INFO][COCRDSLC.cbl:335] IF statement
                if (CobStringUtils.compare(container.getCarddemoCommarea()
                        .getCdemoGeneralInfo().getCdemoToProgram(), "COMEN01C") == 0) {
                    // [T-Up#INFO][COCRDSLC.cbl:336] EXEC_CICS statement
                    /*
                                               EXEC CICS
                                               XCTL PROGRAM('COMEN01C')
                                               COMMAREA(CARDDEMO-COMMAREA)
                                               END-EXEC
                     */
                    Comen01cInputDto comen01cInputDto = new Comen01cInputDto();
                    comen01cInputDto
                            .setDfhcommarea(CarddemoCommareaToComen01cDfhcommarea.INSTANCE
                                    .toTarget(container.getCarddemoCommarea()));
                    programControl.forward("CM00", comen01cInputDto);
                    context.setReturnFlag(true);
                }
            }
        } else if (container.getCarddemoCommarea().getCdemoGeneralInfo()
                .getCdemoPgmContext() == CDEMO_PGM_ENTER
                && CobStringUtils.compare(container.getCarddemoCommarea()
                        .getCdemoGeneralInfo().getCdemoFromProgram(), container
                        .getWsLiterals().getLitCclistpgm()) == 0) {
            // ******************************************************************
            // *            COMING FROM CREDIT CARD LIST SCREEN
            // *            SELECTION CRITERIA ALREADY VALIDATED
            // ******************************************************************
            // [T-Up#INFO][COCRDSLC.cbl:347] SET statement
            container.getWsMiscStorage().setWsInputFlag(INPUT_OK);
            // [T-Up#INFO][COCRDSLC.cbl:348] MOVE statement
            container
                    .getCcWorkAreas()
                    .getCcWorkArea()
                    .setCcAcctIdN(
                            container.getCarddemoCommarea()
                                    .getCdemoAccountInfo().getCdemoAcctId());
            // [T-Up#INFO][COCRDSLC.cbl:349] MOVE statement
            container
                    .getCcWorkAreas()
                    .getCcWorkArea()
                    .setCcCardNumN(
                            container.getCarddemoCommarea().getCdemoCardInfo()
                                    .getCdemoCardNum());
            // [T-Up#INFO][COCRDSLC.cbl:350] PERFORM statement
            controlManager.run(context, _9000ReadData, _9000ReadDataExit);
            if (controlManager.isTerminate(context)) {
                return;
            }
            // [T-Up#INFO][COCRDSLC.cbl:352] PERFORM statement
            controlManager.run(context, _1000SendMap, _1000SendMapExit);
            if (controlManager.isTerminate(context)) {
                return;
            }
            // [T-Up#INFO][COCRDSLC.cbl:354] GO TO statement
            context.setGotoTarget(commonReturn);
            return;
        } else if (container.getCarddemoCommarea().getCdemoGeneralInfo()
                .getCdemoPgmContext() == CDEMO_PGM_ENTER) {
            // ******************************************************************
            // *            COMING FROM SOME OTHER CONTEXT
            // *            SELECTION CRITERIA TO BE GATHERED
            // ******************************************************************
            // [T-Up#INFO][COCRDSLC.cbl:360] PERFORM statement
            controlManager.run(context, _1000SendMap, _1000SendMapExit);
            if (controlManager.isTerminate(context)) {
                return;
            }
            // [T-Up#INFO][COCRDSLC.cbl:362] GO TO statement
            context.setGotoTarget(commonReturn);
            return;
        } else if (container.getCarddemoCommarea().getCdemoGeneralInfo()
                .getCdemoPgmContext() == CDEMO_PGM_REENTER) {
            // [T-Up#INFO][COCRDSLC.cbl:364] PERFORM statement
            controlManager.run(context, _2000ProcessInputs,
                    _2000ProcessInputsExit);
            if (controlManager.isTerminate(context)) {
                return;
            }
            // [T-Up#INFO][COCRDSLC.cbl:366] IF statement
            if (CobStringUtils.compare(container.getWsMiscStorage()
                    .getWsInputFlag(), INPUT_ERROR) == 0) {
                // [T-Up#INFO][COCRDSLC.cbl:367] PERFORM statement
                controlManager.run(context, _1000SendMap, _1000SendMapExit);
                if (controlManager.isTerminate(context)) {
                    return;
                }
                // [T-Up#INFO][COCRDSLC.cbl:369] GO TO statement
                context.setGotoTarget(commonReturn);
                return;
            } else {
                // [T-Up#INFO][COCRDSLC.cbl:371] PERFORM statement
                controlManager.run(context, _9000ReadData, _9000ReadDataExit);
                if (controlManager.isTerminate(context)) {
                    return;
                }
                // [T-Up#INFO][COCRDSLC.cbl:373] PERFORM statement
                controlManager.run(context, _1000SendMap, _1000SendMapExit);
                if (controlManager.isTerminate(context)) {
                    return;
                }
                // [T-Up#INFO][COCRDSLC.cbl:375] GO TO statement
                context.setGotoTarget(commonReturn);
                return;
            }
        } else {
            // [T-Up#INFO][COCRDSLC.cbl:380] MOVE statement
            container.getAbendData().setAbendCulprit(
                    container.getWsLiterals().getLitThispgm());
            // [T-Up#INFO][COCRDSLC.cbl:381] MOVE statement
            container.getAbendData().setAbendCode("0001");
            // [T-Up#INFO][COCRDSLC.cbl:382] MOVE statement
            container.getAbendData()
                    .setAbendReason(StringUtils.repeat(' ', 50));
            // [T-Up#INFO][COCRDSLC.cbl:383] MOVE statement
            container.getWsMiscStorage().setWsReturnMsg(
                    "UNEXPECTED DATA SCENARIO");
            // [T-Up#INFO][COCRDSLC.cbl:385] PERFORM statement
            controlManager.run(context, sendPlainText, sendPlainTextExit);
            if (controlManager.isTerminate(context)) {
                return;
            }
        }
        // * If we had an error setup error message that slipped through
        // * Display and return
        // [T-Up#INFO][COCRDSLC.cbl:392] IF statement
        if (CobStringUtils.compare(container.getWsMiscStorage()
                .getWsInputFlag(), INPUT_ERROR) == 0) {
            // [T-Up#INFO][COCRDSLC.cbl:393] MOVE statement
            container
                    .getCcWorkAreas()
                    .getCcWorkArea()
                    .setCcardErrorMsg(
                            container.getWsMiscStorage().getWsReturnMsg());
            // [T-Up#INFO][COCRDSLC.cbl:394] PERFORM statement
            controlManager.run(context, _1000SendMap, _1000SendMapExit);
            if (controlManager.isTerminate(context)) {
                return;
            }
            // [T-Up#INFO][COCRDSLC.cbl:396] GO TO statement
            context.setGotoTarget(commonReturn);
            return;
        }
    }

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:400] COMMON-RETURN Paragraph</p>
     */
    void commonReturn(OpenFrameContext context) {
        CocrdslcVariableContainer container = (CocrdslcVariableContainer) context
                .getProgramVariableContainer("Cocrdslc");
        // [T-Up#INFO][COCRDSLC.cbl:401] MOVE statement
        container
                .getCcWorkAreas()
                .getCcWorkArea()
                .setCcardErrorMsg(container.getWsMiscStorage().getWsReturnMsg());
        // [T-Up#INFO][COCRDSLC.cbl:403] MOVE statement
        container.setWsCommarea(container.getCarddemoCommarea().get());
        // [T-Up#INFO][COCRDSLC.cbl:404] MOVE statement
        container.setWsCommarea(StringUtils.overlay(container.getWsCommarea(),
                container.getWsThisProgcommarea().get(), 160, 172));
        // [T-Up#INFO][COCRDSLC.cbl:408] EXEC_CICS statement
        /*
                       EXEC CICS RETURN
                            TRANSID (LIT-THISTRANID)
                            COMMAREA (WS-COMMAREA)
                            LENGTH(LENGTH OF WS-COMMAREA)
                       END-EXEC
         */
        TaskDto taskDto = TaskDto.builder()
                .destination(container.getWsLiterals().getLitThistranid())
                .data(Data.session(container.getWsCommarea())).build();
        taskInvoker.setNextTask(taskDto);
        context.setReturnFlag(true);
    }

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:414] 0000-MAIN-EXIT Paragraph</p>
     */
    void _0000MainExit(OpenFrameContext context) {
        // [T-Up#INFO][COCRDSLC.cbl:415] EXIT statement
    }

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:418] 1000-SEND-MAP Paragraph</p>
     */
    void _1000SendMap(OpenFrameContext context) {
        // [T-Up#INFO][COCRDSLC.cbl:419] PERFORM statement
        controlManager.run(context, _1100ScreenInit, _1100ScreenInitExit);
        if (controlManager.isTerminate(context)) {
            return;
        }
        // [T-Up#INFO][COCRDSLC.cbl:421] PERFORM statement
        controlManager.run(context, _1200SetupScreenVars,
                _1200SetupScreenVarsExit);
        if (controlManager.isTerminate(context)) {
            return;
        }
        // [T-Up#INFO][COCRDSLC.cbl:423] PERFORM statement
        controlManager.run(context, _1300SetupScreenAttrs,
                _1300SetupScreenAttrsExit);
        if (controlManager.isTerminate(context)) {
            return;
        }
        // [T-Up#INFO][COCRDSLC.cbl:425] PERFORM statement
        controlManager.run(context, _1400SendScreen, _1400SendScreenExit);
        if (controlManager.isTerminate(context)) {
            return;
        }
    }

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:429] 1000-SEND-MAP-EXIT Paragraph</p>
     */
    void _1000SendMapExit(OpenFrameContext context) {
        // [T-Up#INFO][COCRDSLC.cbl:430] EXIT statement
    }

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:433] 1100-SCREEN-INIT Paragraph</p>
     */
    void _1100ScreenInit(OpenFrameContext context) {
        CocrdslcVariableContainer container = (CocrdslcVariableContainer) context
                .getProgramVariableContainer("Cocrdslc");
        // [T-Up#INFO][COCRDSLC.cbl:434] MOVE statement
        container.setCcrdslao(Ccrdslai.createDefaultValueInstance().get());
        // [T-Up#INFO][COCRDSLC.cbl:436] MOVE statement
        container.getWsDateTime().getWsCurdateData()
                .set(IntrinsicFunction.functionCurrentDate());
        // [T-Up#INFO][COCRDSLC.cbl:438] MOVE statement
        container.setTitle01o(container.getCcdaScreenTitle().getCcdaTitle01());
        // [T-Up#INFO][COCRDSLC.cbl:439] MOVE statement
        container.setTitle02o(container.getCcdaScreenTitle().getCcdaTitle02());
        // [T-Up#INFO][COCRDSLC.cbl:440] MOVE statement
        container.setTrnnameo(container.getWsLiterals().getLitThistranid());
        // [T-Up#INFO][COCRDSLC.cbl:441] MOVE statement
        container.setPgmnameo(container.getWsLiterals().getLitThispgm());
        // [T-Up#INFO][COCRDSLC.cbl:443] MOVE statement
        container.getWsDateTime().getWsCurdateData()
                .set(IntrinsicFunction.functionCurrentDate());
        // [T-Up#INFO][COCRDSLC.cbl:445] MOVE statement
        container
                .getWsDateTime()
                .getWsCurdateMmDdYy()
                .setWsCurdateMm(
                        container.getWsDateTime().getWsCurdateData()
                                .getWsCurdate().getWsCurdateMonth());
        // [T-Up#INFO][COCRDSLC.cbl:446] MOVE statement
        container
                .getWsDateTime()
                .getWsCurdateMmDdYy()
                .setWsCurdateDd(
                        container.getWsDateTime().getWsCurdateData()
                                .getWsCurdate().getWsCurdateDay());
        // [T-Up#INFO][COCRDSLC.cbl:447] MOVE statement
        container
                .getWsDateTime()
                .getWsCurdateMmDdYy()
                .setWsCurdateYy(
                        Integer.parseInt(CobStream
                                .convZonedIntToString(
                                        container.getWsDateTime()
                                                .getWsCurdateData()
                                                .getWsCurdate()
                                                .getWsCurdateYear(), 4)
                                .substring(2, 4).trim()));
        // [T-Up#INFO][COCRDSLC.cbl:449] MOVE statement
        container.setCurdateo(container.getWsDateTime().getWsCurdateMmDdYy()
                .get());
        // [T-Up#INFO][COCRDSLC.cbl:451] MOVE statement
        container
                .getWsDateTime()
                .getWsCurtimeHhMmSs()
                .setWsCurtimeHh(
                        container.getWsDateTime().getWsCurdateData()
                                .getWsCurtime().getWsCurtimeHours());
        // [T-Up#INFO][COCRDSLC.cbl:452] MOVE statement
        container
                .getWsDateTime()
                .getWsCurtimeHhMmSs()
                .setWsCurtimeMm(
                        container.getWsDateTime().getWsCurdateData()
                                .getWsCurtime().getWsCurtimeMinute());
        // [T-Up#INFO][COCRDSLC.cbl:453] MOVE statement
        container
                .getWsDateTime()
                .getWsCurtimeHhMmSs()
                .setWsCurtimeSs(
                        container.getWsDateTime().getWsCurdateData()
                                .getWsCurtime().getWsCurtimeSecond());
        // [T-Up#INFO][COCRDSLC.cbl:455] MOVE statement
        container.setCurtimeo(container.getWsDateTime().getWsCurtimeHhMmSs()
                .get());
    }

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:459] 1100-SCREEN-INIT-EXIT Paragraph</p>
     */
    void _1100ScreenInitExit(OpenFrameContext context) {
        // [T-Up#INFO][COCRDSLC.cbl:460] EXIT statement
    }

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:463] 1200-SETUP-SCREEN-VARS Paragraph</p>
     */
    void _1200SetupScreenVars(OpenFrameContext context) {
        CocrdslcVariableContainer container = (CocrdslcVariableContainer) context
                .getProgramVariableContainer("Cocrdslc");
        // *    INITIALIZE SEARCH CRITERIA
        // [T-Up#INFO][COCRDSLC.cbl:465] IF statement
        if (task.hasCommarea() == 0) {
            // [T-Up#INFO][COCRDSLC.cbl:466] SET statement
            container.getWsMiscStorage().setWsInfoMsg(WS_PROMPT_FOR_INPUT);
        } else {
            // [T-Up#INFO][COCRDSLC.cbl:468] IF statement
            if (container.getCarddemoCommarea().getCdemoAccountInfo()
                    .getCdemoAcctId() == 0) {
                // [T-Up#INFO][COCRDSLC.cbl:469] MOVE statement
                container.setAcctsido(StringUtils.repeat((char) 0x00, 11));
            } else {
                // [T-Up#INFO][COCRDSLC.cbl:471] MOVE statement
                container.setAcctsido(container.getCcWorkAreas()
                        .getCcWorkArea().getCcAcctId());
            }
            // [T-Up#INFO][COCRDSLC.cbl:474] IF statement
            if (container.getCarddemoCommarea().getCdemoCardInfo()
                    .getCdemoCardNum() == 0) {
                // [T-Up#INFO][COCRDSLC.cbl:475] MOVE statement
                container.setCardsido(StringUtils.repeat((char) 0x00, 16));
            } else {
                // [T-Up#INFO][COCRDSLC.cbl:477] MOVE statement
                container.setCardsido(container.getCcWorkAreas()
                        .getCcWorkArea().getCcCardNum());
            }
            // [T-Up#INFO][COCRDSLC.cbl:480] IF statement
            if (CobStringUtils.compare(container.getWsMiscStorage()
                    .getWsInfoMsg(), FOUND_CARDS_FOR_ACCOUNT) == 0) {
                // [T-Up#INFO][COCRDSLC.cbl:481] MOVE statement
                container.setCrdnameo(container.getCardRecord()
                        .getCardEmbossedName());
                // [T-Up#INFO][COCRDSLC.cbl:483] MOVE statement
                container
                        .getWsMiscStorage()
                        .getCicsOutputEditVars()
                        .setCardExpiraionDateX(
                                container.getCardRecord()
                                        .getCardExpiraionDate());
                // [T-Up#INFO][COCRDSLC.cbl:486] MOVE statement
                container.setExpmono(container.getWsMiscStorage()
                        .getCicsOutputEditVars().getCardExpiryMonth());
                // [T-Up#INFO][COCRDSLC.cbl:488] MOVE statement
                container.setExpyearo(container.getWsMiscStorage()
                        .getCicsOutputEditVars().getCardExpiryYear());
                // [T-Up#INFO][COCRDSLC.cbl:490] MOVE statement
                container.setCrdstcdo(container.getCardRecord()
                        .getCardActiveStatus());
            }
        }
        // *    SETUP MESSAGE
        // [T-Up#INFO][COCRDSLC.cbl:496] IF statement
        if (CobStringUtils.compare(container.getWsMiscStorage().getWsInfoMsg(),
                WS_NO_INFO_MESSAGE_1) == 0
                || CobStringUtils.compare(container.getWsMiscStorage()
                        .getWsInfoMsg(), WS_NO_INFO_MESSAGE_2) == 0) {
            // [T-Up#INFO][COCRDSLC.cbl:497] SET statement
            container.getWsMiscStorage().setWsInfoMsg(WS_PROMPT_FOR_INPUT);
        }
        // [T-Up#INFO][COCRDSLC.cbl:500] MOVE statement
        container.setErrmsgo(container.getWsMiscStorage().getWsReturnMsg());
        // [T-Up#INFO][COCRDSLC.cbl:502] MOVE statement
        container.setInfomsgo(container.getWsMiscStorage().getWsInfoMsg());
    }

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:505] 1200-SETUP-SCREEN-VARS-EXIT Paragraph</p>
     */
    void _1200SetupScreenVarsExit(OpenFrameContext context) {
        // [T-Up#INFO][COCRDSLC.cbl:506] EXIT statement
    }

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:508] 1300-SETUP-SCREEN-ATTRS Paragraph</p>
     */
    void _1300SetupScreenAttrs(OpenFrameContext context) {
        CocrdslcVariableContainer container = (CocrdslcVariableContainer) context
                .getProgramVariableContainer("Cocrdslc");
        // *    PROTECT OR UNPROTECT BASED ON CONTEXT
        // [T-Up#INFO][COCRDSLC.cbl:511] IF statement
        if (CobStringUtils.compare(container.getCarddemoCommarea()
                .getCdemoMoreInfo().getCdemoLastMapset(), container
                .getWsLiterals().getLitCclistmapset()) == 0
                && CobStringUtils.compare(container.getCarddemoCommarea()
                        .getCdemoGeneralInfo().getCdemoFromProgram(), container
                        .getWsLiterals().getLitCclistpgm()) == 0) {
            // [T-Up#INFO][COCRDSLC.cbl:513] MOVE statement
            container.getCcrdslai().setAcctsida(
                    container.getDfhbmsca().getDfhbmprf());
            // [T-Up#INFO][COCRDSLC.cbl:514] MOVE statement
            container.getCcrdslai().setCardsida(
                    container.getDfhbmsca().getDfhbmprf());
        } else {
            // [T-Up#INFO][COCRDSLC.cbl:516] MOVE statement
            container.getCcrdslai().setAcctsida(
                    container.getDfhbmsca().getDfhbmfse());
            // [T-Up#INFO][COCRDSLC.cbl:517] MOVE statement
            container.getCcrdslai().setCardsida(
                    container.getDfhbmsca().getDfhbmfse());
        }
        // *    POSITION CURSOR
        // [T-Up#INFO][COCRDSLC.cbl:521] EVALUATE statement
        if ((CobStringUtils.compare(container.getWsMiscStorage()
                .getWsEditAcctFlag(), FLG_ACCTFILTER_NOT_OK) == 0)
                || (CobStringUtils.compare(container.getWsMiscStorage()
                        .getWsEditAcctFlag(), FLG_ACCTFILTER_BLANK) == 0)) {
            // [T-Up#INFO][COCRDSLC.cbl:524] MOVE statement
            container.getCcrdslai().setAcctsidl(-1);
        } else if ((CobStringUtils.compare(container.getWsMiscStorage()
                .getWsEditCardFlag(), FLG_CARDFILTER_NOT_OK) == 0)
                || (CobStringUtils.compare(container.getWsMiscStorage()
                        .getWsEditCardFlag(), FLG_CARDFILTER_BLANK) == 0)) {
            // [T-Up#INFO][COCRDSLC.cbl:527] MOVE statement
            container.getCcrdslai().setCardsidl(-1);
        } else {
            // [T-Up#INFO][COCRDSLC.cbl:529] MOVE statement
            container.getCcrdslai().setAcctsidl(-1);
        }
        // *    SETUP COLOR
        // [T-Up#INFO][COCRDSLC.cbl:533] IF statement
        if (CobStringUtils.compare(container.getCarddemoCommarea()
                .getCdemoMoreInfo().getCdemoLastMapset(), container
                .getWsLiterals().getLitCclistmapset()) == 0
                && CobStringUtils.compare(container.getCarddemoCommarea()
                        .getCdemoGeneralInfo().getCdemoFromProgram(), container
                        .getWsLiterals().getLitCclistpgm()) == 0) {
            // [T-Up#INFO][COCRDSLC.cbl:535] MOVE statement
            container.setAcctsidc(container.getDfhbmsca().getDfhdfcol());
            // [T-Up#INFO][COCRDSLC.cbl:536] MOVE statement
            container.setCardsidc(container.getDfhbmsca().getDfhdfcol());
        }
        // [T-Up#INFO][COCRDSLC.cbl:539] IF statement
        if (CobStringUtils.compare(container.getWsMiscStorage()
                .getWsEditAcctFlag(), FLG_ACCTFILTER_NOT_OK) == 0) {
            // [T-Up#INFO][COCRDSLC.cbl:540] MOVE statement
            container.setAcctsidc(container.getDfhbmsca().getDfhred());
        }
        // [T-Up#INFO][COCRDSLC.cbl:543] IF statement
        if (CobStringUtils.compare(container.getWsMiscStorage()
                .getWsEditCardFlag(), FLG_CARDFILTER_NOT_OK) == 0) {
            // [T-Up#INFO][COCRDSLC.cbl:544] MOVE statement
            container.setCardsidc(container.getDfhbmsca().getDfhred());
        }
        // [T-Up#INFO][COCRDSLC.cbl:547] IF statement
        if (CobStringUtils.compare(container.getWsMiscStorage()
                .getWsEditAcctFlag(), FLG_ACCTFILTER_BLANK) == 0
                && container.getCarddemoCommarea().getCdemoGeneralInfo()
                        .getCdemoPgmContext() == CDEMO_PGM_REENTER) {
            // [T-Up#INFO][COCRDSLC.cbl:549] MOVE statement
            container.setAcctsido("*");
            // [T-Up#INFO][COCRDSLC.cbl:550] MOVE statement
            container.setAcctsidc(container.getDfhbmsca().getDfhred());
        }
        // [T-Up#INFO][COCRDSLC.cbl:553] IF statement
        if (CobStringUtils.compare(container.getWsMiscStorage()
                .getWsEditCardFlag(), FLG_CARDFILTER_BLANK) == 0
                && container.getCarddemoCommarea().getCdemoGeneralInfo()
                        .getCdemoPgmContext() == CDEMO_PGM_REENTER) {
            // [T-Up#INFO][COCRDSLC.cbl:555] MOVE statement
            container.setCardsido("*");
            // [T-Up#INFO][COCRDSLC.cbl:556] MOVE statement
            container.setCardsidc(container.getDfhbmsca().getDfhred());
        }
        // [T-Up#INFO][COCRDSLC.cbl:559] IF statement
        if (CobStringUtils.compare(container.getWsMiscStorage().getWsInfoMsg(),
                WS_NO_INFO_MESSAGE_1) == 0
                || CobStringUtils.compare(container.getWsMiscStorage()
                        .getWsInfoMsg(), WS_NO_INFO_MESSAGE_2) == 0) {
            // [T-Up#INFO][COCRDSLC.cbl:560] MOVE statement
            container.setInfomsgc(container.getDfhbmsca().getDfhbmdar());
        } else {
            // [T-Up#INFO][COCRDSLC.cbl:562] MOVE statement
            container.setInfomsgc(container.getDfhbmsca().getDfhneutr());
        }
    }

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:565] 1300-SETUP-SCREEN-ATTRS-EXIT Paragraph</p>
     */
    void _1300SetupScreenAttrsExit(OpenFrameContext context) {
        // [T-Up#INFO][COCRDSLC.cbl:566] EXIT statement
    }

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:569] 1400-SEND-SCREEN Paragraph</p>
     */
    void _1400SendScreen(OpenFrameContext context) {
        CocrdslcVariableContainer container = (CocrdslcVariableContainer) context
                .getProgramVariableContainer("Cocrdslc");
        // [T-Up#INFO][COCRDSLC.cbl:571] MOVE statement
        container
                .getCcWorkAreas()
                .getCcWorkArea()
                .setCcardNextMapset(
                        container.getWsLiterals().getLitThismapset());
        // [T-Up#INFO][COCRDSLC.cbl:572] MOVE statement
        container.getCcWorkAreas().getCcWorkArea()
                .setCcardNextMap(container.getWsLiterals().getLitThismap());
        // [T-Up#INFO][COCRDSLC.cbl:573] SET statement
        container.getCarddemoCommarea().getCdemoGeneralInfo()
                .setCdemoPgmContext(CDEMO_PGM_REENTER);
        // [T-Up#INFO][COCRDSLC.cbl:575] EXEC_CICS statement
        /*
                       EXEC CICS SEND MAP('CCRDSLA')
                                      MAPSET('COCRDSL')
                                      FROM(CCRDSLAO)
                                      CURSOR
                                      ERASE
                                      FREEKB
                                      RESP(WS-RESP-CD)
                       END-EXEC
         */
        try {
            ((CocrdslcOutputDto) task.getOutputDto())
                    .setPageName("COCRDSL_CCRDSLA");
            ((CocrdslcOutputDto) task.getOutputDto()).setCcrdslao(container
                    .getCcrdslao());
        } catch (ConditionException e) {
        } finally {
            container.getWsMiscStorage().getWsCicsProcessngVars()
                    .setWsRespCd(task.getLastResp());
        }
    }

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:584] 1400-SEND-SCREEN-EXIT Paragraph</p>
     */
    void _1400SendScreenExit(OpenFrameContext context) {
        // [T-Up#INFO][COCRDSLC.cbl:585] EXIT statement
    }

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:588] 2000-PROCESS-INPUTS Paragraph</p>
     */
    void _2000ProcessInputs(OpenFrameContext context) {
        CocrdslcVariableContainer container = (CocrdslcVariableContainer) context
                .getProgramVariableContainer("Cocrdslc");
        // [T-Up#INFO][COCRDSLC.cbl:589] PERFORM statement
        controlManager.run(context, _2100ReceiveMap, _2100ReceiveMapExit);
        if (controlManager.isTerminate(context)) {
            return;
        }
        // [T-Up#INFO][COCRDSLC.cbl:591] PERFORM statement
        controlManager.run(context, _2200EditMapInputs, _2200EditMapInputsExit);
        if (controlManager.isTerminate(context)) {
            return;
        }
        // [T-Up#INFO][COCRDSLC.cbl:593] MOVE statement
        container
                .getCcWorkAreas()
                .getCcWorkArea()
                .setCcardErrorMsg(container.getWsMiscStorage().getWsReturnMsg());
        // [T-Up#INFO][COCRDSLC.cbl:594] MOVE statement
        container.getCcWorkAreas().getCcWorkArea()
                .setCcardNextProg(container.getWsLiterals().getLitThispgm());
        // [T-Up#INFO][COCRDSLC.cbl:595] MOVE statement
        container
                .getCcWorkAreas()
                .getCcWorkArea()
                .setCcardNextMapset(
                        container.getWsLiterals().getLitThismapset());
        // [T-Up#INFO][COCRDSLC.cbl:596] MOVE statement
        container.getCcWorkAreas().getCcWorkArea()
                .setCcardNextMap(container.getWsLiterals().getLitThismap());
    }

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:599] 2000-PROCESS-INPUTS-EXIT Paragraph</p>
     */
    void _2000ProcessInputsExit(OpenFrameContext context) {
        // [T-Up#INFO][COCRDSLC.cbl:600] EXIT statement
    }

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:602] 2100-RECEIVE-MAP Paragraph</p>
     */
    void _2100ReceiveMap(OpenFrameContext context) {
        CocrdslcVariableContainer container = (CocrdslcVariableContainer) context
                .getProgramVariableContainer("Cocrdslc");
        // [T-Up#INFO][COCRDSLC.cbl:603] EXEC_CICS statement
        /*
                       EXEC CICS RECEIVE MAP('CCRDSLA')
                                 MAPSET('COCRDSL')
                                 INTO(CCRDSLAI)
                                 RESP(WS-RESP-CD)
                                 RESP2(WS-REAS-CD)
                       END-EXEC
         */
        try {
            container.setCcrdslai(((CocrdslcInputDto) task.getInputDto())
                    .getCcrdslai());
        } catch (ConditionException e) {
        } finally {
            container.getWsMiscStorage().getWsCicsProcessngVars()
                    .setWsRespCd(task.getLastResp());
            container.getWsMiscStorage().getWsCicsProcessngVars()
                    .setWsReasCd(task.getLastResp2());
        }
    }

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:611] 2100-RECEIVE-MAP-EXIT Paragraph</p>
     */
    void _2100ReceiveMapExit(OpenFrameContext context) {
        // [T-Up#INFO][COCRDSLC.cbl:612] EXIT statement
    }

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:614] 2200-EDIT-MAP-INPUTS Paragraph</p>
     */
    void _2200EditMapInputs(OpenFrameContext context) {
        CocrdslcVariableContainer container = (CocrdslcVariableContainer) context
                .getProgramVariableContainer("Cocrdslc");
        // [T-Up#INFO][COCRDSLC.cbl:616] SET statement
        container.getWsMiscStorage().setWsInputFlag(INPUT_OK);
        // [T-Up#INFO][COCRDSLC.cbl:617] SET statement
        container.getWsMiscStorage().setWsEditCardFlag(FLG_CARDFILTER_ISVALID);
        // [T-Up#INFO][COCRDSLC.cbl:618] SET statement
        container.getWsMiscStorage().setWsEditAcctFlag(FLG_ACCTFILTER_ISVALID);
        // *    REPLACE * WITH LOW-VALUES
        // [T-Up#INFO][COCRDSLC.cbl:621] IF statement
        if (CobStringUtils.compare(container.getCcrdslai().getAcctsidi(), "*") == 0
                || CobStringUtils.compare(
                        container.getCcrdslai().getAcctsidi(),
                        StringUtils.repeat(' ', 11)) == 0) {
            // [T-Up#INFO][COCRDSLC.cbl:623] MOVE statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcAcctId(StringUtils.repeat((char) 0x00, 11));
        } else {
            // [T-Up#INFO][COCRDSLC.cbl:625] MOVE statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcAcctId(container.getCcrdslai().getAcctsidi());
        }
        // [T-Up#INFO][COCRDSLC.cbl:628] IF statement
        if (CobStringUtils.compare(container.getCcrdslai().getCardsidi(), "*") == 0
                || CobStringUtils.compare(
                        container.getCcrdslai().getCardsidi(),
                        StringUtils.repeat(' ', 16)) == 0) {
            // [T-Up#INFO][COCRDSLC.cbl:630] MOVE statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcCardNum(StringUtils.repeat((char) 0x00, 16));
        } else {
            // [T-Up#INFO][COCRDSLC.cbl:632] MOVE statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcCardNum(container.getCcrdslai().getCardsidi());
        }
        // *    INDIVIDUAL FIELD EDITS
        // [T-Up#INFO][COCRDSLC.cbl:636] PERFORM statement
        controlManager.run(context, _2210EditAccount, _2210EditAccountExit);
        if (controlManager.isTerminate(context)) {
            return;
        }
        // [T-Up#INFO][COCRDSLC.cbl:639] PERFORM statement
        controlManager.run(context, _2220EditCard, _2220EditCardExit);
        if (controlManager.isTerminate(context)) {
            return;
        }
        // *    CROSS FIELD EDITS
        // [T-Up#INFO][COCRDSLC.cbl:643] IF statement
        if (CobStringUtils.compare(container.getWsMiscStorage()
                .getWsEditAcctFlag(), FLG_ACCTFILTER_BLANK) == 0
                && CobStringUtils.compare(container.getWsMiscStorage()
                        .getWsEditCardFlag(), FLG_CARDFILTER_BLANK) == 0) {
            // [T-Up#INFO][COCRDSLC.cbl:645] SET statement
            container.getWsMiscStorage().setWsReturnMsg(
                    NO_SEARCH_CRITERIA_RECEIVED);
        }
    }

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:649] 2200-EDIT-MAP-INPUTS-EXIT Paragraph</p>
     */
    void _2200EditMapInputsExit(OpenFrameContext context) {
        // [T-Up#INFO][COCRDSLC.cbl:650] EXIT statement
    }

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:653] 2210-EDIT-ACCOUNT Paragraph</p>
     */
    void _2210EditAccount(OpenFrameContext context) {
        CocrdslcVariableContainer container = (CocrdslcVariableContainer) context
                .getProgramVariableContainer("Cocrdslc");
        // [T-Up#INFO][COCRDSLC.cbl:654] SET statement
        container.getWsMiscStorage().setWsEditAcctFlag(FLG_ACCTFILTER_NOT_OK);
        // *    Not supplied
        // [T-Up#INFO][COCRDSLC.cbl:657] IF statement
        if (CobStringUtils.compare(container.getCcWorkAreas().getCcWorkArea()
                .getCcAcctId(), StringUtils.repeat((char) 0x00, 11)) == 0
                || CobStringUtils.compare(container.getCcWorkAreas()
                        .getCcWorkArea().getCcAcctId(),
                        StringUtils.repeat(' ', 11)) == 0
                || container.getCcWorkAreas().getCcWorkArea().getCcAcctIdN() == 0) {
            // [T-Up#INFO][COCRDSLC.cbl:660] SET statement
            container.getWsMiscStorage().setWsInputFlag(INPUT_ERROR);
            // [T-Up#INFO][COCRDSLC.cbl:661] SET statement
            container.getWsMiscStorage()
                    .setWsEditAcctFlag(FLG_ACCTFILTER_BLANK);
            // [T-Up#INFO][COCRDSLC.cbl:662] IF statement
            if (CobStringUtils.compare(container.getWsMiscStorage()
                    .getWsReturnMsg(), WS_RETURN_MSG_OFF) == 0) {
                // [T-Up#INFO][COCRDSLC.cbl:663] SET statement
                container.getWsMiscStorage().setWsReturnMsg(WS_PROMPT_FOR_ACCT);
            }
            // [T-Up#INFO][COCRDSLC.cbl:665] MOVE statement
            container.getCarddemoCommarea().getCdemoAccountInfo()
                    .setCdemoAcctId((long) 0);
            // [T-Up#INFO][COCRDSLC.cbl:666] GO TO statement
            context.setGotoTarget(_2210EditAccountExit);
            return;
        }
        // *
        // *    Not numeric
        // *    Not 11 characters
        // [T-Up#INFO][COCRDSLC.cbl:671] IF statement
        if (!StringUtils.isNumeric(container.getCcWorkAreas().getCcWorkArea()
                .getCcAcctId())) {
            // [T-Up#INFO][COCRDSLC.cbl:672] SET statement
            container.getWsMiscStorage().setWsInputFlag(INPUT_ERROR);
            // [T-Up#INFO][COCRDSLC.cbl:673] SET statement
            container.getWsMiscStorage().setWsEditAcctFlag(
                    FLG_ACCTFILTER_NOT_OK);
            // [T-Up#INFO][COCRDSLC.cbl:674] IF statement
            if (CobStringUtils.compare(container.getWsMiscStorage()
                    .getWsReturnMsg(), WS_RETURN_MSG_OFF) == 0) {
                // [T-Up#INFO][COCRDSLC.cbl:675] MOVE statement
                container.getWsMiscStorage().setWsReturnMsg(
                        "ACCOUNT FILTER,IF SUPPLIED MUST BE A 11 DIGIT NUMBER");
            }
            // [T-Up#INFO][COCRDSLC.cbl:679] MOVE statement
            container.getCarddemoCommarea().getCdemoAccountInfo()
                    .setCdemoAcctId((long) 0);
            // [T-Up#INFO][COCRDSLC.cbl:680] GO TO statement
            context.setGotoTarget(_2210EditAccountExit);
            return;
        } else {
            // [T-Up#INFO][COCRDSLC.cbl:682] MOVE statement
            container
                    .getCarddemoCommarea()
                    .getCdemoAccountInfo()
                    .setCdemoAcctId(
                            Long.parseLong(container.getCcWorkAreas()
                                    .getCcWorkArea().getCcAcctId().trim()));
            // [T-Up#INFO][COCRDSLC.cbl:683] SET statement
            container.getWsMiscStorage().setWsEditAcctFlag(
                    FLG_ACCTFILTER_ISVALID);
        }
    }

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:687] 2210-EDIT-ACCOUNT-EXIT Paragraph</p>
     */
    void _2210EditAccountExit(OpenFrameContext context) {
        // [T-Up#INFO][COCRDSLC.cbl:688] EXIT statement
    }

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:691] 2220-EDIT-CARD Paragraph</p>
     */
    void _2220EditCard(OpenFrameContext context) {
        CocrdslcVariableContainer container = (CocrdslcVariableContainer) context
                .getProgramVariableContainer("Cocrdslc");
        // *    Not numeric
        // *    Not 16 characters
        // [T-Up#INFO][COCRDSLC.cbl:694] SET statement
        container.getWsMiscStorage().setWsEditCardFlag(FLG_CARDFILTER_NOT_OK);
        // *    Not supplied
        // [T-Up#INFO][COCRDSLC.cbl:697] IF statement
        if (CobStringUtils.compare(container.getCcWorkAreas().getCcWorkArea()
                .getCcCardNum(), StringUtils.repeat((char) 0x00, 16)) == 0
                || CobStringUtils.compare(container.getCcWorkAreas()
                        .getCcWorkArea().getCcCardNum(),
                        StringUtils.repeat(' ', 16)) == 0
                || container.getCcWorkAreas().getCcWorkArea().getCcCardNumN() == 0) {
            // [T-Up#INFO][COCRDSLC.cbl:700] SET statement
            container.getWsMiscStorage().setWsInputFlag(INPUT_ERROR);
            // [T-Up#INFO][COCRDSLC.cbl:701] SET statement
            container.getWsMiscStorage()
                    .setWsEditCardFlag(FLG_CARDFILTER_BLANK);
            // [T-Up#INFO][COCRDSLC.cbl:702] IF statement
            if (CobStringUtils.compare(container.getWsMiscStorage()
                    .getWsReturnMsg(), WS_RETURN_MSG_OFF) == 0) {
                // [T-Up#INFO][COCRDSLC.cbl:703] SET statement
                container.getWsMiscStorage().setWsReturnMsg(WS_PROMPT_FOR_CARD);
            }
            // [T-Up#INFO][COCRDSLC.cbl:706] MOVE statement
            container.getCarddemoCommarea().getCdemoCardInfo()
                    .setCdemoCardNum((long) 0);
            // [T-Up#INFO][COCRDSLC.cbl:707] GO TO statement
            context.setGotoTarget(_2220EditCardExit);
            return;
        }
        // *
        // *    Not numeric
        // *    Not 16 characters
        // [T-Up#INFO][COCRDSLC.cbl:712] IF statement
        if (!StringUtils.isNumeric(container.getCcWorkAreas().getCcWorkArea()
                .getCcCardNum())) {
            // [T-Up#INFO][COCRDSLC.cbl:713] SET statement
            container.getWsMiscStorage().setWsInputFlag(INPUT_ERROR);
            // [T-Up#INFO][COCRDSLC.cbl:714] SET statement
            container.getWsMiscStorage().setWsEditCardFlag(
                    FLG_CARDFILTER_NOT_OK);
            // [T-Up#INFO][COCRDSLC.cbl:715] IF statement
            if (CobStringUtils.compare(container.getWsMiscStorage()
                    .getWsReturnMsg(), WS_RETURN_MSG_OFF) == 0) {
                // [T-Up#INFO][COCRDSLC.cbl:716] MOVE statement
                container.getWsMiscStorage().setWsReturnMsg(
                        "CARD ID FILTER,IF SUPPLIED MUST BE A 16 DIGIT NUMBER");
            }
            // [T-Up#INFO][COCRDSLC.cbl:720] MOVE statement
            container.getCarddemoCommarea().getCdemoCardInfo()
                    .setCdemoCardNum((long) 0);
            // [T-Up#INFO][COCRDSLC.cbl:721] GO TO statement
            context.setGotoTarget(_2220EditCardExit);
            return;
        } else {
            // [T-Up#INFO][COCRDSLC.cbl:723] MOVE statement
            container
                    .getCarddemoCommarea()
                    .getCdemoCardInfo()
                    .setCdemoCardNum(
                            container.getCcWorkAreas().getCcWorkArea()
                                    .getCcCardNumN());
            // [T-Up#INFO][COCRDSLC.cbl:724] SET statement
            container.getWsMiscStorage().setWsEditCardFlag(
                    FLG_CARDFILTER_ISVALID);
        }
    }

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:728] 2220-EDIT-CARD-EXIT Paragraph</p>
     */
    void _2220EditCardExit(OpenFrameContext context) {
        // [T-Up#INFO][COCRDSLC.cbl:729] EXIT statement
    }

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:732] 9000-READ-DATA Paragraph</p>
     */
    void _9000ReadData(OpenFrameContext context) {
        // [T-Up#INFO][COCRDSLC.cbl:734] PERFORM statement
        controlManager.run(context, _9100GetcardByacctcard,
                _9100GetcardByacctcardExit);
        if (controlManager.isTerminate(context)) {
            return;
        }
    }

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:738] 9000-READ-DATA-EXIT Paragraph</p>
     */
    void _9000ReadDataExit(OpenFrameContext context) {
        // [T-Up#INFO][COCRDSLC.cbl:739] EXIT statement
    }

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:742] 9100-GETCARD-BYACCTCARD Paragraph</p>
     */
    void _9100GetcardByacctcard(OpenFrameContext context) {
        CocrdslcVariableContainer container = (CocrdslcVariableContainer) context
                .getProgramVariableContainer("Cocrdslc");
        // *    Read the Card file
        // *
        // *    MOVE CC-ACCT-ID-N      TO WS-CARD-RID-ACCT-ID
        // [T-Up#INFO][COCRDSLC.cbl:746] MOVE statement
        container
                .getWsMiscStorage()
                .getWsCardRid()
                .setWsCardRidCardnum(
                        container.getCcWorkAreas().getCcWorkArea()
                                .getCcCardNum());
        // [T-Up#INFO][COCRDSLC.cbl:748] EXEC_CICS statement
        /*
                       EXEC CICS READ
                            FILE      (LIT-CARDFILENAME)
                            RIDFLD    (WS-CARD-RID-CARDNUM)
                            KEYLENGTH (LENGTH OF WS-CARD-RID-CARDNUM)
                            INTO      (CARD-RECORD)
                            LENGTH    (LENGTH OF CARD-RECORD)
                            RESP      (WS-RESP-CD)
                            RESP2     (WS-REAS-CD)
                       END-EXEC
         */
        try {
            AwsM2CarddemoCarddataVsamKsdsDto awsM2CarddemoCarddataVsamKsdsDto = recordKeyAccessor
                    .read("awsM2CarddemoCarddataVsamKsdsDao", container
                            .getWsMiscStorage().getWsCardRid()
                            .getWsCardRidCardnum());
            container
                    .setCardRecord(CardRecordToAwsM2CarddemoCarddataVsamKsdsDto.INSTANCE
                            .toSource(awsM2CarddemoCarddataVsamKsdsDto));
        } catch (ConditionException e) {
        } finally {
            container.getWsMiscStorage().getWsCicsProcessngVars()
                    .setWsRespCd(task.getLastResp());
            container.getWsMiscStorage().getWsCicsProcessngVars()
                    .setWsReasCd(task.getLastResp2());
        }
        // [T-Up#INFO][COCRDSLC.cbl:758] EVALUATE statement
        if (container.getWsMiscStorage().getWsCicsProcessngVars().getWsRespCd() == 0) {
            // [T-Up#INFO][COCRDSLC.cbl:760] SET statement
            container.getWsMiscStorage().setWsInfoMsg(FOUND_CARDS_FOR_ACCOUNT);
        } else if (container.getWsMiscStorage().getWsCicsProcessngVars()
                .getWsRespCd() == 13) {
            // [T-Up#INFO][COCRDSLC.cbl:762] SET statement
            container.getWsMiscStorage().setWsInputFlag(INPUT_ERROR);
            // [T-Up#INFO][COCRDSLC.cbl:763] SET statement
            container.getWsMiscStorage().setWsEditAcctFlag(
                    FLG_ACCTFILTER_NOT_OK);
            // [T-Up#INFO][COCRDSLC.cbl:764] SET statement
            container.getWsMiscStorage().setWsEditCardFlag(
                    FLG_CARDFILTER_NOT_OK);
            // [T-Up#INFO][COCRDSLC.cbl:765] IF statement
            if (CobStringUtils.compare(container.getWsMiscStorage()
                    .getWsReturnMsg(), WS_RETURN_MSG_OFF) == 0) {
                // [T-Up#INFO][COCRDSLC.cbl:766] SET statement
                container.getWsMiscStorage().setWsReturnMsg(
                        DID_NOT_FIND_ACCTCARD_COMBO);
            }
        } else {
            // [T-Up#INFO][COCRDSLC.cbl:769] SET statement
            container.getWsMiscStorage().setWsInputFlag(INPUT_ERROR);
            // [T-Up#INFO][COCRDSLC.cbl:770] IF statement
            if (CobStringUtils.compare(container.getWsMiscStorage()
                    .getWsReturnMsg(), WS_RETURN_MSG_OFF) == 0) {
                // [T-Up#INFO][COCRDSLC.cbl:771] SET statement
                container.getWsMiscStorage().setWsEditAcctFlag(
                        FLG_ACCTFILTER_NOT_OK);
            }
            // [T-Up#INFO][COCRDSLC.cbl:773] MOVE statement
            container.getWsMiscStorage().getWsFileErrorMessage()
                    .setErrorOpname("READ");
            // [T-Up#INFO][COCRDSLC.cbl:774] MOVE statement
            container
                    .getWsMiscStorage()
                    .getWsFileErrorMessage()
                    .setErrorFile(
                            container.getWsLiterals().getLitCardfilename());
            // [T-Up#INFO][COCRDSLC.cbl:775] MOVE statement
            container
                    .getWsMiscStorage()
                    .getWsFileErrorMessage()
                    .setErrorResp(
                            StringUtils.leftPad(
                                    String.valueOf(Math.abs(container
                                            .getWsMiscStorage()
                                            .getWsCicsProcessngVars()
                                            .getWsRespCd())), 9, '0'));
            // [T-Up#INFO][COCRDSLC.cbl:776] MOVE statement
            container
                    .getWsMiscStorage()
                    .getWsFileErrorMessage()
                    .setErrorResp2(
                            StringUtils.leftPad(
                                    String.valueOf(Math.abs(container
                                            .getWsMiscStorage()
                                            .getWsCicsProcessngVars()
                                            .getWsReasCd())), 9, '0'));
            // [T-Up#INFO][COCRDSLC.cbl:777] MOVE statement
            container.getWsMiscStorage().setWsReturnMsg(
                    container.getWsMiscStorage().getWsFileErrorMessage().get());
        }
    }

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:781] 9100-GETCARD-BYACCTCARD-EXIT Paragraph</p>
     */
    void _9100GetcardByacctcardExit(OpenFrameContext context) {
        // [T-Up#INFO][COCRDSLC.cbl:782] EXIT statement
    }

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:785] 9150-GETCARD-BYACCT Paragraph</p>
     */
    void _9150GetcardByacct(OpenFrameContext context) {
        CocrdslcVariableContainer container = (CocrdslcVariableContainer) context
                .getProgramVariableContainer("Cocrdslc");
        // *    Read the Card file. Access via alternate index ACCTID
        // *
        // [T-Up#INFO][COCRDSLC.cbl:789] EXEC_CICS statement
        /*
                       EXEC CICS READ
                            FILE      (LIT-CARDFILENAME-ACCT-PATH)
                            RIDFLD    (WS-CARD-RID-ACCT-ID)
                            KEYLENGTH (LENGTH OF WS-CARD-RID-ACCT-ID)
                            INTO      (CARD-RECORD)
                            LENGTH    (LENGTH OF CARD-RECORD)
                            RESP      (WS-RESP-CD)
                            RESP2     (WS-REAS-CD)
                       END-EXEC
         */
        try {
            AwsM2CarddemoCarddataVsamKsdsDto awsM2CarddemoCarddataVsamKsdsDto = recordKeyAccessor
                    .alternateIndex().read(
                            "awsM2CarddemoCarddataVsamKsdsDao",
                            "Aix10",
                            BigDecimal.valueOf(container.getWsMiscStorage()
                                    .getWsCardRid().getWsCardRidAcctId()));
            container
                    .setCardRecord(CardRecordToAwsM2CarddemoCarddataVsamKsdsDto.INSTANCE
                            .toSource(awsM2CarddemoCarddataVsamKsdsDto));
        } catch (ConditionException e) {
        } finally {
            container.getWsMiscStorage().getWsCicsProcessngVars()
                    .setWsRespCd(task.getLastResp());
            container.getWsMiscStorage().getWsCicsProcessngVars()
                    .setWsReasCd(task.getLastResp2());
        }
        // [T-Up#INFO][COCRDSLC.cbl:799] EVALUATE statement
        if (container.getWsMiscStorage().getWsCicsProcessngVars().getWsRespCd() == 0) {
            // [T-Up#INFO][COCRDSLC.cbl:801] SET statement
            container.getWsMiscStorage().setWsInfoMsg(FOUND_CARDS_FOR_ACCOUNT);
        } else if (container.getWsMiscStorage().getWsCicsProcessngVars()
                .getWsRespCd() == 13) {
            // [T-Up#INFO][COCRDSLC.cbl:803] SET statement
            container.getWsMiscStorage().setWsInputFlag(INPUT_ERROR);
            // [T-Up#INFO][COCRDSLC.cbl:804] SET statement
            container.getWsMiscStorage().setWsEditAcctFlag(
                    FLG_ACCTFILTER_NOT_OK);
            // [T-Up#INFO][COCRDSLC.cbl:805] SET statement
            container.getWsMiscStorage().setWsReturnMsg(
                    DID_NOT_FIND_ACCT_IN_CARDXREF);
        } else {
            // [T-Up#INFO][COCRDSLC.cbl:807] SET statement
            container.getWsMiscStorage().setWsInputFlag(INPUT_ERROR);
            // [T-Up#INFO][COCRDSLC.cbl:808] SET statement
            container.getWsMiscStorage().setWsEditAcctFlag(
                    FLG_ACCTFILTER_NOT_OK);
            // [T-Up#INFO][COCRDSLC.cbl:809] MOVE statement
            container.getWsMiscStorage().getWsFileErrorMessage()
                    .setErrorOpname("READ");
            // [T-Up#INFO][COCRDSLC.cbl:810] MOVE statement
            container
                    .getWsMiscStorage()
                    .getWsFileErrorMessage()
                    .setErrorFile(
                            container.getWsLiterals()
                                    .getLitCardfilenameAcctPath());
            // [T-Up#INFO][COCRDSLC.cbl:811] MOVE statement
            container
                    .getWsMiscStorage()
                    .getWsFileErrorMessage()
                    .setErrorResp(
                            StringUtils.leftPad(
                                    String.valueOf(Math.abs(container
                                            .getWsMiscStorage()
                                            .getWsCicsProcessngVars()
                                            .getWsRespCd())), 9, '0'));
            // [T-Up#INFO][COCRDSLC.cbl:812] MOVE statement
            container
                    .getWsMiscStorage()
                    .getWsFileErrorMessage()
                    .setErrorResp2(
                            StringUtils.leftPad(
                                    String.valueOf(Math.abs(container
                                            .getWsMiscStorage()
                                            .getWsCicsProcessngVars()
                                            .getWsReasCd())), 9, '0'));
            // [T-Up#INFO][COCRDSLC.cbl:813] MOVE statement
            container.getWsMiscStorage().setWsReturnMsg(
                    container.getWsMiscStorage().getWsFileErrorMessage().get());
        }
    }

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:816] 9150-GETCARD-BYACCT-EXIT Paragraph</p>
     */
    void _9150GetcardByacctExit(OpenFrameContext context) {
        // [T-Up#INFO][COCRDSLC.cbl:817] EXIT statement
    }

    // *****************************************************************
    // * Display Long text and exit                                    *
    // * This is primarily for debugging and should not be used in     *
    // * regular course                                                *
    // *****************************************************************

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:826] SEND-LONG-TEXT Paragraph</p>
     */
    void sendLongText(OpenFrameContext context) {
        CocrdslcVariableContainer container = (CocrdslcVariableContainer) context
                .getProgramVariableContainer("Cocrdslc");
        // [T-Up#INFO][COCRDSLC.cbl:827] EXEC_CICS statement
        /*
                       EXEC CICS SEND TEXT
                                 FROM(WS-LONG-MSG)
                                 LENGTH(LENGTH OF WS-LONG-MSG)
                                 ERASE
                                 FREEKB
                       END-EXEC
         */
        task.getOutputDto().getSystemDto()
                .setNotification(container.getWsMiscStorage().getWsLongMsg());
        // [T-Up#INFO][COCRDSLC.cbl:834] EXEC_CICS statement
        /*
                       EXEC CICS RETURN
                       END-EXEC
         */
        context.setReturnFlag(true);
    }

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:837] SEND-LONG-TEXT-EXIT Paragraph</p>
     */
    void sendLongTextExit(OpenFrameContext context) {
        // [T-Up#INFO][COCRDSLC.cbl:838] EXIT statement
    }

    // *****************************************************************
    // * Plain text exit - Dont use in production                      *
    // *****************************************************************

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:844] SEND-PLAIN-TEXT Paragraph</p>
     */
    void sendPlainText(OpenFrameContext context) {
        CocrdslcVariableContainer container = (CocrdslcVariableContainer) context
                .getProgramVariableContainer("Cocrdslc");
        // [T-Up#INFO][COCRDSLC.cbl:845] EXEC_CICS statement
        /*
                       EXEC CICS SEND TEXT
                                 FROM(WS-RETURN-MSG)
                                 LENGTH(LENGTH OF WS-RETURN-MSG)
                                 ERASE
                                 FREEKB
                       END-EXEC
         */
        task.getOutputDto().getSystemDto()
                .setNotification(container.getWsMiscStorage().getWsReturnMsg());
        // [T-Up#INFO][COCRDSLC.cbl:852] EXEC_CICS statement
        /*
                       EXEC CICS RETURN
                       END-EXEC
         */
        context.setReturnFlag(true);
    }

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:855] SEND-PLAIN-TEXT-EXIT Paragraph</p>
     */
    void sendPlainTextExit(OpenFrameContext context) {
        // [T-Up#INFO][COCRDSLC.cbl:856] EXIT statement
    }

    // ******************************************************************
    // *Common code to store PFKey
    // ******************************************************************
    //       *COPY 'CSSTRPFY'
    //       *    .
    // *(/home/oflab/repository/pds/TEST/COBOL_COPYBOOK/CSSTRPFY.cpy)
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.
    // * All Rights Reserved.
    // *
    // * Licensed under the Apache License, Version 2.0 (the "License").
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at
    // *
    // *    http://www.apache.org/licenses/LICENSE-2.0
    // *
    // * Unless required by applicable law or agreed to in writing,
    // * software distributed under the License is distributed on an
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
    // * either express or implied. See the License for the specific
    // * language governing permissions and limitations under the License
    // ******************************************************************

    /** 
     * <p>[T-Up#INFO][CSSTRPFY.cpy:18] YYYY-STORE-PFKEY Paragraph</p>
     */
    void yyyyStorePfkey(OpenFrameContext context) {
        CocrdslcVariableContainer container = (CocrdslcVariableContainer) context
                .getProgramVariableContainer("Cocrdslc");
        // *****************************************************************
        // * Map AID to PFKey in COMMON Area
        // *****************************************************************
        // [T-Up#INFO][CSSTRPFY.cpy:22] EVALUATE statement
        if (CobStringUtils.compare(task.getPressedKey(), container.getDfhaid()
                .getDfhenter()) == 0) {
            // [T-Up#INFO][CSSTRPFY.cpy:24] SET statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcardAid(CCARD_AID_ENTER);
        } else if (CobStringUtils.compare(task.getPressedKey(), container
                .getDfhaid().getDfhclear()) == 0) {
            // [T-Up#INFO][CSSTRPFY.cpy:26] SET statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcardAid(CCARD_AID_CLEAR);
        } else if (CobStringUtils.compare(task.getPressedKey(), container
                .getDfhaid().getDfhpa1()) == 0) {
            // [T-Up#INFO][CSSTRPFY.cpy:28] SET statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcardAid(CCARD_AID_PA1);
        } else if (CobStringUtils.compare(task.getPressedKey(), container
                .getDfhaid().getDfhpa2()) == 0) {
            // [T-Up#INFO][CSSTRPFY.cpy:30] SET statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcardAid(CCARD_AID_PA2);
        } else if (CobStringUtils.compare(task.getPressedKey(), container
                .getDfhaid().getDfhpf1()) == 0) {
            // [T-Up#INFO][CSSTRPFY.cpy:32] SET statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcardAid(CCARD_AID_PFK01);
        } else if (CobStringUtils.compare(task.getPressedKey(), container
                .getDfhaid().getDfhpf2()) == 0) {
            // [T-Up#INFO][CSSTRPFY.cpy:34] SET statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcardAid(CCARD_AID_PFK02);
        } else if (CobStringUtils.compare(task.getPressedKey(), container
                .getDfhaid().getDfhpf3()) == 0) {
            // [T-Up#INFO][CSSTRPFY.cpy:36] SET statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcardAid(CCARD_AID_PFK03);
        } else if (CobStringUtils.compare(task.getPressedKey(), container
                .getDfhaid().getDfhpf4()) == 0) {
            // [T-Up#INFO][CSSTRPFY.cpy:38] SET statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcardAid(CCARD_AID_PFK04);
        } else if (CobStringUtils.compare(task.getPressedKey(), container
                .getDfhaid().getDfhpf5()) == 0) {
            // [T-Up#INFO][CSSTRPFY.cpy:40] SET statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcardAid(CCARD_AID_PFK05);
        } else if (CobStringUtils.compare(task.getPressedKey(), container
                .getDfhaid().getDfhpf6()) == 0) {
            // [T-Up#INFO][CSSTRPFY.cpy:42] SET statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcardAid(CCARD_AID_PFK06);
        } else if (CobStringUtils.compare(task.getPressedKey(), container
                .getDfhaid().getDfhpf7()) == 0) {
            // [T-Up#INFO][CSSTRPFY.cpy:44] SET statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcardAid(CCARD_AID_PFK07);
        } else if (CobStringUtils.compare(task.getPressedKey(), container
                .getDfhaid().getDfhpf8()) == 0) {
            // [T-Up#INFO][CSSTRPFY.cpy:46] SET statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcardAid(CCARD_AID_PFK08);
        } else if (CobStringUtils.compare(task.getPressedKey(), container
                .getDfhaid().getDfhpf9()) == 0) {
            // [T-Up#INFO][CSSTRPFY.cpy:48] SET statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcardAid(CCARD_AID_PFK09);
        } else if (CobStringUtils.compare(task.getPressedKey(), container
                .getDfhaid().getDfhpf10()) == 0) {
            // [T-Up#INFO][CSSTRPFY.cpy:50] SET statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcardAid(CCARD_AID_PFK10);
        } else if (CobStringUtils.compare(task.getPressedKey(), container
                .getDfhaid().getDfhpf11()) == 0) {
            // [T-Up#INFO][CSSTRPFY.cpy:52] SET statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcardAid(CCARD_AID_PFK11);
        } else if (CobStringUtils.compare(task.getPressedKey(), container
                .getDfhaid().getDfhpf12()) == 0) {
            // [T-Up#INFO][CSSTRPFY.cpy:54] SET statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcardAid(CCARD_AID_PFK12);
        } else if (CobStringUtils.compare(task.getPressedKey(), container
                .getDfhaid().getDfhpf13()) == 0) {
            // [T-Up#INFO][CSSTRPFY.cpy:56] SET statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcardAid(CCARD_AID_PFK01);
        } else if (CobStringUtils.compare(task.getPressedKey(), container
                .getDfhaid().getDfhpf14()) == 0) {
            // [T-Up#INFO][CSSTRPFY.cpy:58] SET statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcardAid(CCARD_AID_PFK02);
        } else if (CobStringUtils.compare(task.getPressedKey(), container
                .getDfhaid().getDfhpf15()) == 0) {
            // [T-Up#INFO][CSSTRPFY.cpy:60] SET statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcardAid(CCARD_AID_PFK03);
        } else if (CobStringUtils.compare(task.getPressedKey(), container
                .getDfhaid().getDfhpf16()) == 0) {
            // [T-Up#INFO][CSSTRPFY.cpy:62] SET statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcardAid(CCARD_AID_PFK04);
        } else if (CobStringUtils.compare(task.getPressedKey(), container
                .getDfhaid().getDfhpf17()) == 0) {
            // [T-Up#INFO][CSSTRPFY.cpy:64] SET statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcardAid(CCARD_AID_PFK05);
        } else if (CobStringUtils.compare(task.getPressedKey(), container
                .getDfhaid().getDfhpf18()) == 0) {
            // [T-Up#INFO][CSSTRPFY.cpy:66] SET statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcardAid(CCARD_AID_PFK06);
        } else if (CobStringUtils.compare(task.getPressedKey(), container
                .getDfhaid().getDfhpf19()) == 0) {
            // [T-Up#INFO][CSSTRPFY.cpy:68] SET statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcardAid(CCARD_AID_PFK07);
        } else if (CobStringUtils.compare(task.getPressedKey(), container
                .getDfhaid().getDfhpf20()) == 0) {
            // [T-Up#INFO][CSSTRPFY.cpy:70] SET statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcardAid(CCARD_AID_PFK08);
        } else if (CobStringUtils.compare(task.getPressedKey(), container
                .getDfhaid().getDfhpf21()) == 0) {
            // [T-Up#INFO][CSSTRPFY.cpy:72] SET statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcardAid(CCARD_AID_PFK09);
        } else if (CobStringUtils.compare(task.getPressedKey(), container
                .getDfhaid().getDfhpf22()) == 0) {
            // [T-Up#INFO][CSSTRPFY.cpy:74] SET statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcardAid(CCARD_AID_PFK10);
        } else if (CobStringUtils.compare(task.getPressedKey(), container
                .getDfhaid().getDfhpf23()) == 0) {
            // [T-Up#INFO][CSSTRPFY.cpy:76] SET statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcardAid(CCARD_AID_PFK11);
        } else if (CobStringUtils.compare(task.getPressedKey(), container
                .getDfhaid().getDfhpf24()) == 0) {
            // [T-Up#INFO][CSSTRPFY.cpy:78] SET statement
            container.getCcWorkAreas().getCcWorkArea()
                    .setCcardAid(CCARD_AID_PFK12);
        }
    }

    /** 
     * <p>[T-Up#INFO][CSSTRPFY.cpy:81] YYYY-STORE-PFKEY-EXIT Paragraph</p>
     */
    void yyyyStorePfkeyExit(OpenFrameContext context) {
        // [T-Up#INFO][CSSTRPFY.cpy:82] EXIT statement
    }

    // *
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:59 CDT
    // *

    /** 
     * <p>[T-Up#INFO][COCRDSLC.cbl:863] ABEND-ROUTINE Paragraph</p>
     */
    void abendRoutine(OpenFrameContext context) {
        CocrdslcVariableContainer container = (CocrdslcVariableContainer) context
                .getProgramVariableContainer("Cocrdslc");
        // [T-Up#INFO][COCRDSLC.cbl:865] IF statement
        if (CobStringUtils.compare(container.getAbendData().getAbendMsg(),
                StringUtils.repeat((char) 0x00, 72)) == 0) {
            // [T-Up#INFO][COCRDSLC.cbl:866] MOVE statement
            container.getAbendData().setAbendMsg("UNEXPECTED ABEND OCCURRED.");
        }
        // [T-Up#INFO][COCRDSLC.cbl:869] MOVE statement
        container.getAbendData().setAbendCulprit(
                container.getWsLiterals().getLitThispgm());
        // [T-Up#INFO][COCRDSLC.cbl:871] EXEC_CICS statement
        /*
                       EXEC CICS SEND
                                        FROM (ABEND-DATA)
                                        LENGTH(LENGTH OF ABEND-DATA)
                                        NOHANDLE
                       END-EXEC
         */
        try {
            task.getOutputDto().getSystemDto()
                    .setNotification(container.getAbendData());
        } catch (OnlineException e) {
        }
        // [T-Up#INFO][COCRDSLC.cbl:877] EXEC_CICS statement
        /*
                       EXEC CICS HANDLE ABEND
                            CANCEL
                       END-EXEC
         */
        abendHandler.cancel();
        // [T-Up#INFO][COCRDSLC.cbl:881] EXEC_CICS statement
        /*
                       EXEC CICS ABEND
                            ABCODE('9999')
                       END-EXEC
         */
        throw new AbendException();
    }

    // *
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:33 CDT
    // *
}

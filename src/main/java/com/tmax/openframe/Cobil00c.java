package com.tmax.openframe;

import com.tmax.openframe.online.task.service.ProgramControl;
import com.tmax.openframe.dto.Cosgn00cInputDto;
import com.tmax.openframe.mapper.Cobil00cMapperInterface.*;
import com.tmax.openframe.dto.Comen01cInputDto;
import com.tmax.openframe.online.task.service.OtherUserTaskInvoker;
import com.tmax.openframe.online.task.domain.dto.TaskDto.*;
import com.tmax.openframe.online.task.domain.dto.Data;
import com.tmax.openframe.online.time.service.Time;
import com.tmax.openframe.online.task.service.Task;
import com.tmax.openframe.dto.Cobil00cOutputDto;
import com.tmax.openframe.dto.Cobil00cInputDto;
import com.tmax.openframe.online.exception.ConditionException;
import com.tmax.openframe.dto.AwsM2CarddemoAcctdataVsamKsdsDto;
import com.tmax.openframe.online.daoexecutor.service.ReadPointManager;
import com.tmax.openframe.online.daoexecutor.service.RecordKeyAccessor;
import com.tmax.openframe.dto.AwsM2CarddemoCardxrefVsamKsdsDto;
import com.tmax.openframe.dao.AwsM2CarddemoTransactVsamKsdsDao;
import com.tmax.openframe.dto.AwsM2CarddemoTransactVsamKsdsDto;
import com.tmax.openframe.online.daoexecutor.domain.dto.ReadPoint;
import com.tmax.openframe.online.daoexecutor.service.ReadPointAccessor;
import static com.tmax.openframe.variable.group.Cobil00cCarddemoCommarea.Cobil00cCdemoGeneralInfo.*;
import static com.tmax.openframe.variable.group.Cobil00cWsVariables.*;
import com.tmax.openframe.runtime.cobol.CobStream;
import com.tmax.openframe.runtime.cobol.CobStringUtils;
import com.tmax.openframe.runtime.cobol.IntrinsicFunction;
import com.tmax.openframe.runtime.context.OpenFrameContext;
import com.tmax.openframe.runtime.flow.ControlManager;
import com.tmax.openframe.variable.Cobil00cVariableContainer;
import com.tmax.openframe.variable.group.Cobil0ai;
import com.tmax.openframe.variable.group.TranRecord;
import com.tmax.openframe.variable.group.WsDateTime;
import java.math.*;
import java.util.*;
import java.util.function.Consumer;
import java.util.regex.Pattern;
import lombok.*;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Primary;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/03/20 15:15:15 KST</p>
 * <hr>
 * <p>Java class for defining logics of COBOL program</p>
 * <ul>
 * <li>The name of COBOL program: COBIL00C.cbl</li>
 * <li>Variable container class: {@link Cobil00cVariableContainer}</li>
 * </ul>
 */
@Service
@RequiredArgsConstructor
@Transactional
@Primary
public class Cobil00c {
    /** 
     * <p>Class that manages an execution flow of the program</p>
     */
    protected final ControlManager controlManager;
    Consumer<OpenFrameContext> mainPara = this::mainPara;
    Consumer<OpenFrameContext> processEnterKey = this::processEnterKey;
    Consumer<OpenFrameContext> getCurrentTimestamp = this::getCurrentTimestamp;
    Consumer<OpenFrameContext> returnToPrevScreen = this::returnToPrevScreen;
    Consumer<OpenFrameContext> sendBillpayScreen = this::sendBillpayScreen;
    Consumer<OpenFrameContext> receiveBillpayScreen = this::receiveBillpayScreen;
    Consumer<OpenFrameContext> populateHeaderInfo = this::populateHeaderInfo;
    Consumer<OpenFrameContext> readAcctdatFile = this::readAcctdatFile;
    Consumer<OpenFrameContext> updateAcctdatFile = this::updateAcctdatFile;
    Consumer<OpenFrameContext> readCxacaixFile = this::readCxacaixFile;
    Consumer<OpenFrameContext> startbrTransactFile = this::startbrTransactFile;
    Consumer<OpenFrameContext> readprevTransactFile = this::readprevTransactFile;
    Consumer<OpenFrameContext> endbrTransactFile = this::endbrTransactFile;
    Consumer<OpenFrameContext> writeTransactFile = this::writeTransactFile;
    Consumer<OpenFrameContext> clearCurrentScreen = this::clearCurrentScreen;
    Consumer<OpenFrameContext> initializeAllFields = this::initializeAllFields;
    /** 
     * <p>Execution flow of COBOL program that defined in the procedure division</p>
     */
    ArrayList<Consumer> methodList = new ArrayList<>();
    {
        methodList.add(mainPara);
        methodList.add(processEnterKey);
        methodList.add(getCurrentTimestamp);
        methodList.add(returnToPrevScreen);
        methodList.add(sendBillpayScreen);
        methodList.add(receiveBillpayScreen);
        methodList.add(populateHeaderInfo);
        methodList.add(readAcctdatFile);
        methodList.add(updateAcctdatFile);
        methodList.add(readCxacaixFile);
        methodList.add(startbrTransactFile);
        methodList.add(readprevTransactFile);
        methodList.add(endbrTransactFile);
        methodList.add(writeTransactFile);
        methodList.add(clearCurrentScreen);
        methodList.add(initializeAllFields);
    }
    private final ReadPointAccessor readPointAccessor;
    private final ReadPointManager readPointManager;
    private final RecordKeyAccessor recordKeyAccessor;
    private final Task task;
    private final Time time;
    private final TaskInvoker taskInvoker;
    private final ProgramControl programControl;

    /** 
     * <p>Method for executing a program logic that defined in the procedure division</p>
     * @param generalContext context that is necessary for executing program
     * @return return value of program
     */
    public int run(Map<String, Object> generalContext) {
        OpenFrameContext context = new OpenFrameContext(generalContext,
                methodList);
        if (context.getProgramVariableContainer("Cobil00c") == null) {
            Cobil00cVariableContainer container = new Cobil00cVariableContainer();
            context.setProgramVariableContainer("Cobil00c", container);
        }
        controlManager.run(context);
        return context.getReturnValue();
    }

    // ******************************************************************
    // * Program     : COBIL00C.CBL
    // * Application : CardDemo
    // * Type        : CICS COBOL Program
    // * Function    : Bill Payment - Pay account balance in full and a
    // *               tractionsaction for the online bill payment.
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.
    // * All Rights Reserved.
    // *
    // * Licensed under the Apache License, Version 2.0 (the "License").
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at
    // *
    // *    http://www.apache.org/licenses/LICENSE-2.0
    // *
    // * Unless required by applicable law or agreed to in writing,
    // * software distributed under the License is distributed on an
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
    // * either express or implied. See the License for the specific
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // *      OCCURS 1 TO 32767 TIMES DEPENDING ON EIBCALEN.
    // *----------------------------------------------------------------*
    // *                       PROCEDURE DIVISION
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COBIL00C.cbl:99] MAIN-PARA Paragraph</p>
     */
    void mainPara(OpenFrameContext context) {
        Cobil00cVariableContainer container = (Cobil00cVariableContainer) context
                .getProgramVariableContainer("Cobil00c");
        // [T-Up#INFO][COBIL00C.cbl:101] SET statement
        container.getWsVariables().setWsErrFlg(ERR_FLG_OFF);
        // [T-Up#INFO][COBIL00C.cbl:102] SET statement
        container.getWsVariables().setWsUsrModified(USR_MODIFIED_NO);
        // [T-Up#INFO][COBIL00C.cbl:104] MOVE statement
        container.getWsVariables().setWsMessage(StringUtils.repeat(' ', 80));
        container.setErrmsgo(StringUtils.repeat(' ', 78));
        // [T-Up#INFO][COBIL00C.cbl:107] IF statement
        if (task.hasCommarea() == 0) {
            // [T-Up#INFO][COBIL00C.cbl:108] MOVE statement
            container.getCarddemoCommarea().getCdemoGeneralInfo()
                    .setCdemoToProgram("COSGN00C");
            // [T-Up#INFO][COBIL00C.cbl:109] MOVE statement
            container
                    .getCarddemoCommarea()
                    .getCdemoGeneralInfo()
                    .setCdemoFromTranid(
                            container.getWsVariables().getWsTranid());
            // [T-Up#INFO][COBIL00C.cbl:110] MOVE statement
            container
                    .getCarddemoCommarea()
                    .getCdemoGeneralInfo()
                    .setCdemoFromProgram(
                            container.getWsVariables().getWsPgmname());
            // [T-Up#INFO][COBIL00C.cbl:111] MOVE statement
            container.getCarddemoCommarea().getCdemoGeneralInfo()
                    .setCdemoPgmContext(0);
            // [T-Up#INFO][COBIL00C.cbl:112] EXEC_CICS statement
            /*
                               EXEC CICS
                               XCTL PROGRAM('COSGN00C')
                               COMMAREA(CARDDEMO-COMMAREA)
                               END-EXEC
             */
            Cosgn00cInputDto cosgn00cInputDto = new Cosgn00cInputDto();
            cosgn00cInputDto
                    .setDfhcommarea(Cobil00cCarddemoCommareaToCosgn00cDfhcommarea.INSTANCE
                            .toTarget(container.getCarddemoCommarea()));
            programControl.forward("CC00", cosgn00cInputDto);
            context.setReturnFlag(true);
            // [T-Up#INFO][COBIL00C.cbl:116] PERFORM statement
            controlManager.run(context, returnToPrevScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else {
            // [T-Up#INFO][COBIL00C.cbl:118] MOVE statement
            container.getCarddemoCommarea().set(
                    StringUtils.overlay(container.getCarddemoCommarea().get(),
                            container.getDfhcommarea().get().substring(0, 160),
                            0, 160));
            // [T-Up#INFO][COBIL00C.cbl:119] IF statement
            if (!(container.getCarddemoCommarea().getCdemoGeneralInfo()
                    .getCdemoPgmContext() == CDEMO_PGM_REENTER)) {
                // [T-Up#INFO][COBIL00C.cbl:120] SET statement
                container.getCarddemoCommarea().getCdemoGeneralInfo()
                        .setCdemoPgmContext(CDEMO_PGM_REENTER);
                // [T-Up#INFO][COBIL00C.cbl:121] MOVE statement
                container.setCobil0ao(Cobil0ai.createDefaultValueInstance()
                        .get());
                // [T-Up#INFO][COBIL00C.cbl:122] MOVE statement
                container.getCobil0ai().setActidinl(-1);
                // [T-Up#INFO][COBIL00C.cbl:123] IF statement
                if (CobStringUtils.compare(container.getCarddemoCommarea()
                        .getCdemoCb00Info().getCdemoCb00TrnSelected(),
                        StringUtils.repeat(' ', 16)) != 0
                        && CobStringUtils.compare(container
                                .getCarddemoCommarea().getCdemoCb00Info()
                                .getCdemoCb00TrnSelected(),
                                StringUtils.repeat((char) 0x00, 16)) != 0) {
                    // [T-Up#INFO][COBIL00C.cbl:125] MOVE statement
                    container.getCobil0ai().setActidini(
                            container.getCarddemoCommarea().getCdemoCb00Info()
                                    .getCdemoCb00TrnSelected());
                    // [T-Up#INFO][COBIL00C.cbl:127] PERFORM statement
                    controlManager.run(context, processEnterKey);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                }
                // [T-Up#INFO][COBIL00C.cbl:129] PERFORM statement
                controlManager.run(context, sendBillpayScreen);
                if (controlManager.isTerminate(context)) {
                    return;
                }
            } else {
                // [T-Up#INFO][COBIL00C.cbl:131] PERFORM statement
                controlManager.run(context, receiveBillpayScreen);
                if (controlManager.isTerminate(context)) {
                    return;
                }
                // [T-Up#INFO][COBIL00C.cbl:132] EVALUATE statement
                if (CobStringUtils.compare(task.getPressedKey(), container
                        .getDfhaid().getDfhenter()) == 0) {
                    // [T-Up#INFO][COBIL00C.cbl:134] PERFORM statement
                    controlManager.run(context, processEnterKey);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                } else if (CobStringUtils.compare(task.getPressedKey(),
                        container.getDfhaid().getDfhpf3()) == 0) {
                    // [T-Up#INFO][COBIL00C.cbl:136] IF statement
                    if (CobStringUtils.compare(container.getCarddemoCommarea()
                            .getCdemoGeneralInfo().getCdemoFromProgram(),
                            StringUtils.repeat(' ', 8)) == 0
                            || CobStringUtils.compare(container
                                    .getCarddemoCommarea()
                                    .getCdemoGeneralInfo()
                                    .getCdemoFromProgram(),
                                    StringUtils.repeat((char) 0x00, 8)) == 0) {
                        // [T-Up#INFO][COBIL00C.cbl:137] MOVE statement
                        container.getCarddemoCommarea().getCdemoGeneralInfo()
                                .setCdemoToProgram("COMEN01C");
                        // [T-Up#INFO][COBIL00C.cbl:138] MOVE statement
                        container
                                .getCarddemoCommarea()
                                .getCdemoGeneralInfo()
                                .setCdemoFromTranid(
                                        container.getWsVariables()
                                                .getWsTranid());
                        // [T-Up#INFO][COBIL00C.cbl:139] MOVE statement
                        container
                                .getCarddemoCommarea()
                                .getCdemoGeneralInfo()
                                .setCdemoFromProgram(
                                        container.getWsVariables()
                                                .getWsPgmname());
                        // [T-Up#INFO][COBIL00C.cbl:140] MOVE statement
                        container.getCarddemoCommarea().getCdemoGeneralInfo()
                                .setCdemoPgmContext(0);
                        // [T-Up#INFO][COBIL00C.cbl:141] EXEC_CICS statement
                        /*
                                                           EXEC CICS
                                                           XCTL PROGRAM('COMEN01C')
                                                           COMMAREA(CARDDEMO-COMMAREA)
                                                           END-EXEC
                         */
                        Comen01cInputDto comen01cInputDto = new Comen01cInputDto();
                        comen01cInputDto
                                .setDfhcommarea(Cobil00cCarddemoCommareaToComen01cDfhcommarea.INSTANCE
                                        .toTarget(container
                                                .getCarddemoCommarea()));
                        programControl.forward("CM00", comen01cInputDto);
                        context.setReturnFlag(true);
                    } else {
                        // [T-Up#INFO][COBIL00C.cbl:146] MOVE statement
                        container
                                .getCarddemoCommarea()
                                .getCdemoGeneralInfo()
                                .setCdemoToProgram(
                                        container.getCarddemoCommarea()
                                                .getCdemoGeneralInfo()
                                                .getCdemoFromProgram());
                        // [T-Up#INFO][COBIL00C.cbl:148] MOVE statement
                        container
                                .getCarddemoCommarea()
                                .getCdemoGeneralInfo()
                                .setCdemoFromTranid(
                                        container.getWsVariables()
                                                .getWsTranid());
                        // [T-Up#INFO][COBIL00C.cbl:149] MOVE statement
                        container
                                .getCarddemoCommarea()
                                .getCdemoGeneralInfo()
                                .setCdemoFromProgram(
                                        container.getWsVariables()
                                                .getWsPgmname());
                        // [T-Up#INFO][COBIL00C.cbl:150] MOVE statement
                        container.getCarddemoCommarea().getCdemoGeneralInfo()
                                .setCdemoPgmContext(0);
                        // [T-Up#INFO][COBIL00C.cbl:151] EXEC_CICS statement
                        /*
                                                           EXEC CICS
                                                           XCTL PROGRAM('COMEN01C')
                                                           COMMAREA(CARDDEMO-COMMAREA)
                                                           END-EXEC
                         */
                        Comen01cInputDto comen01cInputDto = new Comen01cInputDto();
                        comen01cInputDto
                                .setDfhcommarea(Cobil00cCarddemoCommareaToComen01cDfhcommarea.INSTANCE
                                        .toTarget(container
                                                .getCarddemoCommarea()));
                        programControl.forward("CM00", comen01cInputDto);
                        context.setReturnFlag(true);
                    }
                    // [T-Up#INFO][COBIL00C.cbl:156] PERFORM statement
                    controlManager.run(context, returnToPrevScreen);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                } else if (CobStringUtils.compare(task.getPressedKey(),
                        container.getDfhaid().getDfhpf4()) == 0) {
                    // [T-Up#INFO][COBIL00C.cbl:158] PERFORM statement
                    controlManager.run(context, clearCurrentScreen);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                } else {
                    // [T-Up#INFO][COBIL00C.cbl:160] MOVE statement
                    container.getWsVariables().setWsErrFlg("Y");
                    // [T-Up#INFO][COBIL00C.cbl:161] MOVE statement
                    container.getWsVariables().setWsMessage(
                            container.getCcdaCommonMessages()
                                    .getCcdaMsgInvalidKey());
                    // [T-Up#INFO][COBIL00C.cbl:162] PERFORM statement
                    controlManager.run(context, sendBillpayScreen);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                }
            }
        }
        // [T-Up#INFO][COBIL00C.cbl:167] EXEC_CICS statement
        /*
                       EXEC CICS RETURN
                                 TRANSID (WS-TRANID)
                                 COMMAREA (CARDDEMO-COMMAREA)
                       END-EXEC
         */
        TaskDto taskDto = TaskDto
                .builder()
                .destination("CB00")
                .data(Data
                        .session(Cobil00cCarddemoCommareaToCobil00cDfhcommarea.INSTANCE
                                .toTarget(container.getCarddemoCommarea())))
                .build();
        taskInvoker.setNextTask(taskDto);
        context.setReturnFlag(true);
    }

    // *----------------------------------------------------------------*
    // *                      PROCESS-ENTER-KEY
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COBIL00C.cbl:175] PROCESS-ENTER-KEY Paragraph</p>
     */
    void processEnterKey(OpenFrameContext context) {
        Cobil00cVariableContainer container = (Cobil00cVariableContainer) context
                .getProgramVariableContainer("Cobil00c");
        // [T-Up#INFO][COBIL00C.cbl:177] SET statement
        container.getWsVariables().setWsConfPayFlg(CONF_PAY_NO);
        // [T-Up#INFO][COBIL00C.cbl:179] EVALUATE statement
        if (CobStringUtils.compare(container.getCobil0ai().getActidini(),
                StringUtils.repeat(' ', 11)) == 0
                || CobStringUtils.compare(
                        container.getCobil0ai().getActidini(),
                        StringUtils.repeat((char) 0x00, 11)) == 0) {
            // [T-Up#INFO][COBIL00C.cbl:181] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COBIL00C.cbl:182] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Acct ID can NOT be empty...");
            // [T-Up#INFO][COBIL00C.cbl:184] MOVE statement
            container.getCobil0ai().setActidinl(-1);
            // [T-Up#INFO][COBIL00C.cbl:185] PERFORM statement
            controlManager.run(context, sendBillpayScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else {
            // [T-Up#INFO][COBIL00C.cbl:187] CONTINUE statement
        }
        // [T-Up#INFO][COBIL00C.cbl:190] IF statement
        if (!(CobStringUtils.compare(container.getWsVariables().getWsErrFlg(),
                ERR_FLG_ON) == 0)) {
            // [T-Up#INFO][COBIL00C.cbl:191] IF statement
            if (CobStringUtils.compare(container.getCobil0ai().getActidini(),
                    StringUtils.repeat(' ', 11)) == 0) {
                // [T-Up#INFO][COBIL00C.cbl:192] MOVE statement
                container.getAccountRecord().setAcctId((long) 0);
                container.getCardXrefRecord().setXrefAcctId((long) 0);
            } else {
                // [T-Up#INFO][COBIL00C.cbl:194] MOVE statement
                container.getAccountRecord().setAcctId(
                        Long.parseLong(container.getCobil0ai().getActidini()
                                .trim()));
                container.getCardXrefRecord().setXrefAcctId(
                        Long.parseLong(container.getCobil0ai().getActidini()
                                .trim()));
                // [T-Up#INFO][COBIL00C.cbl:197] EVALUATE statement
                if ((CobStringUtils.compare(container.getCobil0ai()
                        .getConfirmi(), "Y") == 0)
                        || (CobStringUtils.compare(container.getCobil0ai()
                                .getConfirmi(), "y") == 0)) {
                    // [T-Up#INFO][COBIL00C.cbl:200] SET statement
                    container.getWsVariables().setWsConfPayFlg(CONF_PAY_YES);
                    // [T-Up#INFO][COBIL00C.cbl:201] PERFORM statement
                    controlManager.run(context, readAcctdatFile);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                } else if ((CobStringUtils.compare(container.getCobil0ai()
                        .getConfirmi(), "N") == 0)
                        || (CobStringUtils.compare(container.getCobil0ai()
                                .getConfirmi(), "n") == 0)) {
                    // [T-Up#INFO][COBIL00C.cbl:204] PERFORM statement
                    controlManager.run(context, clearCurrentScreen);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                    // [T-Up#INFO][COBIL00C.cbl:205] MOVE statement
                    container.getWsVariables().setWsErrFlg("Y");
                } else if ((CobStringUtils.compare(container.getCobil0ai()
                        .getConfirmi(), " ") == 0)
                        || (CobStringUtils.compare(container.getCobil0ai()
                                .getConfirmi(), StringUtils.repeat((char) 0x00,
                                1)) == 0)) {
                    // [T-Up#INFO][COBIL00C.cbl:208] PERFORM statement
                    controlManager.run(context, readAcctdatFile);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                } else {
                    // [T-Up#INFO][COBIL00C.cbl:210] MOVE statement
                    container.getWsVariables().setWsErrFlg("Y");
                    // [T-Up#INFO][COBIL00C.cbl:211] MOVE statement
                    container.getWsVariables().setWsMessage(
                            "Invalid value. Valid values are (Y/N)...");
                    // [T-Up#INFO][COBIL00C.cbl:213] MOVE statement
                    container.getCobil0ai().setConfirml(-1);
                    // [T-Up#INFO][COBIL00C.cbl:214] PERFORM statement
                    controlManager.run(context, sendBillpayScreen);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                }
                // [T-Up#INFO][COBIL00C.cbl:217] MOVE statement
                container.getWsVariables().setWsCurrBal(
                        container.getAccountRecord().getAcctCurrBal());
                // [T-Up#INFO][COBIL00C.cbl:218] MOVE statement
                container.getCobil0ai().setCurbali(
                        container.getWsVariables().getWsCurrBal());
            }
            // [T-Up#INFO][COBIL00C.cbl:221] IF statement
            if (!(CobStringUtils.compare(container.getWsVariables()
                    .getWsErrFlg(), ERR_FLG_ON) == 0)) {
                // [T-Up#INFO][COBIL00C.cbl:222] IF statement
                if (container.getAccountRecord().getAcctCurrBal()
                        .compareTo(BigDecimal.valueOf(0)) <= 0
                        && CobStringUtils.compare(container.getCobil0ai()
                                .getActidini(), StringUtils.repeat(' ', 11)) != 0
                        && CobStringUtils.compare(container.getCobil0ai()
                                .getActidini(), StringUtils.repeat((char) 0x00,
                                11)) != 0) {
                    // [T-Up#INFO][COBIL00C.cbl:224] MOVE statement
                    container.getWsVariables().setWsErrFlg("Y");
                    // [T-Up#INFO][COBIL00C.cbl:225] MOVE statement
                    container.getWsVariables().setWsMessage(
                            "You have nothing to pay...");
                    // [T-Up#INFO][COBIL00C.cbl:227] MOVE statement
                    container.getCobil0ai().setActidinl(-1);
                    // [T-Up#INFO][COBIL00C.cbl:228] PERFORM statement
                    controlManager.run(context, sendBillpayScreen);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                }
            }
            // [T-Up#INFO][COBIL00C.cbl:232] IF statement
            if (!(CobStringUtils.compare(container.getWsVariables()
                    .getWsErrFlg(), ERR_FLG_ON) == 0)) {
                // [T-Up#INFO][COBIL00C.cbl:234] IF statement
                if (CobStringUtils.compare(container.getWsVariables()
                        .getWsConfPayFlg(), CONF_PAY_YES) == 0) {
                    // [T-Up#INFO][COBIL00C.cbl:235] PERFORM statement
                    controlManager.run(context, readCxacaixFile);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                    // [T-Up#INFO][COBIL00C.cbl:236] MOVE statement
                    container.getTranRecord().setTranId(
                            StringUtils.repeat((char) 0xFF, 16));
                    // [T-Up#INFO][COBIL00C.cbl:237] PERFORM statement
                    controlManager.run(context, startbrTransactFile);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                    // [T-Up#INFO][COBIL00C.cbl:238] PERFORM statement
                    controlManager.run(context, readprevTransactFile);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                    // [T-Up#INFO][COBIL00C.cbl:239] PERFORM statement
                    controlManager.run(context, endbrTransactFile);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                    // [T-Up#INFO][COBIL00C.cbl:240] MOVE statement
                    container.getWsVariables().setWsTranIdNum(
                            Long.parseLong(container.getTranRecord()
                                    .getTranId().trim()));
                    // [T-Up#INFO][COBIL00C.cbl:241] ADD statement
                    container.getWsVariables().setWsTranIdNum(
                            container.getWsVariables().getWsTranIdNum() + 1);
                    // [T-Up#INFO][COBIL00C.cbl:242] INITIALIZE statement
                    container.setTranRecord(TranRecord
                            .createDefaultValueInstance());
                    // [T-Up#INFO][COBIL00C.cbl:243] MOVE statement
                    container.getTranRecord().setTranId(
                            StringUtils.leftPad(String.valueOf(Math
                                    .abs(container.getWsVariables()
                                            .getWsTranIdNum())), 16, '0'));
                    // [T-Up#INFO][COBIL00C.cbl:244] MOVE statement
                    container.getTranRecord().setTranTypeCd("02");
                    // [T-Up#INFO][COBIL00C.cbl:245] MOVE statement
                    container.getTranRecord().setTranCatCd(2);
                    // [T-Up#INFO][COBIL00C.cbl:246] MOVE statement
                    container.getTranRecord().setTranSource("POS TERM");
                    // [T-Up#INFO][COBIL00C.cbl:247] MOVE statement
                    container.getTranRecord().setTranDesc(
                            "BILL PAYMENT - ONLINE");
                    // [T-Up#INFO][COBIL00C.cbl:248] MOVE statement
                    container.getTranRecord().setTranAmt(
                            container.getAccountRecord().getAcctCurrBal());
                    // [T-Up#INFO][COBIL00C.cbl:249] MOVE statement
                    container.getTranRecord().setTranCardNum(
                            container.getCardXrefRecord().getXrefCardNum());
                    // [T-Up#INFO][COBIL00C.cbl:250] MOVE statement
                    container.getTranRecord().setTranMerchantId(999999999);
                    // [T-Up#INFO][COBIL00C.cbl:251] MOVE statement
                    container.getTranRecord().setTranMerchantName(
                            "BILL PAYMENT");
                    // [T-Up#INFO][COBIL00C.cbl:252] MOVE statement
                    container.getTranRecord().setTranMerchantCity("N/A");
                    // [T-Up#INFO][COBIL00C.cbl:253] MOVE statement
                    container.getTranRecord().setTranMerchantZip("N/A");
                    // [T-Up#INFO][COBIL00C.cbl:254] PERFORM statement
                    controlManager.run(context, getCurrentTimestamp);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                    // [T-Up#INFO][COBIL00C.cbl:255] MOVE statement
                    container.getTranRecord().setTranOrigTs(
                            container.getWsDateTime().getWsTimestamp().get());
                    container.getTranRecord().setTranProcTs(
                            container.getWsDateTime().getWsTimestamp().get());
                    // [T-Up#INFO][COBIL00C.cbl:257] PERFORM statement
                    controlManager.run(context, writeTransactFile);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                    // [T-Up#INFO][COBIL00C.cbl:258] COMPUTE statement
                    container.getAccountRecord().setAcctCurrBal(
                            container
                                    .getAccountRecord()
                                    .getAcctCurrBal()
                                    .subtract(
                                            container.getTranRecord()
                                                    .getTranAmt()));
                    // [T-Up#INFO][COBIL00C.cbl:259] PERFORM statement
                    controlManager.run(context, updateAcctdatFile);
                    if (controlManager.isTerminate(context)) {
                        return;
                    }
                } else {
                    // [T-Up#INFO][COBIL00C.cbl:261] MOVE statement
                    container.getWsVariables().setWsMessage(
                            "Confirm to make a bill payment...");
                    // [T-Up#INFO][COBIL00C.cbl:263] MOVE statement
                    container.getCobil0ai().setConfirml(-1);
                }
                // [T-Up#INFO][COBIL00C.cbl:266] PERFORM statement
                controlManager.run(context, sendBillpayScreen);
                if (controlManager.isTerminate(context)) {
                    return;
                }
            }
        }
    }

    // *----------------------------------------------------------------*
    // *                      GET-CURRENT-TIMESTAMP
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COBIL00C.cbl:273] GET-CURRENT-TIMESTAMP Paragraph</p>
     */
    void getCurrentTimestamp(OpenFrameContext context) {
        Cobil00cVariableContainer container = (Cobil00cVariableContainer) context
                .getProgramVariableContainer("Cobil00c");
        // [T-Up#INFO][COBIL00C.cbl:275] EXEC_CICS statement
        /*
                       EXEC CICS ASKTIME
                         ABSTIME(WS-ABS-TIME)
                       END-EXEC
         */
        container.getWsVariables().setWsAbsTime(time.getCurrentTime());
        // [T-Up#INFO][COBIL00C.cbl:279] EXEC_CICS statement
        /*
                       EXEC CICS FORMATTIME
                         ABSTIME(WS-ABS-TIME)
                         YYYYMMDD(WS-CUR-DATE-X10)
                         DATESEP('-')
                         TIME(WS-CUR-TIME-X08)
                         TIMESEP(':')
                       END-EXEC
         */
        container.getWsVariables().setWsCurDateX10(
                time.setTime(container.getWsVariables().getWsAbsTime())
                        .getYYYYMMDD("-"));
        container.getWsVariables().setWsCurTimeX08(
                time.setTime(container.getWsVariables().getWsAbsTime())
                        .getTime(":"));
        // [T-Up#INFO][COBIL00C.cbl:287] INITIALIZE statement
        container.getWsDateTime().setWsTimestamp(
                WsDateTime.WsTimestamp.createDefaultValueInstance());
        // [T-Up#INFO][COBIL00C.cbl:288] MOVE statement
        container
                .getWsDateTime()
                .getWsTimestamp()
                .set(StringUtils.overlay(container.getWsDateTime()
                        .getWsTimestamp().get(), container.getWsVariables()
                        .getWsCurDateX10(), 0, 10));
        // [T-Up#INFO][COBIL00C.cbl:289] MOVE statement
        container
                .getWsDateTime()
                .getWsTimestamp()
                .set(StringUtils.overlay(container.getWsDateTime()
                        .getWsTimestamp().get(), container.getWsVariables()
                        .getWsCurTimeX08(), 11, 19));
        // [T-Up#INFO][COBIL00C.cbl:290] MOVE statement
        container.getWsDateTime().getWsTimestamp().setWsTimestampTmMs6(0);
    }

    // *----------------------------------------------------------------*
    // *                      RETURN-TO-PREV-SCREEN
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COBIL00C.cbl:297] RETURN-TO-PREV-SCREEN Paragraph</p>
     */
    void returnToPrevScreen(OpenFrameContext context) {
    }

    // *     IF CDEMO-TO-PROGRAM = LOW-VALUES OR SPACES
    // *         MOVE 'COSGN00C' TO CDEMO-TO-PROGRAM
    // *     END-IF
    // *     MOVE WS-TRANID    TO CDEMO-FROM-TRANID
    // *     MOVE WS-PGMNAME   TO CDEMO-FROM-PROGRAM
    // *     MOVE ZEROS        TO CDEMO-PGM-CONTEXT
    // *     EXEC CICS
    // *         XCTL PROGRAM(CDEMO-TO-PROGRAM)
    // *         COMMAREA(CARDDEMO-COMMAREA)
    // *     END-EXEC.
    // *----------------------------------------------------------------*
    // *                      SEND-BILLPAY-SCREEN
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COBIL00C.cbl:313] SEND-BILLPAY-SCREEN Paragraph</p>
     */
    void sendBillpayScreen(OpenFrameContext context) {
        Cobil00cVariableContainer container = (Cobil00cVariableContainer) context
                .getProgramVariableContainer("Cobil00c");
        // [T-Up#INFO][COBIL00C.cbl:315] PERFORM statement
        controlManager.run(context, populateHeaderInfo);
        if (controlManager.isTerminate(context)) {
            return;
        }
        // [T-Up#INFO][COBIL00C.cbl:317] MOVE statement
        container.setErrmsgo(container.getWsVariables().getWsMessage());
        // [T-Up#INFO][COBIL00C.cbl:319] EXEC_CICS statement
        /*
                       EXEC CICS SEND
                                 MAP('COBIL0A')
                                 MAPSET('COBIL00')
                                 FROM(COBIL0AO)
                                 ERASE
                                 CURSOR
                       END-EXEC
         */
        ((Cobil00cOutputDto) task.getOutputDto())
                .setPageName("COBIL00_COBIL0A");
        ((Cobil00cOutputDto) task.getOutputDto()).setCobil0ao(container
                .getCobil0ao());
    }

    // *----------------------------------------------------------------*
    // *                      RECEIVE-BILLPAY-SCREEN
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COBIL00C.cbl:330] RECEIVE-BILLPAY-SCREEN Paragraph</p>
     */
    void receiveBillpayScreen(OpenFrameContext context) {
        Cobil00cVariableContainer container = (Cobil00cVariableContainer) context
                .getProgramVariableContainer("Cobil00c");
        // [T-Up#INFO][COBIL00C.cbl:332] EXEC_CICS statement
        /*
                       EXEC CICS RECEIVE
                                 MAP('COBIL0A')
                                 MAPSET('COBIL00')
                                 INTO(COBIL0AI)
                                 RESP(WS-RESP-CD)
                                 RESP2(WS-REAS-CD)
                       END-EXEC
         */
        try {
            container.setCobil0ai(((Cobil00cInputDto) task.getInputDto())
                    .getCobil0ai());
        } catch (ConditionException e) {
        } finally {
            container.getWsVariables().setWsRespCd(task.getLastResp());
            container.getWsVariables().setWsReasCd(task.getLastResp2());
        }
    }

    // *----------------------------------------------------------------*
    // *                      POPULATE-HEADER-INFO
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COBIL00C.cbl:343] POPULATE-HEADER-INFO Paragraph</p>
     */
    void populateHeaderInfo(OpenFrameContext context) {
        Cobil00cVariableContainer container = (Cobil00cVariableContainer) context
                .getProgramVariableContainer("Cobil00c");
        // [T-Up#INFO][COBIL00C.cbl:345] MOVE statement
        container.getWsDateTime().getWsCurdateData()
                .set(IntrinsicFunction.functionCurrentDate());
        // [T-Up#INFO][COBIL00C.cbl:347] MOVE statement
        container.setTitle01o(container.getCcdaScreenTitle().getCcdaTitle01());
        // [T-Up#INFO][COBIL00C.cbl:348] MOVE statement
        container.setTitle02o(container.getCcdaScreenTitle().getCcdaTitle02());
        // [T-Up#INFO][COBIL00C.cbl:349] MOVE statement
        container.setTrnnameo(container.getWsVariables().getWsTranid());
        // [T-Up#INFO][COBIL00C.cbl:350] MOVE statement
        container.setPgmnameo(container.getWsVariables().getWsPgmname());
        // [T-Up#INFO][COBIL00C.cbl:352] MOVE statement
        container
                .getWsDateTime()
                .getWsCurdateMmDdYy()
                .setWsCurdateMm(
                        container.getWsDateTime().getWsCurdateData()
                                .getWsCurdate().getWsCurdateMonth());
        // [T-Up#INFO][COBIL00C.cbl:353] MOVE statement
        container
                .getWsDateTime()
                .getWsCurdateMmDdYy()
                .setWsCurdateDd(
                        container.getWsDateTime().getWsCurdateData()
                                .getWsCurdate().getWsCurdateDay());
        // [T-Up#INFO][COBIL00C.cbl:354] MOVE statement
        container
                .getWsDateTime()
                .getWsCurdateMmDdYy()
                .setWsCurdateYy(
                        Integer.parseInt(CobStream
                                .convZonedIntToString(
                                        container.getWsDateTime()
                                                .getWsCurdateData()
                                                .getWsCurdate()
                                                .getWsCurdateYear(), 4)
                                .substring(2, 4).trim()));
        // [T-Up#INFO][COBIL00C.cbl:356] MOVE statement
        container.setCurdateo(container.getWsDateTime().getWsCurdateMmDdYy()
                .get());
        // [T-Up#INFO][COBIL00C.cbl:358] MOVE statement
        container
                .getWsDateTime()
                .getWsCurtimeHhMmSs()
                .setWsCurtimeHh(
                        container.getWsDateTime().getWsCurdateData()
                                .getWsCurtime().getWsCurtimeHours());
        // [T-Up#INFO][COBIL00C.cbl:359] MOVE statement
        container
                .getWsDateTime()
                .getWsCurtimeHhMmSs()
                .setWsCurtimeMm(
                        container.getWsDateTime().getWsCurdateData()
                                .getWsCurtime().getWsCurtimeMinute());
        // [T-Up#INFO][COBIL00C.cbl:360] MOVE statement
        container
                .getWsDateTime()
                .getWsCurtimeHhMmSs()
                .setWsCurtimeSs(
                        container.getWsDateTime().getWsCurdateData()
                                .getWsCurtime().getWsCurtimeSecond());
        // [T-Up#INFO][COBIL00C.cbl:362] MOVE statement
        container.setCurtimeo(container.getWsDateTime().getWsCurtimeHhMmSs()
                .get());
    }

    // *----------------------------------------------------------------*
    // *                      READ-ACCTDAT-FILE
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COBIL00C.cbl:367] READ-ACCTDAT-FILE Paragraph</p>
     */
    void readAcctdatFile(OpenFrameContext context) {
        Cobil00cVariableContainer container = (Cobil00cVariableContainer) context
                .getProgramVariableContainer("Cobil00c");
        // [T-Up#INFO][COBIL00C.cbl:369] EXEC_CICS statement
        /*
                       EXEC CICS READ
                            DATASET   (WS-ACCTDAT-FILE)
                            INTO      (ACCOUNT-RECORD)
                            LENGTH    (LENGTH OF ACCOUNT-RECORD)
                            RIDFLD    (ACCT-ID)
                            KEYLENGTH (LENGTH OF ACCT-ID)
                            UPDATE
                            RESP      (WS-RESP-CD)
                            RESP2     (WS-REAS-CD)
                       END-EXEC
         */
        try {
            AwsM2CarddemoAcctdataVsamKsdsDto awsM2CarddemoAcctdataVsamKsdsDto = recordKeyAccessor
                    .readForUpdate("awsM2CarddemoAcctdataVsamKsdsDao",
                            BigDecimal.valueOf(container.getAccountRecord()
                                    .getAcctId()));
            container
                    .setAccountRecord(AccountRecordToAwsM2CarddemoAcctdataVsamKsdsDto.INSTANCE
                            .toSource(awsM2CarddemoAcctdataVsamKsdsDto));
        } catch (ConditionException e) {
        } finally {
            container.getWsVariables().setWsRespCd(task.getLastResp());
            container.getWsVariables().setWsReasCd(task.getLastResp2());
        }
        // [T-Up#INFO][COBIL00C.cbl:380] EVALUATE statement
        if (container.getWsVariables().getWsRespCd() == 0) {
            // [T-Up#INFO][COBIL00C.cbl:382] CONTINUE statement
        } else if (container.getWsVariables().getWsRespCd() == 13) {
            // [T-Up#INFO][COBIL00C.cbl:384] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COBIL00C.cbl:385] MOVE statement
            container.getWsVariables().setWsMessage("Account ID NOT found...");
            // [T-Up#INFO][COBIL00C.cbl:387] MOVE statement
            container.getCobil0ai().setActidinl(-1);
            // [T-Up#INFO][COBIL00C.cbl:388] PERFORM statement
            controlManager.run(context, sendBillpayScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else {
            // [T-Up#INFO][COBIL00C.cbl:390] DISPLAY statement
            System.out.print("RESP:");
            System.out.print(container.getWsVariables().getWsRespCd());
            System.out.print("REAS:");
            System.out.println(container.getWsVariables().getWsReasCd());
            // [T-Up#INFO][COBIL00C.cbl:391] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COBIL00C.cbl:392] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Unable to lookup Account...");
            // [T-Up#INFO][COBIL00C.cbl:394] MOVE statement
            container.getCobil0ai().setActidinl(-1);
            // [T-Up#INFO][COBIL00C.cbl:395] PERFORM statement
            controlManager.run(context, sendBillpayScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        }
    }

    // *----------------------------------------------------------------*
    // *                      UPDATE-ACCTDAT-FILE
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COBIL00C.cbl:401] UPDATE-ACCTDAT-FILE Paragraph</p>
     */
    void updateAcctdatFile(OpenFrameContext context) {
        Cobil00cVariableContainer container = (Cobil00cVariableContainer) context
                .getProgramVariableContainer("Cobil00c");
        // [T-Up#INFO][COBIL00C.cbl:403] EXEC_CICS statement
        /*
                       EXEC CICS REWRITE
                            DATASET   (WS-ACCTDAT-FILE)
                            FROM      (ACCOUNT-RECORD)
                            LENGTH    (LENGTH OF ACCOUNT-RECORD)
                            RESP      (WS-RESP-CD)
                            RESP2     (WS-REAS-CD)
                       END-EXEC
         */
        try {
            AwsM2CarddemoAcctdataVsamKsdsDto awsM2CarddemoAcctdataVsamKsdsDto = AccountRecordToAwsM2CarddemoAcctdataVsamKsdsDto.INSTANCE
                    .toTarget(container.getAccountRecord());
            recordKeyAccessor.updateLast("awsM2CarddemoAcctdataVsamKsdsDao",
                    awsM2CarddemoAcctdataVsamKsdsDto);
        } catch (ConditionException e) {
        } finally {
            container.getWsVariables().setWsRespCd(task.getLastResp());
            container.getWsVariables().setWsReasCd(task.getLastResp2());
        }
        // [T-Up#INFO][COBIL00C.cbl:411] EVALUATE statement
        if (container.getWsVariables().getWsRespCd() == 0) {
            // [T-Up#INFO][COBIL00C.cbl:413] CONTINUE statement
        } else if (container.getWsVariables().getWsRespCd() == 13) {
            // [T-Up#INFO][COBIL00C.cbl:415] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COBIL00C.cbl:416] MOVE statement
            container.getWsVariables().setWsMessage("Account ID NOT found...");
            // [T-Up#INFO][COBIL00C.cbl:418] MOVE statement
            container.getCobil0ai().setActidinl(-1);
            // [T-Up#INFO][COBIL00C.cbl:419] PERFORM statement
            controlManager.run(context, sendBillpayScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else {
            // [T-Up#INFO][COBIL00C.cbl:421] DISPLAY statement
            System.out.print("RESP:");
            System.out.print(container.getWsVariables().getWsRespCd());
            System.out.print("REAS:");
            System.out.println(container.getWsVariables().getWsReasCd());
            // [T-Up#INFO][COBIL00C.cbl:422] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COBIL00C.cbl:423] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Unable to Update Account...");
            // [T-Up#INFO][COBIL00C.cbl:425] MOVE statement
            container.getCobil0ai().setActidinl(-1);
            // [T-Up#INFO][COBIL00C.cbl:426] PERFORM statement
            controlManager.run(context, sendBillpayScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        }
    }

    // *----------------------------------------------------------------*
    // *                      READ-CXACAIX-FILE
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COBIL00C.cbl:432] READ-CXACAIX-FILE Paragraph</p>
     */
    void readCxacaixFile(OpenFrameContext context) {
        Cobil00cVariableContainer container = (Cobil00cVariableContainer) context
                .getProgramVariableContainer("Cobil00c");
        // [T-Up#INFO][COBIL00C.cbl:434] EXEC_CICS statement
        /*
                       EXEC CICS READ
                            DATASET   (WS-CXACAIX-FILE)
                            INTO      (CARD-XREF-RECORD)
                            LENGTH    (LENGTH OF CARD-XREF-RECORD)
                            RIDFLD    (XREF-ACCT-ID)
                            KEYLENGTH (LENGTH OF XREF-ACCT-ID)
                            RESP      (WS-RESP-CD)
                            RESP2     (WS-REAS-CD)
                       END-EXEC
         */
        try {
            AwsM2CarddemoCardxrefVsamKsdsDto awsM2CarddemoCardxrefVsamKsdsDto = recordKeyAccessor
                    .alternateIndex().read(
                            "awsM2CarddemoCardxrefVsamKsdsDao",
                            "Aix11",
                            BigDecimal.valueOf(container.getCardXrefRecord()
                                    .getXrefAcctId()));
            container
                    .setCardXrefRecord(CardXrefRecordToAwsM2CarddemoCardxrefVsamKsdsDto.INSTANCE
                            .toSource(awsM2CarddemoCardxrefVsamKsdsDto));
        } catch (ConditionException e) {
        } finally {
            container.getWsVariables().setWsRespCd(task.getLastResp());
            container.getWsVariables().setWsReasCd(task.getLastResp2());
        }
        // [T-Up#INFO][COBIL00C.cbl:444] EVALUATE statement
        if (container.getWsVariables().getWsRespCd() == 0) {
            // [T-Up#INFO][COBIL00C.cbl:446] CONTINUE statement
        } else if (container.getWsVariables().getWsRespCd() == 13) {
            // [T-Up#INFO][COBIL00C.cbl:448] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COBIL00C.cbl:449] MOVE statement
            container.getWsVariables().setWsMessage("Account ID NOT found...");
            // [T-Up#INFO][COBIL00C.cbl:451] MOVE statement
            container.getCobil0ai().setActidinl(-1);
            // [T-Up#INFO][COBIL00C.cbl:452] PERFORM statement
            controlManager.run(context, sendBillpayScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else {
            // [T-Up#INFO][COBIL00C.cbl:454] DISPLAY statement
            System.out.print("RESP:");
            System.out.print(container.getWsVariables().getWsRespCd());
            System.out.print("REAS:");
            System.out.println(container.getWsVariables().getWsReasCd());
            // [T-Up#INFO][COBIL00C.cbl:455] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COBIL00C.cbl:456] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Unable to lookup XREF AIX file...");
            // [T-Up#INFO][COBIL00C.cbl:458] MOVE statement
            container.getCobil0ai().setActidinl(-1);
            // [T-Up#INFO][COBIL00C.cbl:459] PERFORM statement
            controlManager.run(context, sendBillpayScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        }
    }

    // *----------------------------------------------------------------*
    // *                      STARTBR-TRANSACT-FILE
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COBIL00C.cbl:465] STARTBR-TRANSACT-FILE Paragraph</p>
     */
    void startbrTransactFile(OpenFrameContext context) {
        Cobil00cVariableContainer container = (Cobil00cVariableContainer) context
                .getProgramVariableContainer("Cobil00c");
        // [T-Up#INFO][COBIL00C.cbl:467] EXEC_CICS statement
        /*
                       EXEC CICS STARTBR
                            DATASET   (WS-TRANSACT-FILE)
                            RIDFLD    (TRAN-ID)
                            KEYLENGTH (LENGTH OF TRAN-ID)
                            RESP      (WS-RESP-CD)
                            RESP2     (WS-REAS-CD)
                       END-EXEC
         */
        try {
            ReadPoint readPoint = readPointManager
                    .declare(
                            "awsM2CarddemoTransactVsamKsdsDao",
                            0,
                            (AwsM2CarddemoTransactVsamKsdsDto awsM2CarddemoTransactVsamKsdsDto) -> {
                                return awsM2CarddemoTransactVsamKsdsDto
                                        .getTranId();
                            });
            AwsM2CarddemoTransactVsamKsdsDto awsM2CarddemoTransactVsamKsdsDto = readPointAccessor
                    .open(readPoint, container.getTranRecord().getTranId());
            container.getTranRecord().setTranId(
                    awsM2CarddemoTransactVsamKsdsDto.getTranId());
        } catch (ConditionException e) {
        } finally {
            container.getWsVariables().setWsRespCd(task.getLastResp());
            container.getWsVariables().setWsReasCd(task.getLastResp2());
        }
        // [T-Up#INFO][COBIL00C.cbl:475] EVALUATE statement
        if (container.getWsVariables().getWsRespCd() == 0) {
            // [T-Up#INFO][COBIL00C.cbl:477] CONTINUE statement
        } else if (container.getWsVariables().getWsRespCd() == 13) {
            // [T-Up#INFO][COBIL00C.cbl:479] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COBIL00C.cbl:480] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Transaction ID NOT found...");
            // [T-Up#INFO][COBIL00C.cbl:482] MOVE statement
            container.getCobil0ai().setActidinl(-1);
            // [T-Up#INFO][COBIL00C.cbl:483] PERFORM statement
            controlManager.run(context, sendBillpayScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else {
            // [T-Up#INFO][COBIL00C.cbl:485] DISPLAY statement
            System.out.print("RESP:");
            System.out.print(container.getWsVariables().getWsRespCd());
            System.out.print("REAS:");
            System.out.println(container.getWsVariables().getWsReasCd());
            // [T-Up#INFO][COBIL00C.cbl:486] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COBIL00C.cbl:487] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Unable to lookup Transaction...");
            // [T-Up#INFO][COBIL00C.cbl:489] MOVE statement
            container.getCobil0ai().setActidinl(-1);
            // [T-Up#INFO][COBIL00C.cbl:490] PERFORM statement
            controlManager.run(context, sendBillpayScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        }
    }

    // *----------------------------------------------------------------*
    // *                      READPREV-TRANSACT-FILE
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COBIL00C.cbl:496] READPREV-TRANSACT-FILE Paragraph</p>
     */
    void readprevTransactFile(OpenFrameContext context) {
        Cobil00cVariableContainer container = (Cobil00cVariableContainer) context
                .getProgramVariableContainer("Cobil00c");
        // [T-Up#INFO][COBIL00C.cbl:498] EXEC_CICS statement
        /*
                       EXEC CICS READPREV
                            DATASET   (WS-TRANSACT-FILE)
                            INTO      (TRAN-RECORD)
                            LENGTH    (LENGTH OF TRAN-RECORD)
                            RIDFLD    (TRAN-ID)
                            KEYLENGTH (LENGTH OF TRAN-ID)
                            RESP      (WS-RESP-CD)
                            RESP2     (WS-REAS-CD)
                       END-EXEC
         */
        try {
            ReadPoint readPoint = readPointManager.find(0);
            AwsM2CarddemoTransactVsamKsdsDto awsM2CarddemoTransactVsamKsdsDto = readPointAccessor
                    .readPrev(readPoint, container.getTranRecord().getTranId());
            container.getTranRecord().setTranId(
                    awsM2CarddemoTransactVsamKsdsDto.getTranId());
            container
                    .setTranRecord(TranRecordToAwsM2CarddemoTransactVsamKsdsDto.INSTANCE
                            .toSource(awsM2CarddemoTransactVsamKsdsDto));
        } catch (ConditionException e) {
        } finally {
            container.getWsVariables().setWsRespCd(task.getLastResp());
            container.getWsVariables().setWsReasCd(task.getLastResp2());
        }
        // [T-Up#INFO][COBIL00C.cbl:508] EVALUATE statement
        if (container.getWsVariables().getWsRespCd() == 0) {
            // [T-Up#INFO][COBIL00C.cbl:510] CONTINUE statement
        } else if (container.getWsVariables().getWsRespCd() == 20) {
            // [T-Up#INFO][COBIL00C.cbl:512] MOVE statement
            container.getTranRecord().setTranId(StringUtils.repeat('0', 16));
        } else {
            // [T-Up#INFO][COBIL00C.cbl:514] DISPLAY statement
            System.out.print("RESP:");
            System.out.print(container.getWsVariables().getWsRespCd());
            System.out.print("REAS:");
            System.out.println(container.getWsVariables().getWsReasCd());
            // [T-Up#INFO][COBIL00C.cbl:515] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COBIL00C.cbl:516] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Unable to lookup Transaction...");
            // [T-Up#INFO][COBIL00C.cbl:518] MOVE statement
            container.getCobil0ai().setActidinl(-1);
            // [T-Up#INFO][COBIL00C.cbl:519] PERFORM statement
            controlManager.run(context, sendBillpayScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        }
    }

    // *----------------------------------------------------------------*
    // *                      ENDBR-TRANSACT-FILE
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COBIL00C.cbl:525] ENDBR-TRANSACT-FILE Paragraph</p>
     */
    void endbrTransactFile(OpenFrameContext context) {
        Cobil00cVariableContainer container = (Cobil00cVariableContainer) context
                .getProgramVariableContainer("Cobil00c");
        // [T-Up#INFO][COBIL00C.cbl:527] EXEC_CICS statement
        /*
                       EXEC CICS ENDBR
                            DATASET   (WS-TRANSACT-FILE)
                       END-EXEC
         */
        ReadPoint readPoint = readPointManager.find(0);
        readPointAccessor.close(readPoint);
    }

    // *----------------------------------------------------------------*
    // *                      WRITE-TRANSACT-FILE
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COBIL00C.cbl:534] WRITE-TRANSACT-FILE Paragraph</p>
     */
    void writeTransactFile(OpenFrameContext context) {
        StringBuilder tempStringBuilder1;
        StringBuilder tempStringBuilder2;
        Cobil00cVariableContainer container = (Cobil00cVariableContainer) context
                .getProgramVariableContainer("Cobil00c");
        // [T-Up#INFO][COBIL00C.cbl:536] EXEC_CICS statement
        /*
                       EXEC CICS WRITE
                            DATASET   (WS-TRANSACT-FILE)
                            FROM      (TRAN-RECORD)
                            LENGTH    (LENGTH OF TRAN-RECORD)
                            RIDFLD    (TRAN-ID)
                            KEYLENGTH (LENGTH OF TRAN-ID)
                            RESP      (WS-RESP-CD)
                            RESP2     (WS-REAS-CD)
                       END-EXEC
         */
        try {
            AwsM2CarddemoTransactVsamKsdsDto awsM2CarddemoTransactVsamKsdsDto = TranRecordToAwsM2CarddemoTransactVsamKsdsDto.INSTANCE
                    .toTarget(container.getTranRecord());
            awsM2CarddemoTransactVsamKsdsDto.setTranId(container
                    .getTranRecord().getTranId());
            recordKeyAccessor.writeWithReturningId(
                    "awsM2CarddemoTransactVsamKsdsDao",
                    awsM2CarddemoTransactVsamKsdsDto);
        } catch (ConditionException e) {
        } finally {
            container.getWsVariables().setWsRespCd(task.getLastResp());
            container.getWsVariables().setWsReasCd(task.getLastResp2());
        }
        // [T-Up#INFO][COBIL00C.cbl:546] EVALUATE statement
        if (container.getWsVariables().getWsRespCd() == 0) {
            // [T-Up#INFO][COBIL00C.cbl:548] PERFORM statement
            controlManager.run(context, initializeAllFields);
            if (controlManager.isTerminate(context)) {
                return;
            }
            // [T-Up#INFO][COBIL00C.cbl:549] MOVE statement
            container.getWsVariables()
                    .setWsMessage(StringUtils.repeat(' ', 80));
            // [T-Up#INFO][COBIL00C.cbl:550] MOVE statement
            container.setErrmsgc(container.getDfhbmsca().getDfhgreen());
            // [T-Up#INFO][COBIL00C.cbl:551] STRING statement
            tempStringBuilder1 = new StringBuilder();
            tempStringBuilder2 = new StringBuilder(container.getWsVariables()
                    .getWsMessage());
            tempStringBuilder1
                    .append("Payment successful. ")
                    .append(" Your Transaction ID is ")
                    .append(container.getTranRecord().getTranId()
                            .split(Pattern.quote(" "))[0]).append(".");
            if (tempStringBuilder1.length() <= 80) {
                tempStringBuilder2.replace(0, tempStringBuilder1.length(),
                        tempStringBuilder1.toString());
                container.getWsVariables().setWsMessage(
                        tempStringBuilder2.toString());
            }
            // [T-Up#INFO][COBIL00C.cbl:556] PERFORM statement
            controlManager.run(context, sendBillpayScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else if ((container.getWsVariables().getWsRespCd() == 15)
                || (container.getWsVariables().getWsRespCd() == 14)) {
            // [T-Up#INFO][COBIL00C.cbl:559] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COBIL00C.cbl:560] MOVE statement
            container.getWsVariables().setWsMessage("Tran ID already exist...");
            // [T-Up#INFO][COBIL00C.cbl:562] MOVE statement
            container.getCobil0ai().setActidinl(-1);
            // [T-Up#INFO][COBIL00C.cbl:563] PERFORM statement
            controlManager.run(context, sendBillpayScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        } else {
            // [T-Up#INFO][COBIL00C.cbl:565] DISPLAY statement
            System.out.print("RESP:");
            System.out.print(container.getWsVariables().getWsRespCd());
            System.out.print("REAS:");
            System.out.println(container.getWsVariables().getWsReasCd());
            // [T-Up#INFO][COBIL00C.cbl:566] MOVE statement
            container.getWsVariables().setWsErrFlg("Y");
            // [T-Up#INFO][COBIL00C.cbl:567] MOVE statement
            container.getWsVariables().setWsMessage(
                    "Unable to Add Bill pay Transaction...");
            // [T-Up#INFO][COBIL00C.cbl:569] MOVE statement
            container.getCobil0ai().setActidinl(-1);
            // [T-Up#INFO][COBIL00C.cbl:570] PERFORM statement
            controlManager.run(context, sendBillpayScreen);
            if (controlManager.isTerminate(context)) {
                return;
            }
        }
    }

    // *----------------------------------------------------------------*
    // *                      CLEAR-CURRENT-SCREEN
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COBIL00C.cbl:576] CLEAR-CURRENT-SCREEN Paragraph</p>
     */
    void clearCurrentScreen(OpenFrameContext context) {
        // [T-Up#INFO][COBIL00C.cbl:578] PERFORM statement
        controlManager.run(context, initializeAllFields);
        if (controlManager.isTerminate(context)) {
            return;
        }
        // [T-Up#INFO][COBIL00C.cbl:579] PERFORM statement
        controlManager.run(context, sendBillpayScreen);
        if (controlManager.isTerminate(context)) {
            return;
        }
    }

    // *----------------------------------------------------------------*
    // *                      INITIALIZE-ALL-FIELDS
    // *----------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][COBIL00C.cbl:584] INITIALIZE-ALL-FIELDS Paragraph</p>
     */
    void initializeAllFields(OpenFrameContext context) {
        Cobil00cVariableContainer container = (Cobil00cVariableContainer) context
                .getProgramVariableContainer("Cobil00c");
        // [T-Up#INFO][COBIL00C.cbl:586] MOVE statement
        container.getCobil0ai().setActidinl(-1);
        // [T-Up#INFO][COBIL00C.cbl:587] MOVE statement
        container.getCobil0ai().setActidini(StringUtils.repeat(' ', 11));
        container.getCobil0ai().setCurbali(StringUtils.repeat(' ', 14));
        container.getCobil0ai().setConfirmi(" ");
        container.getWsVariables().setWsMessage(StringUtils.repeat(' ', 80));
    }

    // *
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:32 CDT
    // *
}

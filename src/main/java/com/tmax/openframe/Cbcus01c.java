package com.tmax.openframe;

import static com.tmax.openframe.variable.Cbcus01cVariableContainer.*;
import com.tmax.openframe.file.*;
import com.tmax.openframe.mapper.Cbcus01cMapperInterface;
import com.tmax.openframe.runtime.cobol.CobStringUtils;
import com.tmax.openframe.runtime.context.OpenFrameContext;
import com.tmax.openframe.runtime.file.FileStatus;
import com.tmax.openframe.runtime.flow.ControlManager;
import com.tmax.openframe.variable.Cbcus01cVariableContainer;
import com.tmax.openframe.variable.group.Cbcus01cFdCustfileRec;
import java.math.*;
import java.util.*;
import java.util.function.Consumer;
import lombok.*;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Primary;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/03/20 15:15:10 KST</p>
 * <hr>
 * <p>Java class for defining logics of COBOL program</p>
 * <ul>
 * <li>The name of COBOL program: CBCUS01C.cbl</li>
 * <li>Variable container class: {@link Cbcus01cVariableContainer}</li>
 * <li>The list of files used in the program</li>
 * <ul>
 * <li>CUSTFILE-FILE: FD class {@code ->} {@link Cbcus01cFdCustfileFile}, record class {@code -> } {@link Cbcus01cFdCustfileRec}</li>
 * </ul>
 * </ul>
 */
@Service
@RequiredArgsConstructor
@Transactional
@Primary
public class Cbcus01c {
    // *
    /** 
     * <p>Class that manages an execution flow of the program</p>
     */
    protected final ControlManager controlManager;
    Consumer<OpenFrameContext> unnamedSentence = this::unnamedSentence;
    Consumer<OpenFrameContext> _1000CustfileGetNext = this::_1000CustfileGetNext;
    Consumer<OpenFrameContext> _0000CustfileOpen = this::_0000CustfileOpen;
    Consumer<OpenFrameContext> _9000CustfileClose = this::_9000CustfileClose;
    Consumer<OpenFrameContext> zAbendProgram = this::zAbendProgram;
    Consumer<OpenFrameContext> zDisplayIoStatus = this::zDisplayIoStatus;
    /** 
     * <p>Execution flow of COBOL program that defined in the procedure division</p>
     */
    ArrayList<Consumer> methodList = new ArrayList<>();
    {
        methodList.add(unnamedSentence);
        methodList.add(_1000CustfileGetNext);
        methodList.add(_0000CustfileOpen);
        methodList.add(_9000CustfileClose);
        methodList.add(zAbendProgram);
        methodList.add(zDisplayIoStatus);
    }
    @Autowired
    private Cbcus01cFileOpCustfileFile fdCustfileFile;

    /** 
     * <p>Method for executing a program logic that defined in the procedure division</p>
     * @param generalContext context that is necessary for executing program
     * @return return value of program
     */
    public int run(Map<String, Object> generalContext) {
        OpenFrameContext context = new OpenFrameContext(generalContext,
                methodList);
        if (context.getProgramVariableContainer("Cbcus01c") == null) {
            Cbcus01cVariableContainer container = new Cbcus01cVariableContainer();
            context.setProgramVariableContainer("Cbcus01c", container);
        }
        controlManager.run(context);
        return context.getReturnValue();
    }

    // ******************************************************************
    // * Program     : CBCUS01C.CBL
    // * Application : CardDemo
    // * Type        : BATCH COBOL Program
    // * Function    : Read and print customer data file.
    // ******************************************************************
    // * Copyright Amazon.com, Inc. or its affiliates.
    // * All Rights Reserved.
    // *
    // * Licensed under the Apache License, Version 2.0 (the "License").
    // * You may not use this file except in compliance with the License.
    // * You may obtain a copy of the License at
    // *
    // *    http://www.apache.org/licenses/LICENSE-2.0
    // *
    // * Unless required by applicable law or agreed to in writing,
    // * software distributed under the License is distributed on an
    // * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
    // * either express or implied. See the License for the specific
    // * language governing permissions and limitations under the License
    // ******************************************************************
    // *****************************************************************

    void unnamedSentence(OpenFrameContext context) {
        Cbcus01cVariableContainer container = (Cbcus01cVariableContainer) context
                .getProgramVariableContainer("Cbcus01c");
        // [T-Up#INFO][CBCUS01C.cbl:71] DISPLAY statement
        System.out.println("START OF EXECUTION OF PROGRAM CBCUS01C");
        // [T-Up#INFO][CBCUS01C.cbl:72] PERFORM statement
        controlManager.run(context, _0000CustfileOpen);
        if (controlManager.isTerminate(context)) {
            return;
        }
        // [T-Up#INFO][CBCUS01C.cbl:74] PERFORM statement
        while (!(CobStringUtils.compare(container.getEndOfFile(), "Y") == 0)) {
            // [T-Up#INFO][CBCUS01C.cbl:75] IF statement
            if (CobStringUtils.compare(container.getEndOfFile(), "N") == 0) {
                // [T-Up#INFO][CBCUS01C.cbl:76] PERFORM statement
                controlManager.run(context, _1000CustfileGetNext);
                if (controlManager.isTerminate(context)) {
                    return;
                }
                // [T-Up#INFO][CBCUS01C.cbl:77] IF statement
                if (CobStringUtils.compare(container.getEndOfFile(), "N") == 0) {
                    // [T-Up#INFO][CBCUS01C.cbl:78] DISPLAY statement
                    System.out.println(container.getCustomerRecord());
                }
            }
        }
        // [T-Up#INFO][CBCUS01C.cbl:83] PERFORM statement
        controlManager.run(context, _9000CustfileClose);
        if (controlManager.isTerminate(context)) {
            return;
        }
        // [T-Up#INFO][CBCUS01C.cbl:85] DISPLAY statement
        System.out.println("END OF EXECUTION OF PROGRAM CBCUS01C");
        // [T-Up#INFO][CBCUS01C.cbl:87] GOBACK statement
        context.setReturnFlag(true);
        return;
    }

    // *****************************************************************
    // * I/O ROUTINES TO ACCESS A KSDS, VSAM DATA SET...               *
    // *****************************************************************

    /** 
     * <p>[T-Up#INFO][CBCUS01C.cbl:92] 1000-CUSTFILE-GET-NEXT Paragraph</p>
     */
    void _1000CustfileGetNext(OpenFrameContext context) {
        Cbcus01cFdCustfileRec tempCbcus01cFdCustfileRec1;
        Cbcus01cVariableContainer container = (Cbcus01cVariableContainer) context
                .getProgramVariableContainer("Cbcus01c");
        tempCbcus01cFdCustfileRec1 = fdCustfileFile.readNext(context);
        if (tempCbcus01cFdCustfileRec1 != null) {
            container.setFdCustfileRec(tempCbcus01cFdCustfileRec1);
            Cbcus01cMapperInterface.Cbcus01cFdCustfileRecToCustomerRecord
                    .set(container.getFdCustfileRec(),
                            container.getCustomerRecord());
        }
        // [T-Up#INFO][CBCUS01C.cbl:94] IF statement
        if (CobStringUtils.compare(container.getCustfileStatus().get(), "00") == 0) {
            // [T-Up#INFO][CBCUS01C.cbl:95] MOVE statement
            container.setApplResult(0);
            // [T-Up#INFO][CBCUS01C.cbl:96] DISPLAY statement
            System.out.println(container.getCustomerRecord());
        } else {
            // [T-Up#INFO][CBCUS01C.cbl:98] IF statement
            if (CobStringUtils.compare(container.getCustfileStatus().get(),
                    "10") == 0) {
                // [T-Up#INFO][CBCUS01C.cbl:99] MOVE statement
                container.setApplResult(16);
            } else {
                // [T-Up#INFO][CBCUS01C.cbl:101] MOVE statement
                container.setApplResult(12);
            }
        }
        // [T-Up#INFO][CBCUS01C.cbl:104] IF statement
        if (container.getApplResult() == APPL_AOK) {
            // [T-Up#INFO][CBCUS01C.cbl:105] CONTINUE statement
        } else {
            // [T-Up#INFO][CBCUS01C.cbl:107] IF statement
            if (container.getApplResult() == APPL_EOF) {
                // [T-Up#INFO][CBCUS01C.cbl:108] MOVE statement
                container.setEndOfFile("Y");
            } else {
                // [T-Up#INFO][CBCUS01C.cbl:110] DISPLAY statement
                System.out.println("ERROR READING CUSTOMER FILE");
                // [T-Up#INFO][CBCUS01C.cbl:111] MOVE statement
                Cbcus01cMapperInterface.Cbcus01cCustfileStatusToCbcus01cIoStatus
                        .set(container.getCustfileStatus(),
                                container.getIoStatus());
                // [T-Up#INFO][CBCUS01C.cbl:112] PERFORM statement
                controlManager.run(context, zDisplayIoStatus);
                if (controlManager.isTerminate(context)) {
                    return;
                }
                // [T-Up#INFO][CBCUS01C.cbl:113] PERFORM statement
                controlManager.run(context, zAbendProgram);
                if (controlManager.isTerminate(context)) {
                    return;
                }
            }
        }
        // [T-Up#INFO][CBCUS01C.cbl:116] EXIT statement
    }

    // *---------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][CBCUS01C.cbl:118] 0000-CUSTFILE-OPEN Paragraph</p>
     */
    void _0000CustfileOpen(OpenFrameContext context) {
        Cbcus01cVariableContainer container = (Cbcus01cVariableContainer) context
                .getProgramVariableContainer("Cbcus01c");
        // [T-Up#INFO][CBCUS01C.cbl:119] MOVE statement
        container.setApplResult(8);
        // [T-Up#INFO][CBCUS01C.cbl:120] OPEN statement
        fdCustfileFile.open(context);
        // [T-Up#INFO][CBCUS01C.cbl:121] IF statement
        if (CobStringUtils.compare(container.getCustfileStatus().get(), "00") == 0) {
            // [T-Up#INFO][CBCUS01C.cbl:122] MOVE statement
            container.setApplResult(0);
        } else {
            // [T-Up#INFO][CBCUS01C.cbl:124] MOVE statement
            container.setApplResult(12);
        }
        // [T-Up#INFO][CBCUS01C.cbl:126] IF statement
        if (container.getApplResult() == APPL_AOK) {
            // [T-Up#INFO][CBCUS01C.cbl:127] CONTINUE statement
        } else {
            // [T-Up#INFO][CBCUS01C.cbl:129] DISPLAY statement
            System.out.println("ERROR OPENING CUSTFILE");
            // [T-Up#INFO][CBCUS01C.cbl:130] MOVE statement
            Cbcus01cMapperInterface.Cbcus01cCustfileStatusToCbcus01cIoStatus
                    .set(container.getCustfileStatus(), container.getIoStatus());
            // [T-Up#INFO][CBCUS01C.cbl:131] PERFORM statement
            controlManager.run(context, zDisplayIoStatus);
            if (controlManager.isTerminate(context)) {
                return;
            }
            // [T-Up#INFO][CBCUS01C.cbl:132] PERFORM statement
            controlManager.run(context, zAbendProgram);
            if (controlManager.isTerminate(context)) {
                return;
            }
        }
        // [T-Up#INFO][CBCUS01C.cbl:134] EXIT statement
    }

    // *---------------------------------------------------------------*

    /** 
     * <p>[T-Up#INFO][CBCUS01C.cbl:136] 9000-CUSTFILE-CLOSE Paragraph</p>
     */
    void _9000CustfileClose(OpenFrameContext context) {
        Cbcus01cVariableContainer container = (Cbcus01cVariableContainer) context
                .getProgramVariableContainer("Cbcus01c");
        // [T-Up#INFO][CBCUS01C.cbl:137] ADD statement
        container.setApplResult(8);
        // [T-Up#INFO][CBCUS01C.cbl:138] CLOSE statement
        fdCustfileFile.close(context);
        // [T-Up#INFO][CBCUS01C.cbl:139] IF statement
        if (CobStringUtils.compare(container.getCustfileStatus().get(), "00") == 0) {
            // [T-Up#INFO][CBCUS01C.cbl:140] SUBTRACT statement
            container.setApplResult(container.getApplResult()
                    - container.getApplResult());
        } else {
            // [T-Up#INFO][CBCUS01C.cbl:142] ADD statement
            container.setApplResult(12);
        }
        // [T-Up#INFO][CBCUS01C.cbl:144] IF statement
        if (container.getApplResult() == APPL_AOK) {
            // [T-Up#INFO][CBCUS01C.cbl:145] CONTINUE statement
        } else {
            // [T-Up#INFO][CBCUS01C.cbl:147] DISPLAY statement
            System.out.println("ERROR CLOSING CUSTOMER FILE");
            // [T-Up#INFO][CBCUS01C.cbl:148] MOVE statement
            Cbcus01cMapperInterface.Cbcus01cCustfileStatusToCbcus01cIoStatus
                    .set(container.getCustfileStatus(), container.getIoStatus());
            // [T-Up#INFO][CBCUS01C.cbl:149] PERFORM statement
            controlManager.run(context, zDisplayIoStatus);
            if (controlManager.isTerminate(context)) {
                return;
            }
            // [T-Up#INFO][CBCUS01C.cbl:150] PERFORM statement
            controlManager.run(context, zAbendProgram);
            if (controlManager.isTerminate(context)) {
                return;
            }
        }
        // [T-Up#INFO][CBCUS01C.cbl:152] EXIT statement
    }

    /** 
     * <p>[T-Up#INFO][CBCUS01C.cbl:154] Z-ABEND-PROGRAM Paragraph</p>
     */
    void zAbendProgram(OpenFrameContext context) {
        Cbcus01cVariableContainer container = (Cbcus01cVariableContainer) context
                .getProgramVariableContainer("Cbcus01c");
        // [T-Up#INFO][CBCUS01C.cbl:155] DISPLAY statement
        System.out.println("ABENDING PROGRAM");
        // [T-Up#INFO][CBCUS01C.cbl:156] MOVE statement
        container.setTiming(0);
        // [T-Up#INFO][CBCUS01C.cbl:157] MOVE statement
        container.setAbcode(999);
        // [T-Up#INFO][CBCUS01C.cbl:158] CALL statement
        throw new RuntimeException();
    }

    // *****************************************************************

    /** 
     * <p>[T-Up#INFO][CBCUS01C.cbl:161] Z-DISPLAY-IO-STATUS Paragraph</p>
     */
    void zDisplayIoStatus(OpenFrameContext context) {
        Cbcus01cVariableContainer container = (Cbcus01cVariableContainer) context
                .getProgramVariableContainer("Cbcus01c");
        // [T-Up#INFO][CBCUS01C.cbl:162] IF statement
        if (!StringUtils.isNumeric(container.getIoStatus().toString())
                || CobStringUtils.compare(container.getIoStatus().getIoStat1(),
                        "9") == 0) {
            // [T-Up#INFO][CBCUS01C.cbl:164] MOVE statement
            container.getIoStatus04().set(
                    StringUtils.overlay(container.getIoStatus04().get(),
                            container.getIoStatus().getIoStat1(), 0, 1));
            // [T-Up#INFO][CBCUS01C.cbl:165] MOVE statement
            container.setTwoBytesBinary(0);
            // [T-Up#INFO][CBCUS01C.cbl:166] MOVE statement
            container.setTwoBytesRight(container.getIoStatus().getIoStat2());
            // [T-Up#INFO][CBCUS01C.cbl:167] MOVE statement
            container.getIoStatus04().setIoStatus0403(
                    container.getTwoBytesBinary());
            // [T-Up#INFO][CBCUS01C.cbl:168] DISPLAY statement
            System.out.print("FILE STATUS IS: NNNN");
            System.out.println(container.getIoStatus04());
        } else {
            // [T-Up#INFO][CBCUS01C.cbl:170] MOVE statement
            container.getIoStatus04().set("0000");
            // [T-Up#INFO][CBCUS01C.cbl:171] MOVE statement
            container.getIoStatus04().set(
                    StringUtils.overlay(container.getIoStatus04().get(),
                            container.getIoStatus().get(), 2, 4));
            // [T-Up#INFO][CBCUS01C.cbl:172] DISPLAY statement
            System.out.print("FILE STATUS IS: NNNN");
            System.out.println(container.getIoStatus04());
        }
        // [T-Up#INFO][CBCUS01C.cbl:174] EXIT statement
    }

    // *
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:12:31 CDT
    // *
}

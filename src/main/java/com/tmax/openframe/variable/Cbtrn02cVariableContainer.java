package com.tmax.openframe.variable;

import com.tmax.openframe.runtime.cobol.CobStream;
import com.tmax.openframe.runtime.cobol.PictureFormatter;
import com.tmax.openframe.variable.group.*;
import java.math.*;
import java.util.*;
import lombok.*;
import org.apache.commons.lang3.StringUtils;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/03/20 15:15:10 KST</p>
 * <hr>
 * <p>Class that defines variables that defined in the data division of COBOL program</p>
 */
public class Cbtrn02cVariableContainer {
    // *****************************************************************
    //       *COPY CVTRA06Y.
    // *(/home/oflab/repository/pds/TEST/COBOL_COPYBOOK/CVTRA06Y.cpy)
    // *****************************************************************
    // *    Data-structure for DALYTRANsaction record (RECLN = 350)
    // *****************************************************************
    // [T-Up#INFO][CVTRA06Y.cpy:5] DALYTRAN-RECORD (level: 1)
    private @Getter @Setter DalytranRecord dalytranRecord = new DalytranRecord();
    // *
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:01 CDT
    // *
    // [T-Up#INFO][CBTRN02C.cbl:126] DALYTRAN-STATUS (level: 1)
    private @Getter @Setter Cbtrn02cDalytranStatus dalytranStatus = new Cbtrn02cDalytranStatus();
    //       *COPY CVTRA05Y.
    // *(/home/oflab/repository/pds/TEST/COBOL_COPYBOOK/CVTRA05Y.cpy)
    // *****************************************************************
    // *    Data-structure for TRANsaction record (RECLN = 350)
    // *****************************************************************
    // [T-Up#INFO][CVTRA05Y.cpy:5] TRAN-RECORD (level: 1)
    private @Getter @Setter TranRecord tranRecord = new TranRecord();
    // *
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:01 CDT
    // *
    // [T-Up#INFO][CBTRN02C.cbl:131] TRANFILE-STATUS (level: 1)
    private @Getter @Setter Cbtrn02cTranfileStatus tranfileStatus = new Cbtrn02cTranfileStatus();
    //       *COPY CVACT03Y.
    // *(/home/oflab/repository/pds/TEST/COBOL_COPYBOOK/CVACT03Y.cpy)
    // *****************************************************************
    // *    Data-structure for card xref (RECLN 50)
    // *****************************************************************
    // [T-Up#INFO][CVACT03Y.cpy:5] CARD-XREF-RECORD (level: 1)
    private @Getter @Setter CardXrefRecord cardXrefRecord = new CardXrefRecord();
    // *
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:00 CDT
    // *
    // [T-Up#INFO][CBTRN02C.cbl:136] XREFFILE-STATUS (level: 1)
    private @Getter @Setter Cbtrn02cXreffileStatus xreffileStatus = new Cbtrn02cXreffileStatus();
    // [T-Up#INFO][CBTRN02C.cbl:140] DALYREJS-STATUS (level: 1)
    private @Getter @Setter Cbtrn02cDalyrejsStatus dalyrejsStatus = new Cbtrn02cDalyrejsStatus();
    //       *COPY CVACT01Y.
    // *(/home/oflab/repository/pds/TEST/COBOL_COPYBOOK/CVACT01Y.cpy)
    // *****************************************************************
    // *    Data-structure for  account entity (RECLN 300)
    // *****************************************************************
    // [T-Up#INFO][CVACT01Y.cpy:5] ACCOUNT-RECORD (level: 1)
    private @Getter @Setter AccountRecord accountRecord = new AccountRecord();
    // *
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:15:59 CDT
    // *
    // [T-Up#INFO][CBTRN02C.cbl:145] ACCTFILE-STATUS (level: 1)
    private @Getter @Setter Cbtrn02cAcctfileStatus acctfileStatus = new Cbtrn02cAcctfileStatus();
    //       *COPY CVTRA01Y.
    // *(/home/oflab/repository/pds/TEST/COBOL_COPYBOOK/CVTRA01Y.cpy)
    // *****************************************************************
    // *    Data-structure for transaction category balance (RECLN = 50)
    // *****************************************************************
    // [T-Up#INFO][CVTRA01Y.cpy:5] TRAN-CAT-BAL-RECORD (level: 1)
    private @Getter @Setter TranCatBalRecord tranCatBalRecord = new TranCatBalRecord();
    // *
    // * Ver: CardDemo_v1.0-15-g27d6c6f-68 Date: 2022-07-19 23:16:00 CDT
    // *
    // [T-Up#INFO][CBTRN02C.cbl:150] TCATBALF-STATUS (level: 1)
    private @Getter @Setter Cbtrn02cTcatbalfStatus tcatbalfStatus = new Cbtrn02cTcatbalfStatus();
    // [T-Up#INFO][CBTRN02C.cbl:154] IO-STATUS (level: 1)
    private @Getter @Setter Cbtrn02cIoStatus ioStatus = new Cbtrn02cIoStatus();
    // [T-Up#INFO][CBTRN02C.cbl:157] TWO-BYTES-BINARY (level: 1)
    private @Getter @Setter int twoBytesBinary;
    // [T-Up#INFO][CBTRN02C.cbl:161] IO-STATUS-04 (level: 1)
    private @Getter @Setter Cbtrn02cIoStatus04 ioStatus04 = new Cbtrn02cIoStatus04();
    // [T-Up#INFO][CBTRN02C.cbl:165] APPL-RESULT (level: 1)
    private @Getter @Setter int applResult;
    // [T-Up#INFO][CBTRN02C.cbl:166] APPL-AOK (level: 88)
    public static final int APPL_AOK = 0;
    // [T-Up#INFO][CBTRN02C.cbl:167] APPL-EOF (level: 88)
    public static final int APPL_EOF = 16;
    // [T-Up#INFO][CBTRN02C.cbl:169] END-OF-FILE (level: 1)
    private @Getter String endOfFile = "N";
    // [T-Up#INFO][CBTRN02C.cbl:170] ABCODE (level: 1)
    private @Getter @Setter int abcode;
    // [T-Up#INFO][CBTRN02C.cbl:171] TIMING (level: 1)
    private @Getter @Setter int timing;
    // * T I M E S T A M P   D B 2  X(26)     EEEE-MM-DD-UU.MM.SS.HH0000
    // [T-Up#INFO][CBTRN02C.cbl:173] COBOL-TS (level: 1)
    private @Getter @Setter Cbtrn02cCobolTs cobolTs = new Cbtrn02cCobolTs();
    // [T-Up#INFO][CBTRN02C.cbl:182] DB2-FORMAT-TS (level: 1)
    private @Getter String db2FormatTs = StringUtils.repeat(' ', 26);
    // [T-Up#INFO][CBTRN02C.cbl:199] REJECT-RECORD (level: 1)
    private @Getter @Setter Cbtrn02cRejectRecord rejectRecord = new Cbtrn02cRejectRecord();
    // [T-Up#INFO][CBTRN02C.cbl:203] WS-VALIDATION-TRAILER (level: 1)
    private @Getter @Setter Cbtrn02cWsValidationTrailer wsValidationTrailer = new Cbtrn02cWsValidationTrailer();
    // [T-Up#INFO][CBTRN02C.cbl:207] WS-COUNTERS (level: 1)
    private @Getter @Setter Cbtrn02cWsCounters wsCounters = new Cbtrn02cWsCounters();
    // [T-Up#INFO][CBTRN02C.cbl:212] WS-FLAGS (level: 1)
    private @Getter @Setter Cbtrn02cWsFlags wsFlags = new Cbtrn02cWsFlags();
    // [T-Up#INFO][CBTRN02C.cbl:67] FD-TRAN-RECORD (level: 1)
    private @Getter @Setter Cbtrn02cFdTranRecord fdTranRecord = new Cbtrn02cFdTranRecord();
    // [T-Up#INFO][CBTRN02C.cbl:72] FD-TRANFILE-REC (level: 1)
    private @Getter @Setter Cbtrn02cFdTranfileRec fdTranfileRec = new Cbtrn02cFdTranfileRec();
    // [T-Up#INFO][CBTRN02C.cbl:89] FD-XREFFILE-REC (level: 1)
    private @Getter @Setter Cbtrn02cFdXreffileRec fdXreffileRec = new Cbtrn02cFdXreffileRec();
    // [T-Up#INFO][CBTRN02C.cbl:94] FD-REJS-RECORD (level: 1)
    private @Getter @Setter Cbtrn02cFdRejsRecord fdRejsRecord = new Cbtrn02cFdRejsRecord();
    // [T-Up#INFO][CBTRN02C.cbl:99] FD-ACCTFILE-REC (level: 1)
    private @Getter @Setter Cbtrn02cFdAcctfileRec fdAcctfileRec = new Cbtrn02cFdAcctfileRec();
    // [T-Up#INFO][CBTRN02C.cbl:115] FD-TRAN-CAT-BAL-RECORD (level: 1)
    private @Getter @Setter Cbtrn02cFdTranCatBalRecord fdTranCatBalRecord = new Cbtrn02cFdTranCatBalRecord();

    public Cbtrn02cTwoBytesAlpha getTwoBytesAlpha() {
        return Cbtrn02cTwoBytesAlpha.builder().twoBytesLeft(getTwoBytesLeft())
                .twoBytesRight(getTwoBytesRight()).build();
    }

    public void setTwoBytesAlpha(String source) {
        setTwoBytesLeft(source.substring(0, 1));
        setTwoBytesRight(source.substring(1, 2));
    }

    public void setTwoBytesAlpha(Cbtrn02cTwoBytesAlpha source) {
        setTwoBytesAlpha(source.get());
    }

    public String getTwoBytesLeft() {
        return CobStream.convShortToString((short) getTwoBytesBinary())
                .substring(0, 1);
    }

    public void setTwoBytesLeft(String source) {
        try {
            setTwoBytesBinary(CobStream.convStringToShort(StringUtils.overlay(
                    CobStream.convShortToString((short) getTwoBytesBinary()),
                    source, 0, 1)));
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            setTwoBytesBinary(0);
        }
    }

    public String getTwoBytesRight() {
        return CobStream.convShortToString((short) getTwoBytesBinary())
                .substring(1, 2);
    }

    public void setTwoBytesRight(String source) {
        try {
            setTwoBytesBinary(CobStream.convStringToShort(StringUtils.overlay(
                    CobStream.convShortToString((short) getTwoBytesBinary()),
                    source, 1, 2)));
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            setTwoBytesBinary(0);
        }
    }

    public void setEndOfFile(String source) {
        endOfFile = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
    }

    public void setDb2FormatTs(String source) {
        db2FormatTs = StringUtils
                .truncate(StringUtils.rightPad(source, 26), 26);
    }

    public _FILLER_REDEFINE_1 getFILLER_REDEFINE_1() {
        return _FILLER_REDEFINE_1.builder().db2Yyyy(getDb2Yyyy())
                .db2Streep1(getDb2Streep1()).db2Mm(getDb2Mm())
                .db2Streep2(getDb2Streep2()).db2Dd(getDb2Dd())
                .db2Streep3(getDb2Streep3()).db2Hh(getDb2Hh())
                .db2Dot1(getDb2Dot1()).db2Min(getDb2Min())
                .db2Dot2(getDb2Dot2()).db2Ss(getDb2Ss()).db2Dot3(getDb2Dot3())
                .db2Mil(getDb2Mil()).db2Rest(getDb2Rest()).build();
    }

    public void setFILLER_REDEFINE_1(String source) {
        setDb2Yyyy(source.substring(0, 4));
        setDb2Streep1(source.substring(4, 5));
        setDb2Mm(source.substring(5, 7));
        setDb2Streep2(source.substring(7, 8));
        setDb2Dd(source.substring(8, 10));
        setDb2Streep3(source.substring(10, 11));
        setDb2Hh(source.substring(11, 13));
        setDb2Dot1(source.substring(13, 14));
        setDb2Min(source.substring(14, 16));
        setDb2Dot2(source.substring(16, 17));
        setDb2Ss(source.substring(17, 19));
        setDb2Dot3(source.substring(19, 20));
        try {
            setDb2Mil(CobStream.convZonedStringToInt(source.substring(20, 22),
                    2));
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            setDb2Mil(0);
        }
        setDb2Rest(source.substring(22, 26));
    }

    public void setFILLER_REDEFINE_1(_FILLER_REDEFINE_1 source) {
        setFILLER_REDEFINE_1(source.get());
    }

    public String getDb2Yyyy() {
        return getDb2FormatTs().substring(0, 4);
    }

    public void setDb2Yyyy(String source) {
        setDb2FormatTs(StringUtils.overlay(getDb2FormatTs(), source, 0, 4));
    }

    public String getDb2Streep1() {
        return getDb2FormatTs().substring(4, 5);
    }

    public void setDb2Streep1(String source) {
        setDb2FormatTs(StringUtils.overlay(getDb2FormatTs(), source, 4, 5));
    }

    public String getDb2Mm() {
        return getDb2FormatTs().substring(5, 7);
    }

    public void setDb2Mm(String source) {
        setDb2FormatTs(StringUtils.overlay(getDb2FormatTs(), source, 5, 7));
    }

    public String getDb2Streep2() {
        return getDb2FormatTs().substring(7, 8);
    }

    public void setDb2Streep2(String source) {
        setDb2FormatTs(StringUtils.overlay(getDb2FormatTs(), source, 7, 8));
    }

    public String getDb2Dd() {
        return getDb2FormatTs().substring(8, 10);
    }

    public void setDb2Dd(String source) {
        setDb2FormatTs(StringUtils.overlay(getDb2FormatTs(), source, 8, 10));
    }

    public String getDb2Streep3() {
        return getDb2FormatTs().substring(10, 11);
    }

    public void setDb2Streep3(String source) {
        setDb2FormatTs(StringUtils.overlay(getDb2FormatTs(), source, 10, 11));
    }

    public String getDb2Hh() {
        return getDb2FormatTs().substring(11, 13);
    }

    public void setDb2Hh(String source) {
        setDb2FormatTs(StringUtils.overlay(getDb2FormatTs(), source, 11, 13));
    }

    public String getDb2Dot1() {
        return getDb2FormatTs().substring(13, 14);
    }

    public void setDb2Dot1(String source) {
        setDb2FormatTs(StringUtils.overlay(getDb2FormatTs(), source, 13, 14));
    }

    public String getDb2Min() {
        return getDb2FormatTs().substring(14, 16);
    }

    public void setDb2Min(String source) {
        setDb2FormatTs(StringUtils.overlay(getDb2FormatTs(), source, 14, 16));
    }

    public String getDb2Dot2() {
        return getDb2FormatTs().substring(16, 17);
    }

    public void setDb2Dot2(String source) {
        setDb2FormatTs(StringUtils.overlay(getDb2FormatTs(), source, 16, 17));
    }

    public String getDb2Ss() {
        return getDb2FormatTs().substring(17, 19);
    }

    public void setDb2Ss(String source) {
        setDb2FormatTs(StringUtils.overlay(getDb2FormatTs(), source, 17, 19));
    }

    public String getDb2Dot3() {
        return getDb2FormatTs().substring(19, 20);
    }

    public void setDb2Dot3(String source) {
        setDb2FormatTs(StringUtils.overlay(getDb2FormatTs(), source, 19, 20));
    }

    public int getDb2Mil() {
        try {
            return CobStream.convZonedStringToInt(
                    getDb2FormatTs().substring(20, 22), 2);
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            return 0;
        }
    }

    public void setDb2Mil(int source) {
        setDb2FormatTs(StringUtils.overlay(getDb2FormatTs(),
                CobStream.convZonedIntToString(source, 2), 20, 22));
    }

    public String getDb2Rest() {
        return getDb2FormatTs().substring(22, 26);
    }

    public void setDb2Rest(String source) {
        setDb2FormatTs(StringUtils.overlay(getDb2FormatTs(), source, 22, 26));
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class Cbtrn02cTwoBytesAlpha {
        // [T-Up#INFO][CBTRN02C.cbl:159] TWO-BYTES-LEFT (level: 5)
        private @Getter String twoBytesLeft = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CBTRN02C.cbl:160] TWO-BYTES-RIGHT (level: 5)
        private @Getter String twoBytesRight = StringUtils.repeat(' ', 1);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(twoBytesLeft);
            sb.append(twoBytesRight);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(getTwoBytesLeft());
            sb.append(getTwoBytesRight());
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class _FILLER_REDEFINE_1 {
        // [T-Up#INFO][CBTRN02C.cbl:184] DB2-YYYY (level: 6)
        private @Getter String db2Yyyy = StringUtils.repeat(' ', 4);
        // [T-Up#INFO][CBTRN02C.cbl:185] DB2-STREEP-1 (level: 6)
        private @Getter String db2Streep1 = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CBTRN02C.cbl:186] DB2-MM (level: 6)
        private @Getter String db2Mm = StringUtils.repeat(' ', 2);
        // [T-Up#INFO][CBTRN02C.cbl:187] DB2-STREEP-2 (level: 6)
        private @Getter String db2Streep2 = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CBTRN02C.cbl:188] DB2-DD (level: 6)
        private @Getter String db2Dd = StringUtils.repeat(' ', 2);
        // [T-Up#INFO][CBTRN02C.cbl:189] DB2-STREEP-3 (level: 6)
        private @Getter String db2Streep3 = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CBTRN02C.cbl:190] DB2-HH (level: 6)
        private @Getter String db2Hh = StringUtils.repeat(' ', 2);
        // [T-Up#INFO][CBTRN02C.cbl:191] DB2-DOT-1 (level: 6)
        private @Getter String db2Dot1 = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CBTRN02C.cbl:192] DB2-MIN (level: 6)
        private @Getter String db2Min = StringUtils.repeat(' ', 2);
        // [T-Up#INFO][CBTRN02C.cbl:193] DB2-DOT-2 (level: 6)
        private @Getter String db2Dot2 = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CBTRN02C.cbl:194] DB2-SS (level: 6)
        private @Getter String db2Ss = StringUtils.repeat(' ', 2);
        // [T-Up#INFO][CBTRN02C.cbl:195] DB2-DOT-3 (level: 6)
        private @Getter String db2Dot3 = StringUtils.repeat(' ', 1);
        // [T-Up#INFO][CBTRN02C.cbl:196] DB2-MIL (level: 6)
        private @Getter @Setter int db2Mil;
        // [T-Up#INFO][CBTRN02C.cbl:197] DB2-REST (level: 6)
        private @Getter String db2Rest = StringUtils.repeat(' ', 4);

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(db2Yyyy);
            sb.append(db2Streep1);
            sb.append(db2Mm);
            sb.append(db2Streep2);
            sb.append(db2Dd);
            sb.append(db2Streep3);
            sb.append(db2Hh);
            sb.append(db2Dot1);
            sb.append(db2Min);
            sb.append(db2Dot2);
            sb.append(db2Ss);
            sb.append(db2Dot3);
            sb.append(CobStream.convZonedIntToString(db2Mil, 2));
            sb.append(db2Rest);
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(getDb2Yyyy());
            sb.append(getDb2Streep1());
            sb.append(getDb2Mm());
            sb.append(getDb2Streep2());
            sb.append(getDb2Dd());
            sb.append(getDb2Streep3());
            sb.append(getDb2Hh());
            sb.append(getDb2Dot1());
            sb.append(getDb2Min());
            sb.append(getDb2Dot2());
            sb.append(getDb2Ss());
            sb.append(getDb2Dot3());
            sb.append(PictureFormatter
                    .intFormatWithoutSign((long) db2Mil, "00"));
            sb.append(getDb2Rest());
            return sb.toString();
        }
    }
}

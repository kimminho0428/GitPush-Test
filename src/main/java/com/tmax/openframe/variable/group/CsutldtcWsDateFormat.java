package com.tmax.openframe.variable.group;

import com.tmax.openframe.runtime.cobol.CobStream;
import java.math.*;
import java.util.*;
import java.util.stream.Collectors;
import lombok.*;
import org.apache.commons.lang3.StringUtils;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/03/20 15:15:20 KST</p>
 * <hr>
 * <p>Class that defines variables for COBOL group item WS-DATE-FORMAT</p>
 */
public @AllArgsConstructor @NoArgsConstructor class CsutldtcWsDateFormat {
    // [T-Up#INFO][CSUTLDTC.cbl:34] Vstring-length (level: 2)
    private @Getter @Setter int vstringLength;
    // [T-Up#INFO][CSUTLDTC.cbl:35] Vstring-text (level: 2)
    private @Getter @Setter CsutldtcVstringText vstringText = new CsutldtcVstringText();

    public void set(String source) {
        source = StringUtils.truncate(StringUtils.rightPad(source, 258), 258);
        try {
            setVstringLength(CobStream
                    .convStringToShort(source.substring(0, 2)));
        } catch (NumberFormatException exception) {
            exception.printStackTrace();
            setVstringLength(0);
        }
        getVstringText().set(source.substring(2, 258));
    }

    public String get() {
        StringBuilder sb = new StringBuilder();
        sb.append(CobStream.convShortToString((short) getVstringLength()));
        sb.append(getVstringText().get());
        return sb.toString();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(String.valueOf(getVstringLength()));
        sb.append(getVstringText().toString());
        return sb.toString();
    }

    public static @AllArgsConstructor @NoArgsConstructor class CsutldtcVstringText {
        // [T-Up#INFO][CSUTLDTC.cbl:36] Vstring-char (level: 3)
        private @Getter @Setter String[] vstringChar = Collections.nCopies(256,
                StringUtils.repeat(' ', 1)).toArray(new String[0]);

        public void set(String source) {
            source = StringUtils.truncate(StringUtils.rightPad(source, 256),
                    256);
            setVstringChar(source.split("(?<=\\G.{1})"));
        }

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(Arrays.stream(getVstringChar()).collect(
                    Collectors.joining()));
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(String.join("", getVstringChar()));
            return sb.toString();
        }

        public String getVstringChar(int index) {
            return vstringChar[index];
        }

        public void setVstringChar(int index, String source) {
            vstringChar[index] = source;
        }
    }
}

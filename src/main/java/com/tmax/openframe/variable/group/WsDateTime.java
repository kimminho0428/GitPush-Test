package com.tmax.openframe.variable.group;

import com.tmax.openframe.runtime.cobol.CobStream;
import com.tmax.openframe.runtime.cobol.PictureFormatter;
import java.math.*;
import java.util.*;
import java.util.stream.*;
import lombok.*;
import org.apache.commons.lang3.StringUtils;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/03/20 15:15:20 KST</p>
 * <hr>
 * <p>Class that defines variables for COPYBOOK item</p>
 */
public @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class WsDateTime {
    // [T-Up#INFO][CSDAT01Y.cpy:19] WS-CURDATE-DATA (level: 5)
    private @Getter @Setter @Builder.Default WsCurdateData wsCurdateData = new WsCurdateData();
    // [T-Up#INFO][CSDAT01Y.cpy:31] WS-CURDATE-MM-DD-YY (level: 5)
    private @Getter @Setter @Builder.Default WsCurdateMmDdYy wsCurdateMmDdYy = new WsCurdateMmDdYy();
    // [T-Up#INFO][CSDAT01Y.cpy:37] WS-CURTIME-HH-MM-SS (level: 5)
    private @Getter @Setter @Builder.Default WsCurtimeHhMmSs wsCurtimeHhMmSs = new WsCurtimeHhMmSs();
    // [T-Up#INFO][CSDAT01Y.cpy:43] WS-TIMESTAMP (level: 5)
    private @Getter @Setter @Builder.Default WsTimestamp wsTimestamp = new WsTimestamp();

    public static WsDateTime createDefaultValueInstance() {
        return new WsDateTime.builder()
                .wsCurdateData(WsCurdateData.createDefaultValueInstance())
                .wsCurdateMmDdYy(WsCurdateMmDdYy.createDefaultValueInstance())
                .wsCurtimeHhMmSs(WsCurtimeHhMmSs.createDefaultValueInstance())
                .wsTimestamp(WsTimestamp.createDefaultValueInstance()).build();
    }

    public void set(String source) {
        source = StringUtils.truncate(StringUtils.rightPad(source, 58), 58);
        getWsCurdateData().set(source.substring(0, 16));
        getWsCurdateMmDdYy().set(source.substring(16, 24));
        getWsCurtimeHhMmSs().set(source.substring(24, 32));
        getWsTimestamp().set(source.substring(32, 58));
    }

    public String get() {
        StringBuilder sb = new StringBuilder();
        sb.append(getWsCurdateData().get());
        sb.append(getWsCurdateMmDdYy().get());
        sb.append(getWsCurtimeHhMmSs().get());
        sb.append(getWsTimestamp().get());
        return sb.toString();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(getWsCurdateData().toString());
        sb.append(getWsCurdateMmDdYy().toString());
        sb.append(getWsCurtimeHhMmSs().toString());
        sb.append(getWsTimestamp().toString());
        return sb.toString();
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class WsCurdateData {
        // [T-Up#INFO][CSDAT01Y.cpy:20] WS-CURDATE (level: 10)
        private @Getter @Setter @Builder.Default WsCurdate wsCurdate = new WsCurdate();
        // [T-Up#INFO][CSDAT01Y.cpy:25] WS-CURTIME (level: 10)
        private @Getter @Setter @Builder.Default WsCurtime wsCurtime = new WsCurtime();

        public static WsCurdateData createDefaultValueInstance() {
            return new WsCurdateData.builder()
                    .wsCurdate(WsCurdate.createDefaultValueInstance())
                    .wsCurtime(WsCurtime.createDefaultValueInstance()).build();
        }

        public void set(String source) {
            source = StringUtils.truncate(StringUtils.rightPad(source, 16), 16);
            getWsCurdate().set(source.substring(0, 8));
            getWsCurtime().set(source.substring(8, 16));
        }

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(getWsCurdate().get());
            sb.append(getWsCurtime().get());
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(getWsCurdate().toString());
            sb.append(getWsCurtime().toString());
            return sb.toString();
        }

        public int getWsCurdateN() {
            try {
                return CobStream.convZonedStringToInt(
                        CobStream.convZonedIntToString(getWsCurdate()
                                .getWsCurdateYear(), 4)
                                + CobStream.convZonedIntToString(getWsCurdate()
                                        .getWsCurdateMonth(), 2)
                                + CobStream.convZonedIntToString(getWsCurdate()
                                        .getWsCurdateDay(), 2), 8);
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                return 0;
            }
        }

        public void setWsCurdateN(int source) {
            try {
                getWsCurdate().setWsCurdateYear(
                        CobStream.convZonedStringToInt(CobStream
                                .convZonedIntToString(source, 8)
                                .substring(0, 4), 4));
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                getWsCurdate().setWsCurdateYear(0);
            }
            try {
                getWsCurdate().setWsCurdateMonth(
                        CobStream.convZonedStringToInt(CobStream
                                .convZonedIntToString(source, 8)
                                .substring(4, 6), 2));
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                getWsCurdate().setWsCurdateMonth(0);
            }
            try {
                getWsCurdate().setWsCurdateDay(
                        CobStream.convZonedStringToInt(CobStream
                                .convZonedIntToString(source, 8)
                                .substring(6, 8), 2));
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                getWsCurdate().setWsCurdateDay(0);
            }
        }

        public int getWsCurtimeN() {
            try {
                return CobStream.convZonedStringToInt(
                        CobStream.convZonedIntToString(getWsCurtime()
                                .getWsCurtimeHours(), 2)
                                + CobStream.convZonedIntToString(getWsCurtime()
                                        .getWsCurtimeMinute(), 2)
                                + CobStream.convZonedIntToString(getWsCurtime()
                                        .getWsCurtimeSecond(), 2)
                                + CobStream.convZonedIntToString(getWsCurtime()
                                        .getWsCurtimeMilsec(), 2), 8);
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                return 0;
            }
        }

        public void setWsCurtimeN(int source) {
            try {
                getWsCurtime().setWsCurtimeHours(
                        CobStream.convZonedStringToInt(CobStream
                                .convZonedIntToString(source, 8)
                                .substring(0, 2), 2));
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                getWsCurtime().setWsCurtimeHours(0);
            }
            try {
                getWsCurtime().setWsCurtimeMinute(
                        CobStream.convZonedStringToInt(CobStream
                                .convZonedIntToString(source, 8)
                                .substring(2, 4), 2));
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                getWsCurtime().setWsCurtimeMinute(0);
            }
            try {
                getWsCurtime().setWsCurtimeSecond(
                        CobStream.convZonedStringToInt(CobStream
                                .convZonedIntToString(source, 8)
                                .substring(4, 6), 2));
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                getWsCurtime().setWsCurtimeSecond(0);
            }
            try {
                getWsCurtime().setWsCurtimeMilsec(
                        CobStream.convZonedStringToInt(CobStream
                                .convZonedIntToString(source, 8)
                                .substring(6, 8), 2));
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                getWsCurtime().setWsCurtimeMilsec(0);
            }
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class WsCurdate {
        // [T-Up#INFO][CSDAT01Y.cpy:21] WS-CURDATE-YEAR (level: 15)
        private @Getter @Setter int wsCurdateYear;
        // [T-Up#INFO][CSDAT01Y.cpy:22] WS-CURDATE-MONTH (level: 15)
        private @Getter @Setter int wsCurdateMonth;
        // [T-Up#INFO][CSDAT01Y.cpy:23] WS-CURDATE-DAY (level: 15)
        private @Getter @Setter int wsCurdateDay;

        public static WsCurdate createDefaultValueInstance() {
            return new WsCurdate.builder().build();
        }

        public void set(String source) {
            source = StringUtils.truncate(StringUtils.rightPad(source, 8), 8);
            try {
                setWsCurdateYear(CobStream.convZonedStringToInt(
                        source.substring(0, 4), 4));
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                setWsCurdateYear(0);
            }
            try {
                setWsCurdateMonth(CobStream.convZonedStringToInt(
                        source.substring(4, 6), 2));
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                setWsCurdateMonth(0);
            }
            try {
                setWsCurdateDay(CobStream.convZonedStringToInt(
                        source.substring(6, 8), 2));
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                setWsCurdateDay(0);
            }
        }

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(CobStream.convZonedIntToString(getWsCurdateYear(), 4));
            sb.append(CobStream.convZonedIntToString(getWsCurdateMonth(), 2));
            sb.append(CobStream.convZonedIntToString(getWsCurdateDay(), 2));
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(PictureFormatter.intFormatWithoutSign(
                    (long) getWsCurdateYear(), "0000"));
            sb.append(PictureFormatter.intFormatWithoutSign(
                    (long) getWsCurdateMonth(), "00"));
            sb.append(PictureFormatter.intFormatWithoutSign(
                    (long) getWsCurdateDay(), "00"));
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class WsCurtime {
        // [T-Up#INFO][CSDAT01Y.cpy:26] WS-CURTIME-HOURS (level: 15)
        private @Getter @Setter int wsCurtimeHours;
        // [T-Up#INFO][CSDAT01Y.cpy:27] WS-CURTIME-MINUTE (level: 15)
        private @Getter @Setter int wsCurtimeMinute;
        // [T-Up#INFO][CSDAT01Y.cpy:28] WS-CURTIME-SECOND (level: 15)
        private @Getter @Setter int wsCurtimeSecond;
        // [T-Up#INFO][CSDAT01Y.cpy:29] WS-CURTIME-MILSEC (level: 15)
        private @Getter @Setter int wsCurtimeMilsec;

        public static WsCurtime createDefaultValueInstance() {
            return new WsCurtime.builder().build();
        }

        public void set(String source) {
            source = StringUtils.truncate(StringUtils.rightPad(source, 8), 8);
            try {
                setWsCurtimeHours(CobStream.convZonedStringToInt(
                        source.substring(0, 2), 2));
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                setWsCurtimeHours(0);
            }
            try {
                setWsCurtimeMinute(CobStream.convZonedStringToInt(
                        source.substring(2, 4), 2));
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                setWsCurtimeMinute(0);
            }
            try {
                setWsCurtimeSecond(CobStream.convZonedStringToInt(
                        source.substring(4, 6), 2));
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                setWsCurtimeSecond(0);
            }
            try {
                setWsCurtimeMilsec(CobStream.convZonedStringToInt(
                        source.substring(6, 8), 2));
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                setWsCurtimeMilsec(0);
            }
        }

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(CobStream.convZonedIntToString(getWsCurtimeHours(), 2));
            sb.append(CobStream.convZonedIntToString(getWsCurtimeMinute(), 2));
            sb.append(CobStream.convZonedIntToString(getWsCurtimeSecond(), 2));
            sb.append(CobStream.convZonedIntToString(getWsCurtimeMilsec(), 2));
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(PictureFormatter.intFormatWithoutSign(
                    (long) getWsCurtimeHours(), "00"));
            sb.append(PictureFormatter.intFormatWithoutSign(
                    (long) getWsCurtimeMinute(), "00"));
            sb.append(PictureFormatter.intFormatWithoutSign(
                    (long) getWsCurtimeSecond(), "00"));
            sb.append(PictureFormatter.intFormatWithoutSign(
                    (long) getWsCurtimeMilsec(), "00"));
            return sb.toString();
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class WsCurdateMmDdYy {
        // [T-Up#INFO][CSDAT01Y.cpy:32] WS-CURDATE-MM (level: 10)
        private @Getter @Setter int wsCurdateMm;
        // [T-Up#INFO][CSDAT01Y.cpy:33] FILLER (level: 10)
        private @Getter @Builder.Default String FILLER_1 = "/";
        // [T-Up#INFO][CSDAT01Y.cpy:34] WS-CURDATE-DD (level: 10)
        private @Getter @Setter int wsCurdateDd;
        // [T-Up#INFO][CSDAT01Y.cpy:35] FILLER (level: 10)
        private @Getter @Builder.Default String FILLER_2 = "/";
        // [T-Up#INFO][CSDAT01Y.cpy:36] WS-CURDATE-YY (level: 10)
        private @Getter @Setter int wsCurdateYy;

        public static WsCurdateMmDdYy createDefaultValueInstance() {
            return new WsCurdateMmDdYy.builder().build();
        }

        public void set(String source) {
            source = StringUtils.truncate(StringUtils.rightPad(source, 8), 8);
            try {
                setWsCurdateMm(CobStream.convZonedStringToInt(
                        source.substring(0, 2), 2));
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                setWsCurdateMm(0);
            }
            setFILLER_1(source.substring(2, 3));
            try {
                setWsCurdateDd(CobStream.convZonedStringToInt(
                        source.substring(3, 5), 2));
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                setWsCurdateDd(0);
            }
            setFILLER_2(source.substring(5, 6));
            try {
                setWsCurdateYy(CobStream.convZonedStringToInt(
                        source.substring(6, 8), 2));
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                setWsCurdateYy(0);
            }
        }

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(CobStream.convZonedIntToString(getWsCurdateMm(), 2));
            sb.append(getFILLER_1());
            sb.append(CobStream.convZonedIntToString(getWsCurdateDd(), 2));
            sb.append(getFILLER_2());
            sb.append(CobStream.convZonedIntToString(getWsCurdateYy(), 2));
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(PictureFormatter.intFormatWithoutSign(
                    (long) getWsCurdateMm(), "00"));
            sb.append(getFILLER_1());
            sb.append(PictureFormatter.intFormatWithoutSign(
                    (long) getWsCurdateDd(), "00"));
            sb.append(getFILLER_2());
            sb.append(PictureFormatter.intFormatWithoutSign(
                    (long) getWsCurdateYy(), "00"));
            return sb.toString();
        }

        public void setFILLER_1(String source) {
            FILLER_1 = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
        }

        public void setFILLER_2(String source) {
            FILLER_2 = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class WsCurtimeHhMmSs {
        // [T-Up#INFO][CSDAT01Y.cpy:38] WS-CURTIME-HH (level: 10)
        private @Getter @Setter int wsCurtimeHh;
        // [T-Up#INFO][CSDAT01Y.cpy:39] FILLER (level: 10)
        private @Getter @Builder.Default String FILLER_3 = ":";
        // [T-Up#INFO][CSDAT01Y.cpy:40] WS-CURTIME-MM (level: 10)
        private @Getter @Setter int wsCurtimeMm;
        // [T-Up#INFO][CSDAT01Y.cpy:41] FILLER (level: 10)
        private @Getter @Builder.Default String FILLER_4 = ":";
        // [T-Up#INFO][CSDAT01Y.cpy:42] WS-CURTIME-SS (level: 10)
        private @Getter @Setter int wsCurtimeSs;

        public static WsCurtimeHhMmSs createDefaultValueInstance() {
            return new WsCurtimeHhMmSs.builder().build();
        }

        public void set(String source) {
            source = StringUtils.truncate(StringUtils.rightPad(source, 8), 8);
            try {
                setWsCurtimeHh(CobStream.convZonedStringToInt(
                        source.substring(0, 2), 2));
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                setWsCurtimeHh(0);
            }
            setFILLER_3(source.substring(2, 3));
            try {
                setWsCurtimeMm(CobStream.convZonedStringToInt(
                        source.substring(3, 5), 2));
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                setWsCurtimeMm(0);
            }
            setFILLER_4(source.substring(5, 6));
            try {
                setWsCurtimeSs(CobStream.convZonedStringToInt(
                        source.substring(6, 8), 2));
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                setWsCurtimeSs(0);
            }
        }

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(CobStream.convZonedIntToString(getWsCurtimeHh(), 2));
            sb.append(getFILLER_3());
            sb.append(CobStream.convZonedIntToString(getWsCurtimeMm(), 2));
            sb.append(getFILLER_4());
            sb.append(CobStream.convZonedIntToString(getWsCurtimeSs(), 2));
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(PictureFormatter.intFormatWithoutSign(
                    (long) getWsCurtimeHh(), "00"));
            sb.append(getFILLER_3());
            sb.append(PictureFormatter.intFormatWithoutSign(
                    (long) getWsCurtimeMm(), "00"));
            sb.append(getFILLER_4());
            sb.append(PictureFormatter.intFormatWithoutSign(
                    (long) getWsCurtimeSs(), "00"));
            return sb.toString();
        }

        public void setFILLER_3(String source) {
            FILLER_3 = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
        }

        public void setFILLER_4(String source) {
            FILLER_4 = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
        }
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class WsTimestamp {
        // [T-Up#INFO][CSDAT01Y.cpy:44] WS-TIMESTAMP-DT-YYYY (level: 10)
        private @Getter @Setter int wsTimestampDtYyyy;
        // [T-Up#INFO][CSDAT01Y.cpy:45] FILLER (level: 10)
        private @Getter @Builder.Default String FILLER_5 = "-";
        // [T-Up#INFO][CSDAT01Y.cpy:46] WS-TIMESTAMP-DT-MM (level: 10)
        private @Getter @Setter int wsTimestampDtMm;
        // [T-Up#INFO][CSDAT01Y.cpy:47] FILLER (level: 10)
        private @Getter @Builder.Default String FILLER_6 = "-";
        // [T-Up#INFO][CSDAT01Y.cpy:48] WS-TIMESTAMP-DT-DD (level: 10)
        private @Getter @Setter int wsTimestampDtDd;
        // [T-Up#INFO][CSDAT01Y.cpy:49] FILLER (level: 10)
        private @Getter @Builder.Default String FILLER_7 = " ";
        // [T-Up#INFO][CSDAT01Y.cpy:50] WS-TIMESTAMP-TM-HH (level: 10)
        private @Getter @Setter int wsTimestampTmHh;
        // [T-Up#INFO][CSDAT01Y.cpy:51] FILLER (level: 10)
        private @Getter @Builder.Default String FILLER_8 = ":";
        // [T-Up#INFO][CSDAT01Y.cpy:52] WS-TIMESTAMP-TM-MM (level: 10)
        private @Getter @Setter int wsTimestampTmMm;
        // [T-Up#INFO][CSDAT01Y.cpy:53] FILLER (level: 10)
        private @Getter @Builder.Default String FILLER_9 = ":";
        // [T-Up#INFO][CSDAT01Y.cpy:54] WS-TIMESTAMP-TM-SS (level: 10)
        private @Getter @Setter int wsTimestampTmSs;
        // [T-Up#INFO][CSDAT01Y.cpy:55] FILLER (level: 10)
        private @Getter @Builder.Default String FILLER_10 = ".";
        // [T-Up#INFO][CSDAT01Y.cpy:56] WS-TIMESTAMP-TM-MS6 (level: 10)
        private @Getter @Setter int wsTimestampTmMs6;

        public static WsTimestamp createDefaultValueInstance() {
            return new WsTimestamp.builder().build();
        }

        public void set(String source) {
            source = StringUtils.truncate(StringUtils.rightPad(source, 26), 26);
            try {
                setWsTimestampDtYyyy(CobStream.convZonedStringToInt(
                        source.substring(0, 4), 4));
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                setWsTimestampDtYyyy(0);
            }
            setFILLER_5(source.substring(4, 5));
            try {
                setWsTimestampDtMm(CobStream.convZonedStringToInt(
                        source.substring(5, 7), 2));
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                setWsTimestampDtMm(0);
            }
            setFILLER_6(source.substring(7, 8));
            try {
                setWsTimestampDtDd(CobStream.convZonedStringToInt(
                        source.substring(8, 10), 2));
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                setWsTimestampDtDd(0);
            }
            setFILLER_7(source.substring(10, 11));
            try {
                setWsTimestampTmHh(CobStream.convZonedStringToInt(
                        source.substring(11, 13), 2));
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                setWsTimestampTmHh(0);
            }
            setFILLER_8(source.substring(13, 14));
            try {
                setWsTimestampTmMm(CobStream.convZonedStringToInt(
                        source.substring(14, 16), 2));
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                setWsTimestampTmMm(0);
            }
            setFILLER_9(source.substring(16, 17));
            try {
                setWsTimestampTmSs(CobStream.convZonedStringToInt(
                        source.substring(17, 19), 2));
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                setWsTimestampTmSs(0);
            }
            setFILLER_10(source.substring(19, 20));
            try {
                setWsTimestampTmMs6(CobStream.convZonedStringToInt(
                        source.substring(20, 26), 6));
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                setWsTimestampTmMs6(0);
            }
        }

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(CobStream.convZonedIntToString(getWsTimestampDtYyyy(), 4));
            sb.append(getFILLER_5());
            sb.append(CobStream.convZonedIntToString(getWsTimestampDtMm(), 2));
            sb.append(getFILLER_6());
            sb.append(CobStream.convZonedIntToString(getWsTimestampDtDd(), 2));
            sb.append(getFILLER_7());
            sb.append(CobStream.convZonedIntToString(getWsTimestampTmHh(), 2));
            sb.append(getFILLER_8());
            sb.append(CobStream.convZonedIntToString(getWsTimestampTmMm(), 2));
            sb.append(getFILLER_9());
            sb.append(CobStream.convZonedIntToString(getWsTimestampTmSs(), 2));
            sb.append(getFILLER_10());
            sb.append(CobStream.convZonedIntToString(getWsTimestampTmMs6(), 6));
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(PictureFormatter.intFormatWithoutSign(
                    (long) getWsTimestampDtYyyy(), "0000"));
            sb.append(getFILLER_5());
            sb.append(PictureFormatter.intFormatWithoutSign(
                    (long) getWsTimestampDtMm(), "00"));
            sb.append(getFILLER_6());
            sb.append(PictureFormatter.intFormatWithoutSign(
                    (long) getWsTimestampDtDd(), "00"));
            sb.append(getFILLER_7());
            sb.append(PictureFormatter.intFormatWithoutSign(
                    (long) getWsTimestampTmHh(), "00"));
            sb.append(getFILLER_8());
            sb.append(PictureFormatter.intFormatWithoutSign(
                    (long) getWsTimestampTmMm(), "00"));
            sb.append(getFILLER_9());
            sb.append(PictureFormatter.intFormatWithoutSign(
                    (long) getWsTimestampTmSs(), "00"));
            sb.append(getFILLER_10());
            sb.append(PictureFormatter.intFormatWithoutSign(
                    (long) getWsTimestampTmMs6(), "000000"));
            return sb.toString();
        }

        public void setFILLER_5(String source) {
            FILLER_5 = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
        }

        public void setFILLER_6(String source) {
            FILLER_6 = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
        }

        public void setFILLER_7(String source) {
            FILLER_7 = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
        }

        public void setFILLER_8(String source) {
            FILLER_8 = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
        }

        public void setFILLER_9(String source) {
            FILLER_9 = StringUtils.truncate(StringUtils.rightPad(source, 1), 1);
        }

        public void setFILLER_10(String source) {
            FILLER_10 = StringUtils
                    .truncate(StringUtils.rightPad(source, 1), 1);
        }
    }
}

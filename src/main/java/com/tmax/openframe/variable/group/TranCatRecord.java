package com.tmax.openframe.variable.group;

import com.tmax.openframe.runtime.cobol.CobStream;
import com.tmax.openframe.runtime.cobol.PictureFormatter;
import java.math.*;
import java.util.*;
import java.util.stream.*;
import lombok.*;
import org.apache.commons.lang3.StringUtils;

/** 
 * <p>This source code was generated by T-Up OpenFrame COBOL to Java migrator</p>
 * <p>  Generation date : 2024/03/20 15:15:11 KST</p>
 * <hr>
 * <p>Class that defines variables for COPYBOOK item</p>
 */
public @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class TranCatRecord {
    // [T-Up#INFO][CVTRA04Y.cpy:6] TRAN-CAT-KEY (level: 5)
    private @Getter @Setter @Builder.Default TranCatKey tranCatKey = new TranCatKey();
    // [T-Up#INFO][CVTRA04Y.cpy:9] TRAN-CAT-TYPE-DESC (level: 5)
    private @Getter @Builder.Default String tranCatTypeDesc = StringUtils
            .repeat(' ', 50);
    // [T-Up#INFO][CVTRA04Y.cpy:10] FILLER (level: 5)
    private @Getter @Builder.Default String FILLER_1 = StringUtils.repeat(' ',
            4);

    public static TranCatRecord createDefaultValueInstance() {
        return new TranCatRecord.builder().tranCatKey(
                TranCatKey.createDefaultValueInstance()).build();
    }

    public void set(String source) {
        source = StringUtils.truncate(StringUtils.rightPad(source, 60), 60);
        getTranCatKey().set(source.substring(0, 6));
        setTranCatTypeDesc(source.substring(6, 56));
        setFILLER_1(source.substring(56, 60));
    }

    public String get() {
        StringBuilder sb = new StringBuilder();
        sb.append(getTranCatKey().get());
        sb.append(getTranCatTypeDesc());
        sb.append(getFILLER_1());
        return sb.toString();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(getTranCatKey().toString());
        sb.append(getTranCatTypeDesc());
        sb.append(getFILLER_1());
        return sb.toString();
    }

    public void setTranCatTypeDesc(String source) {
        tranCatTypeDesc = StringUtils.truncate(
                StringUtils.rightPad(source, 50), 50);
    }

    public void setFILLER_1(String source) {
        FILLER_1 = StringUtils.truncate(StringUtils.rightPad(source, 4), 4);
    }

    public static @AllArgsConstructor @NoArgsConstructor @Builder(builderClassName = "builder") class TranCatKey {
        // [T-Up#INFO][CVTRA04Y.cpy:7] TRAN-TYPE-CD (level: 10)
        private @Getter @Builder.Default String tranTypeCd = StringUtils
                .repeat(' ', 2);
        // [T-Up#INFO][CVTRA04Y.cpy:8] TRAN-CAT-CD (level: 10)
        private @Getter @Setter int tranCatCd;

        public static TranCatKey createDefaultValueInstance() {
            return new TranCatKey.builder().build();
        }

        public void set(String source) {
            source = StringUtils.truncate(StringUtils.rightPad(source, 6), 6);
            setTranTypeCd(source.substring(0, 2));
            try {
                setTranCatCd(CobStream.convZonedStringToInt(
                        source.substring(2, 6), 4));
            } catch (NumberFormatException exception) {
                exception.printStackTrace();
                setTranCatCd(0);
            }
        }

        public String get() {
            StringBuilder sb = new StringBuilder();
            sb.append(getTranTypeCd());
            sb.append(CobStream.convZonedIntToString(getTranCatCd(), 4));
            return sb.toString();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(getTranTypeCd());
            sb.append(PictureFormatter.intFormatWithoutSign(
                    (long) getTranCatCd(), "0000"));
            return sb.toString();
        }

        public void setTranTypeCd(String source) {
            tranTypeCd = StringUtils.truncate(StringUtils.rightPad(source, 2),
                    2);
        }
    }
}
